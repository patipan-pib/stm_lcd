
lcd1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004f7c  080001f8  080001f8  000011f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08005174  08005174  00006174  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005184  08005184  00007014  2**0
                  CONTENTS
  4 .ARM          00000008  08005184  08005184  00006184  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800518c  0800518c  00007014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800518c  0800518c  0000618c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005190  08005190  00006190  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000014  20000000  08005194  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001c8  20000014  080051a8  00007014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001dc  080051a8  000071dc  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00007014  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001151c  00000000  00000000  00007042  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000026b7  00000000  00000000  0001855e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011a0  00000000  00000000  0001ac18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000dc0  00000000  00000000  0001bdb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028be0  00000000  00000000  0001cb78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016f93  00000000  00000000  00045758  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ff6fd  00000000  00000000  0005c6eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0015bde8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004b00  00000000  00000000  0015be2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000040  00000000  00000000  0016092c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	@ (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	@ (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	@ (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	20000014 	.word	0x20000014
 8000214:	00000000 	.word	0x00000000
 8000218:	0800515c 	.word	0x0800515c

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	@ (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	@ (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	@ (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000018 	.word	0x20000018
 8000234:	0800515c 	.word	0x0800515c

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295
 8000248:	f04f 30ff 	movne.w	r0, #4294967295
 800024c:	f000 b96a 	b.w	8000524 <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9d08      	ldr	r5, [sp, #32]
 800026e:	460c      	mov	r4, r1
 8000270:	2b00      	cmp	r3, #0
 8000272:	d14e      	bne.n	8000312 <__udivmoddi4+0xaa>
 8000274:	4694      	mov	ip, r2
 8000276:	458c      	cmp	ip, r1
 8000278:	4686      	mov	lr, r0
 800027a:	fab2 f282 	clz	r2, r2
 800027e:	d962      	bls.n	8000346 <__udivmoddi4+0xde>
 8000280:	b14a      	cbz	r2, 8000296 <__udivmoddi4+0x2e>
 8000282:	f1c2 0320 	rsb	r3, r2, #32
 8000286:	4091      	lsls	r1, r2
 8000288:	fa20 f303 	lsr.w	r3, r0, r3
 800028c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000290:	4319      	orrs	r1, r3
 8000292:	fa00 fe02 	lsl.w	lr, r0, r2
 8000296:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800029a:	fa1f f68c 	uxth.w	r6, ip
 800029e:	fbb1 f4f7 	udiv	r4, r1, r7
 80002a2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002a6:	fb07 1114 	mls	r1, r7, r4, r1
 80002aa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002ae:	fb04 f106 	mul.w	r1, r4, r6
 80002b2:	4299      	cmp	r1, r3
 80002b4:	d90a      	bls.n	80002cc <__udivmoddi4+0x64>
 80002b6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ba:	f104 30ff 	add.w	r0, r4, #4294967295
 80002be:	f080 8112 	bcs.w	80004e6 <__udivmoddi4+0x27e>
 80002c2:	4299      	cmp	r1, r3
 80002c4:	f240 810f 	bls.w	80004e6 <__udivmoddi4+0x27e>
 80002c8:	3c02      	subs	r4, #2
 80002ca:	4463      	add	r3, ip
 80002cc:	1a59      	subs	r1, r3, r1
 80002ce:	fa1f f38e 	uxth.w	r3, lr
 80002d2:	fbb1 f0f7 	udiv	r0, r1, r7
 80002d6:	fb07 1110 	mls	r1, r7, r0, r1
 80002da:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002de:	fb00 f606 	mul.w	r6, r0, r6
 80002e2:	429e      	cmp	r6, r3
 80002e4:	d90a      	bls.n	80002fc <__udivmoddi4+0x94>
 80002e6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ea:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ee:	f080 80fc 	bcs.w	80004ea <__udivmoddi4+0x282>
 80002f2:	429e      	cmp	r6, r3
 80002f4:	f240 80f9 	bls.w	80004ea <__udivmoddi4+0x282>
 80002f8:	4463      	add	r3, ip
 80002fa:	3802      	subs	r0, #2
 80002fc:	1b9b      	subs	r3, r3, r6
 80002fe:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000302:	2100      	movs	r1, #0
 8000304:	b11d      	cbz	r5, 800030e <__udivmoddi4+0xa6>
 8000306:	40d3      	lsrs	r3, r2
 8000308:	2200      	movs	r2, #0
 800030a:	e9c5 3200 	strd	r3, r2, [r5]
 800030e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000312:	428b      	cmp	r3, r1
 8000314:	d905      	bls.n	8000322 <__udivmoddi4+0xba>
 8000316:	b10d      	cbz	r5, 800031c <__udivmoddi4+0xb4>
 8000318:	e9c5 0100 	strd	r0, r1, [r5]
 800031c:	2100      	movs	r1, #0
 800031e:	4608      	mov	r0, r1
 8000320:	e7f5      	b.n	800030e <__udivmoddi4+0xa6>
 8000322:	fab3 f183 	clz	r1, r3
 8000326:	2900      	cmp	r1, #0
 8000328:	d146      	bne.n	80003b8 <__udivmoddi4+0x150>
 800032a:	42a3      	cmp	r3, r4
 800032c:	d302      	bcc.n	8000334 <__udivmoddi4+0xcc>
 800032e:	4290      	cmp	r0, r2
 8000330:	f0c0 80f0 	bcc.w	8000514 <__udivmoddi4+0x2ac>
 8000334:	1a86      	subs	r6, r0, r2
 8000336:	eb64 0303 	sbc.w	r3, r4, r3
 800033a:	2001      	movs	r0, #1
 800033c:	2d00      	cmp	r5, #0
 800033e:	d0e6      	beq.n	800030e <__udivmoddi4+0xa6>
 8000340:	e9c5 6300 	strd	r6, r3, [r5]
 8000344:	e7e3      	b.n	800030e <__udivmoddi4+0xa6>
 8000346:	2a00      	cmp	r2, #0
 8000348:	f040 8090 	bne.w	800046c <__udivmoddi4+0x204>
 800034c:	eba1 040c 	sub.w	r4, r1, ip
 8000350:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000354:	fa1f f78c 	uxth.w	r7, ip
 8000358:	2101      	movs	r1, #1
 800035a:	fbb4 f6f8 	udiv	r6, r4, r8
 800035e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000362:	fb08 4416 	mls	r4, r8, r6, r4
 8000366:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800036a:	fb07 f006 	mul.w	r0, r7, r6
 800036e:	4298      	cmp	r0, r3
 8000370:	d908      	bls.n	8000384 <__udivmoddi4+0x11c>
 8000372:	eb1c 0303 	adds.w	r3, ip, r3
 8000376:	f106 34ff 	add.w	r4, r6, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0x11a>
 800037c:	4298      	cmp	r0, r3
 800037e:	f200 80cd 	bhi.w	800051c <__udivmoddi4+0x2b4>
 8000382:	4626      	mov	r6, r4
 8000384:	1a1c      	subs	r4, r3, r0
 8000386:	fa1f f38e 	uxth.w	r3, lr
 800038a:	fbb4 f0f8 	udiv	r0, r4, r8
 800038e:	fb08 4410 	mls	r4, r8, r0, r4
 8000392:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000396:	fb00 f707 	mul.w	r7, r0, r7
 800039a:	429f      	cmp	r7, r3
 800039c:	d908      	bls.n	80003b0 <__udivmoddi4+0x148>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f100 34ff 	add.w	r4, r0, #4294967295
 80003a6:	d202      	bcs.n	80003ae <__udivmoddi4+0x146>
 80003a8:	429f      	cmp	r7, r3
 80003aa:	f200 80b0 	bhi.w	800050e <__udivmoddi4+0x2a6>
 80003ae:	4620      	mov	r0, r4
 80003b0:	1bdb      	subs	r3, r3, r7
 80003b2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b6:	e7a5      	b.n	8000304 <__udivmoddi4+0x9c>
 80003b8:	f1c1 0620 	rsb	r6, r1, #32
 80003bc:	408b      	lsls	r3, r1
 80003be:	fa22 f706 	lsr.w	r7, r2, r6
 80003c2:	431f      	orrs	r7, r3
 80003c4:	fa20 fc06 	lsr.w	ip, r0, r6
 80003c8:	fa04 f301 	lsl.w	r3, r4, r1
 80003cc:	ea43 030c 	orr.w	r3, r3, ip
 80003d0:	40f4      	lsrs	r4, r6
 80003d2:	fa00 f801 	lsl.w	r8, r0, r1
 80003d6:	0c38      	lsrs	r0, r7, #16
 80003d8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003dc:	fbb4 fef0 	udiv	lr, r4, r0
 80003e0:	fa1f fc87 	uxth.w	ip, r7
 80003e4:	fb00 441e 	mls	r4, r0, lr, r4
 80003e8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ec:	fb0e f90c 	mul.w	r9, lr, ip
 80003f0:	45a1      	cmp	r9, r4
 80003f2:	fa02 f201 	lsl.w	r2, r2, r1
 80003f6:	d90a      	bls.n	800040e <__udivmoddi4+0x1a6>
 80003f8:	193c      	adds	r4, r7, r4
 80003fa:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003fe:	f080 8084 	bcs.w	800050a <__udivmoddi4+0x2a2>
 8000402:	45a1      	cmp	r9, r4
 8000404:	f240 8081 	bls.w	800050a <__udivmoddi4+0x2a2>
 8000408:	f1ae 0e02 	sub.w	lr, lr, #2
 800040c:	443c      	add	r4, r7
 800040e:	eba4 0409 	sub.w	r4, r4, r9
 8000412:	fa1f f983 	uxth.w	r9, r3
 8000416:	fbb4 f3f0 	udiv	r3, r4, r0
 800041a:	fb00 4413 	mls	r4, r0, r3, r4
 800041e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000422:	fb03 fc0c 	mul.w	ip, r3, ip
 8000426:	45a4      	cmp	ip, r4
 8000428:	d907      	bls.n	800043a <__udivmoddi4+0x1d2>
 800042a:	193c      	adds	r4, r7, r4
 800042c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000430:	d267      	bcs.n	8000502 <__udivmoddi4+0x29a>
 8000432:	45a4      	cmp	ip, r4
 8000434:	d965      	bls.n	8000502 <__udivmoddi4+0x29a>
 8000436:	3b02      	subs	r3, #2
 8000438:	443c      	add	r4, r7
 800043a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800043e:	fba0 9302 	umull	r9, r3, r0, r2
 8000442:	eba4 040c 	sub.w	r4, r4, ip
 8000446:	429c      	cmp	r4, r3
 8000448:	46ce      	mov	lr, r9
 800044a:	469c      	mov	ip, r3
 800044c:	d351      	bcc.n	80004f2 <__udivmoddi4+0x28a>
 800044e:	d04e      	beq.n	80004ee <__udivmoddi4+0x286>
 8000450:	b155      	cbz	r5, 8000468 <__udivmoddi4+0x200>
 8000452:	ebb8 030e 	subs.w	r3, r8, lr
 8000456:	eb64 040c 	sbc.w	r4, r4, ip
 800045a:	fa04 f606 	lsl.w	r6, r4, r6
 800045e:	40cb      	lsrs	r3, r1
 8000460:	431e      	orrs	r6, r3
 8000462:	40cc      	lsrs	r4, r1
 8000464:	e9c5 6400 	strd	r6, r4, [r5]
 8000468:	2100      	movs	r1, #0
 800046a:	e750      	b.n	800030e <__udivmoddi4+0xa6>
 800046c:	f1c2 0320 	rsb	r3, r2, #32
 8000470:	fa20 f103 	lsr.w	r1, r0, r3
 8000474:	fa0c fc02 	lsl.w	ip, ip, r2
 8000478:	fa24 f303 	lsr.w	r3, r4, r3
 800047c:	4094      	lsls	r4, r2
 800047e:	430c      	orrs	r4, r1
 8000480:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000484:	fa00 fe02 	lsl.w	lr, r0, r2
 8000488:	fa1f f78c 	uxth.w	r7, ip
 800048c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000490:	fb08 3110 	mls	r1, r8, r0, r3
 8000494:	0c23      	lsrs	r3, r4, #16
 8000496:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800049a:	fb00 f107 	mul.w	r1, r0, r7
 800049e:	4299      	cmp	r1, r3
 80004a0:	d908      	bls.n	80004b4 <__udivmoddi4+0x24c>
 80004a2:	eb1c 0303 	adds.w	r3, ip, r3
 80004a6:	f100 36ff 	add.w	r6, r0, #4294967295
 80004aa:	d22c      	bcs.n	8000506 <__udivmoddi4+0x29e>
 80004ac:	4299      	cmp	r1, r3
 80004ae:	d92a      	bls.n	8000506 <__udivmoddi4+0x29e>
 80004b0:	3802      	subs	r0, #2
 80004b2:	4463      	add	r3, ip
 80004b4:	1a5b      	subs	r3, r3, r1
 80004b6:	b2a4      	uxth	r4, r4
 80004b8:	fbb3 f1f8 	udiv	r1, r3, r8
 80004bc:	fb08 3311 	mls	r3, r8, r1, r3
 80004c0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004c4:	fb01 f307 	mul.w	r3, r1, r7
 80004c8:	42a3      	cmp	r3, r4
 80004ca:	d908      	bls.n	80004de <__udivmoddi4+0x276>
 80004cc:	eb1c 0404 	adds.w	r4, ip, r4
 80004d0:	f101 36ff 	add.w	r6, r1, #4294967295
 80004d4:	d213      	bcs.n	80004fe <__udivmoddi4+0x296>
 80004d6:	42a3      	cmp	r3, r4
 80004d8:	d911      	bls.n	80004fe <__udivmoddi4+0x296>
 80004da:	3902      	subs	r1, #2
 80004dc:	4464      	add	r4, ip
 80004de:	1ae4      	subs	r4, r4, r3
 80004e0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004e4:	e739      	b.n	800035a <__udivmoddi4+0xf2>
 80004e6:	4604      	mov	r4, r0
 80004e8:	e6f0      	b.n	80002cc <__udivmoddi4+0x64>
 80004ea:	4608      	mov	r0, r1
 80004ec:	e706      	b.n	80002fc <__udivmoddi4+0x94>
 80004ee:	45c8      	cmp	r8, r9
 80004f0:	d2ae      	bcs.n	8000450 <__udivmoddi4+0x1e8>
 80004f2:	ebb9 0e02 	subs.w	lr, r9, r2
 80004f6:	eb63 0c07 	sbc.w	ip, r3, r7
 80004fa:	3801      	subs	r0, #1
 80004fc:	e7a8      	b.n	8000450 <__udivmoddi4+0x1e8>
 80004fe:	4631      	mov	r1, r6
 8000500:	e7ed      	b.n	80004de <__udivmoddi4+0x276>
 8000502:	4603      	mov	r3, r0
 8000504:	e799      	b.n	800043a <__udivmoddi4+0x1d2>
 8000506:	4630      	mov	r0, r6
 8000508:	e7d4      	b.n	80004b4 <__udivmoddi4+0x24c>
 800050a:	46d6      	mov	lr, sl
 800050c:	e77f      	b.n	800040e <__udivmoddi4+0x1a6>
 800050e:	4463      	add	r3, ip
 8000510:	3802      	subs	r0, #2
 8000512:	e74d      	b.n	80003b0 <__udivmoddi4+0x148>
 8000514:	4606      	mov	r6, r0
 8000516:	4623      	mov	r3, r4
 8000518:	4608      	mov	r0, r1
 800051a:	e70f      	b.n	800033c <__udivmoddi4+0xd4>
 800051c:	3e02      	subs	r6, #2
 800051e:	4463      	add	r3, ip
 8000520:	e730      	b.n	8000384 <__udivmoddi4+0x11c>
 8000522:	bf00      	nop

08000524 <__aeabi_idiv0>:
 8000524:	4770      	bx	lr
 8000526:	bf00      	nop

08000528 <PWM_SetDutyCycle.0>:
  */
int main(void)
{

  /* USER CODE BEGIN 1 */
void PWM_SetDutyCycle(uint8_t duty) {
 8000528:	b480      	push	{r7}
 800052a:	b085      	sub	sp, #20
 800052c:	af00      	add	r7, sp, #0
 800052e:	4603      	mov	r3, r0
 8000530:	71fb      	strb	r3, [r7, #7]
 8000532:	f8c7 c000 	str.w	ip, [r7]
	uint32_t pulse = (duty * (__HAL_TIM_GET_AUTORELOAD(&htim2))) / 100;
 8000536:	79fb      	ldrb	r3, [r7, #7]
 8000538:	4a09      	ldr	r2, [pc, #36]	@ (8000560 <PWM_SetDutyCycle.0+0x38>)
 800053a:	6812      	ldr	r2, [r2, #0]
 800053c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800053e:	fb02 f303 	mul.w	r3, r2, r3
 8000542:	4a08      	ldr	r2, [pc, #32]	@ (8000564 <PWM_SetDutyCycle.0+0x3c>)
 8000544:	fba2 2303 	umull	r2, r3, r2, r3
 8000548:	095b      	lsrs	r3, r3, #5
 800054a:	60fb      	str	r3, [r7, #12]
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, pulse);
 800054c:	4b04      	ldr	r3, [pc, #16]	@ (8000560 <PWM_SetDutyCycle.0+0x38>)
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	68fa      	ldr	r2, [r7, #12]
 8000552:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8000554:	bf00      	nop
 8000556:	3714      	adds	r7, #20
 8000558:	46bd      	mov	sp, r7
 800055a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800055e:	4770      	bx	lr
 8000560:	2000018c 	.word	0x2000018c
 8000564:	51eb851f 	.word	0x51eb851f

08000568 <main>:
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b084      	sub	sp, #16
 800056c:	af00      	add	r7, sp, #0
int main(void)
 800056e:	f107 0318 	add.w	r3, r7, #24
 8000572:	607b      	str	r3, [r7, #4]
  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000574:	f000 fb24 	bl	8000bc0 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000578:	f001 f85e 	bl	8001638 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800057c:	f000 f87e 	bl	800067c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000580:	f000 fa98 	bl	8000ab4 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000584:	f000 f8e8 	bl	8000758 <MX_ADC1_Init>
  MX_I2C1_Init();
 8000588:	f000 f938 	bl	80007fc <MX_I2C1_Init>
  MX_RNG_Init();
 800058c:	f000 f976 	bl	800087c <MX_RNG_Init>
  MX_SPI5_Init();
 8000590:	f000 f988 	bl	80008a4 <MX_SPI5_Init>
  MX_TIM1_Init();
 8000594:	f000 f9c4 	bl	8000920 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000598:	f000 fa16 	bl	80009c8 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  // setting ILI9341
    ILI9341_Init();
 800059c:	f000 fe7a 	bl	8001294 <ILI9341_Init>
    ILI9341_Set_Rotation(SCREEN_HORIZONTAL_1);  // หมุนหน้าจอเป็นแนวนอน
 80005a0:	2001      	movs	r0, #1
 80005a2:	f000 fe19 	bl	80011d8 <ILI9341_Set_Rotation>
    ILI9341_Fill_Screen(WHITE);
 80005a6:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80005aa:	f001 f81f 	bl	80015ec <ILI9341_Fill_Screen>

    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80005ae:	2100      	movs	r1, #0
 80005b0:	482d      	ldr	r0, [pc, #180]	@ (8000668 <main+0x100>)
 80005b2:	f003 fe77 	bl	80042a4 <HAL_TIM_PWM_Start>
    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, DutyCycle);
 80005b6:	4b2d      	ldr	r3, [pc, #180]	@ (800066c <main+0x104>)
 80005b8:	681a      	ldr	r2, [r3, #0]
 80005ba:	4b2b      	ldr	r3, [pc, #172]	@ (8000668 <main+0x100>)
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	635a      	str	r2, [r3, #52]	@ 0x34

    HAL_ADC_Start(&hadc1);
 80005c0:	482b      	ldr	r0, [pc, #172]	@ (8000670 <main+0x108>)
 80005c2:	f001 f8ff 	bl	80017c4 <HAL_ADC_Start>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  while (HAL_ADC_PollForConversion(&hadc1, 1000) != HAL_OK){}
 80005c6:	bf00      	nop
 80005c8:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80005cc:	4828      	ldr	r0, [pc, #160]	@ (8000670 <main+0x108>)
 80005ce:	f001 f9c7 	bl	8001960 <HAL_ADC_PollForConversion>
 80005d2:	4603      	mov	r3, r0
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d1f7      	bne.n	80005c8 <main+0x60>
	  int adc_value = HAL_ADC_GetValue(&hadc1);
 80005d8:	4825      	ldr	r0, [pc, #148]	@ (8000670 <main+0x108>)
 80005da:	f001 fa4c 	bl	8001a76 <HAL_ADC_GetValue>
 80005de:	4603      	mov	r3, r0
 80005e0:	60fb      	str	r3, [r7, #12]

	  // แปลงค่า ADC (0-4095) เป็น Duty Cycle (25% - 80%)
	  uint8_t duty = 25 + ((adc_value * 55) / 4095);
 80005e2:	68fa      	ldr	r2, [r7, #12]
 80005e4:	4613      	mov	r3, r2
 80005e6:	00db      	lsls	r3, r3, #3
 80005e8:	1a9b      	subs	r3, r3, r2
 80005ea:	00db      	lsls	r3, r3, #3
 80005ec:	1a9b      	subs	r3, r3, r2
 80005ee:	4a21      	ldr	r2, [pc, #132]	@ (8000674 <main+0x10c>)
 80005f0:	fb82 1203 	smull	r1, r2, r2, r3
 80005f4:	441a      	add	r2, r3
 80005f6:	12d2      	asrs	r2, r2, #11
 80005f8:	17db      	asrs	r3, r3, #31
 80005fa:	1ad3      	subs	r3, r2, r3
 80005fc:	b2db      	uxtb	r3, r3
 80005fe:	3319      	adds	r3, #25
 8000600:	72fb      	strb	r3, [r7, #11]

	  // ปรับค่าเป็นขั้นละ 5% (เช่น 25%, 30%, 35%, ..., 80%) ((duty + 2) / 5) * 5
	  // ปรับค่าเป็นขั้นละ 10% (เช่น 25%, 30%, 35%, ..., 80%) ((duty + 5) / 10) * 10
	  duty = ((duty + 2) / 5) * 5;
 8000602:	7afb      	ldrb	r3, [r7, #11]
 8000604:	3302      	adds	r3, #2
 8000606:	4a1c      	ldr	r2, [pc, #112]	@ (8000678 <main+0x110>)
 8000608:	fb82 1203 	smull	r1, r2, r2, r3
 800060c:	1052      	asrs	r2, r2, #1
 800060e:	17db      	asrs	r3, r3, #31
 8000610:	1ad3      	subs	r3, r2, r3
 8000612:	b2db      	uxtb	r3, r3
 8000614:	461a      	mov	r2, r3
 8000616:	0092      	lsls	r2, r2, #2
 8000618:	4413      	add	r3, r2
 800061a:	72fb      	strb	r3, [r7, #11]

	  PWM_SetDutyCycle(duty);
 800061c:	7afb      	ldrb	r3, [r7, #11]
 800061e:	1d3a      	adds	r2, r7, #4
 8000620:	4694      	mov	ip, r2
 8000622:	4618      	mov	r0, r3
 8000624:	f7ff ff80 	bl	8000528 <PWM_SetDutyCycle.0>

	  if (duty > 25 && duty <= 45) {
 8000628:	7afb      	ldrb	r3, [r7, #11]
 800062a:	2b19      	cmp	r3, #25
 800062c:	d907      	bls.n	800063e <main+0xd6>
 800062e:	7afb      	ldrb	r3, [r7, #11]
 8000630:	2b2d      	cmp	r3, #45	@ 0x2d
 8000632:	d804      	bhi.n	800063e <main+0xd6>
		  ILI9341_Fill_Screen(GREEN);
 8000634:	f44f 60fc 	mov.w	r0, #2016	@ 0x7e0
 8000638:	f000 ffd8 	bl	80015ec <ILI9341_Fill_Screen>
 800063c:	e013      	b.n	8000666 <main+0xfe>

	  } else if (duty > 45 && duty <= 65){
 800063e:	7afb      	ldrb	r3, [r7, #11]
 8000640:	2b2d      	cmp	r3, #45	@ 0x2d
 8000642:	d907      	bls.n	8000654 <main+0xec>
 8000644:	7afb      	ldrb	r3, [r7, #11]
 8000646:	2b41      	cmp	r3, #65	@ 0x41
 8000648:	d804      	bhi.n	8000654 <main+0xec>
		  ILI9341_Fill_Screen(RED);
 800064a:	f44f 4078 	mov.w	r0, #63488	@ 0xf800
 800064e:	f000 ffcd 	bl	80015ec <ILI9341_Fill_Screen>
 8000652:	e008      	b.n	8000666 <main+0xfe>

	  } else if (duty > 65 && duty <= 80){
 8000654:	7afb      	ldrb	r3, [r7, #11]
 8000656:	2b41      	cmp	r3, #65	@ 0x41
 8000658:	d9b5      	bls.n	80005c6 <main+0x5e>
 800065a:	7afb      	ldrb	r3, [r7, #11]
 800065c:	2b50      	cmp	r3, #80	@ 0x50
 800065e:	d8b2      	bhi.n	80005c6 <main+0x5e>
		  ILI9341_Fill_Screen(BLUE);
 8000660:	201f      	movs	r0, #31
 8000662:	f000 ffc3 	bl	80015ec <ILI9341_Fill_Screen>
  {
 8000666:	e7ae      	b.n	80005c6 <main+0x5e>
 8000668:	2000018c 	.word	0x2000018c
 800066c:	20000000 	.word	0x20000000
 8000670:	20000030 	.word	0x20000030
 8000674:	80080081 	.word	0x80080081
 8000678:	66666667 	.word	0x66666667

0800067c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b094      	sub	sp, #80	@ 0x50
 8000680:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000682:	f107 031c 	add.w	r3, r7, #28
 8000686:	2234      	movs	r2, #52	@ 0x34
 8000688:	2100      	movs	r1, #0
 800068a:	4618      	mov	r0, r3
 800068c:	f004 fd3a 	bl	8005104 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000690:	f107 0308 	add.w	r3, r7, #8
 8000694:	2200      	movs	r2, #0
 8000696:	601a      	str	r2, [r3, #0]
 8000698:	605a      	str	r2, [r3, #4]
 800069a:	609a      	str	r2, [r3, #8]
 800069c:	60da      	str	r2, [r3, #12]
 800069e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006a0:	4b2b      	ldr	r3, [pc, #172]	@ (8000750 <SystemClock_Config+0xd4>)
 80006a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006a4:	4a2a      	ldr	r2, [pc, #168]	@ (8000750 <SystemClock_Config+0xd4>)
 80006a6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006aa:	6413      	str	r3, [r2, #64]	@ 0x40
 80006ac:	4b28      	ldr	r3, [pc, #160]	@ (8000750 <SystemClock_Config+0xd4>)
 80006ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006b0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006b4:	607b      	str	r3, [r7, #4]
 80006b6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006b8:	4b26      	ldr	r3, [pc, #152]	@ (8000754 <SystemClock_Config+0xd8>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	4a25      	ldr	r2, [pc, #148]	@ (8000754 <SystemClock_Config+0xd8>)
 80006be:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80006c2:	6013      	str	r3, [r2, #0]
 80006c4:	4b23      	ldr	r3, [pc, #140]	@ (8000754 <SystemClock_Config+0xd8>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80006cc:	603b      	str	r3, [r7, #0]
 80006ce:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006d0:	2302      	movs	r3, #2
 80006d2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006d4:	2301      	movs	r3, #1
 80006d6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006d8:	2310      	movs	r3, #16
 80006da:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006dc:	2302      	movs	r3, #2
 80006de:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006e0:	2300      	movs	r3, #0
 80006e2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006e4:	2308      	movs	r3, #8
 80006e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 80006e8:	23d8      	movs	r3, #216	@ 0xd8
 80006ea:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006ec:	2302      	movs	r3, #2
 80006ee:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 9;
 80006f0:	2309      	movs	r3, #9
 80006f2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006f4:	2302      	movs	r3, #2
 80006f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006f8:	f107 031c 	add.w	r3, r7, #28
 80006fc:	4618      	mov	r0, r3
 80006fe:	f002 f8bf 	bl	8002880 <HAL_RCC_OscConfig>
 8000702:	4603      	mov	r3, r0
 8000704:	2b00      	cmp	r3, #0
 8000706:	d001      	beq.n	800070c <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000708:	f000 fa86 	bl	8000c18 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800070c:	f002 f868 	bl	80027e0 <HAL_PWREx_EnableOverDrive>
 8000710:	4603      	mov	r3, r0
 8000712:	2b00      	cmp	r3, #0
 8000714:	d001      	beq.n	800071a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000716:	f000 fa7f 	bl	8000c18 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800071a:	230f      	movs	r3, #15
 800071c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800071e:	2302      	movs	r3, #2
 8000720:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000722:	2300      	movs	r3, #0
 8000724:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000726:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800072a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800072c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000730:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000732:	f107 0308 	add.w	r3, r7, #8
 8000736:	2107      	movs	r1, #7
 8000738:	4618      	mov	r0, r3
 800073a:	f002 fb4f 	bl	8002ddc <HAL_RCC_ClockConfig>
 800073e:	4603      	mov	r3, r0
 8000740:	2b00      	cmp	r3, #0
 8000742:	d001      	beq.n	8000748 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8000744:	f000 fa68 	bl	8000c18 <Error_Handler>
  }
}
 8000748:	bf00      	nop
 800074a:	3750      	adds	r7, #80	@ 0x50
 800074c:	46bd      	mov	sp, r7
 800074e:	bd80      	pop	{r7, pc}
 8000750:	40023800 	.word	0x40023800
 8000754:	40007000 	.word	0x40007000

08000758 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b084      	sub	sp, #16
 800075c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800075e:	463b      	mov	r3, r7
 8000760:	2200      	movs	r2, #0
 8000762:	601a      	str	r2, [r3, #0]
 8000764:	605a      	str	r2, [r3, #4]
 8000766:	609a      	str	r2, [r3, #8]
 8000768:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800076a:	4b21      	ldr	r3, [pc, #132]	@ (80007f0 <MX_ADC1_Init+0x98>)
 800076c:	4a21      	ldr	r2, [pc, #132]	@ (80007f4 <MX_ADC1_Init+0x9c>)
 800076e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000770:	4b1f      	ldr	r3, [pc, #124]	@ (80007f0 <MX_ADC1_Init+0x98>)
 8000772:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000776:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000778:	4b1d      	ldr	r3, [pc, #116]	@ (80007f0 <MX_ADC1_Init+0x98>)
 800077a:	2200      	movs	r2, #0
 800077c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800077e:	4b1c      	ldr	r3, [pc, #112]	@ (80007f0 <MX_ADC1_Init+0x98>)
 8000780:	2200      	movs	r2, #0
 8000782:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000784:	4b1a      	ldr	r3, [pc, #104]	@ (80007f0 <MX_ADC1_Init+0x98>)
 8000786:	2201      	movs	r2, #1
 8000788:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800078a:	4b19      	ldr	r3, [pc, #100]	@ (80007f0 <MX_ADC1_Init+0x98>)
 800078c:	2200      	movs	r2, #0
 800078e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000792:	4b17      	ldr	r3, [pc, #92]	@ (80007f0 <MX_ADC1_Init+0x98>)
 8000794:	2200      	movs	r2, #0
 8000796:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000798:	4b15      	ldr	r3, [pc, #84]	@ (80007f0 <MX_ADC1_Init+0x98>)
 800079a:	4a17      	ldr	r2, [pc, #92]	@ (80007f8 <MX_ADC1_Init+0xa0>)
 800079c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800079e:	4b14      	ldr	r3, [pc, #80]	@ (80007f0 <MX_ADC1_Init+0x98>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80007a4:	4b12      	ldr	r3, [pc, #72]	@ (80007f0 <MX_ADC1_Init+0x98>)
 80007a6:	2201      	movs	r2, #1
 80007a8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80007aa:	4b11      	ldr	r3, [pc, #68]	@ (80007f0 <MX_ADC1_Init+0x98>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80007b2:	4b0f      	ldr	r3, [pc, #60]	@ (80007f0 <MX_ADC1_Init+0x98>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80007b8:	480d      	ldr	r0, [pc, #52]	@ (80007f0 <MX_ADC1_Init+0x98>)
 80007ba:	f000 ffbf 	bl	800173c <HAL_ADC_Init>
 80007be:	4603      	mov	r3, r0
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d001      	beq.n	80007c8 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80007c4:	f000 fa28 	bl	8000c18 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80007c8:	230a      	movs	r3, #10
 80007ca:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80007cc:	2301      	movs	r3, #1
 80007ce:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80007d0:	2300      	movs	r3, #0
 80007d2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007d4:	463b      	mov	r3, r7
 80007d6:	4619      	mov	r1, r3
 80007d8:	4805      	ldr	r0, [pc, #20]	@ (80007f0 <MX_ADC1_Init+0x98>)
 80007da:	f001 f959 	bl	8001a90 <HAL_ADC_ConfigChannel>
 80007de:	4603      	mov	r3, r0
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d001      	beq.n	80007e8 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80007e4:	f000 fa18 	bl	8000c18 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007e8:	bf00      	nop
 80007ea:	3710      	adds	r7, #16
 80007ec:	46bd      	mov	sp, r7
 80007ee:	bd80      	pop	{r7, pc}
 80007f0:	20000030 	.word	0x20000030
 80007f4:	40012000 	.word	0x40012000
 80007f8:	0f000001 	.word	0x0f000001

080007fc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000800:	4b1b      	ldr	r3, [pc, #108]	@ (8000870 <MX_I2C1_Init+0x74>)
 8000802:	4a1c      	ldr	r2, [pc, #112]	@ (8000874 <MX_I2C1_Init+0x78>)
 8000804:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20404768;
 8000806:	4b1a      	ldr	r3, [pc, #104]	@ (8000870 <MX_I2C1_Init+0x74>)
 8000808:	4a1b      	ldr	r2, [pc, #108]	@ (8000878 <MX_I2C1_Init+0x7c>)
 800080a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800080c:	4b18      	ldr	r3, [pc, #96]	@ (8000870 <MX_I2C1_Init+0x74>)
 800080e:	2200      	movs	r2, #0
 8000810:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000812:	4b17      	ldr	r3, [pc, #92]	@ (8000870 <MX_I2C1_Init+0x74>)
 8000814:	2201      	movs	r2, #1
 8000816:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000818:	4b15      	ldr	r3, [pc, #84]	@ (8000870 <MX_I2C1_Init+0x74>)
 800081a:	2200      	movs	r2, #0
 800081c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800081e:	4b14      	ldr	r3, [pc, #80]	@ (8000870 <MX_I2C1_Init+0x74>)
 8000820:	2200      	movs	r2, #0
 8000822:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000824:	4b12      	ldr	r3, [pc, #72]	@ (8000870 <MX_I2C1_Init+0x74>)
 8000826:	2200      	movs	r2, #0
 8000828:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800082a:	4b11      	ldr	r3, [pc, #68]	@ (8000870 <MX_I2C1_Init+0x74>)
 800082c:	2200      	movs	r2, #0
 800082e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000830:	4b0f      	ldr	r3, [pc, #60]	@ (8000870 <MX_I2C1_Init+0x74>)
 8000832:	2200      	movs	r2, #0
 8000834:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000836:	480e      	ldr	r0, [pc, #56]	@ (8000870 <MX_I2C1_Init+0x74>)
 8000838:	f001 fe9e 	bl	8002578 <HAL_I2C_Init>
 800083c:	4603      	mov	r3, r0
 800083e:	2b00      	cmp	r3, #0
 8000840:	d001      	beq.n	8000846 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000842:	f000 f9e9 	bl	8000c18 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000846:	2100      	movs	r1, #0
 8000848:	4809      	ldr	r0, [pc, #36]	@ (8000870 <MX_I2C1_Init+0x74>)
 800084a:	f001 ff31 	bl	80026b0 <HAL_I2CEx_ConfigAnalogFilter>
 800084e:	4603      	mov	r3, r0
 8000850:	2b00      	cmp	r3, #0
 8000852:	d001      	beq.n	8000858 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000854:	f000 f9e0 	bl	8000c18 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000858:	2100      	movs	r1, #0
 800085a:	4805      	ldr	r0, [pc, #20]	@ (8000870 <MX_I2C1_Init+0x74>)
 800085c:	f001 ff73 	bl	8002746 <HAL_I2CEx_ConfigDigitalFilter>
 8000860:	4603      	mov	r3, r0
 8000862:	2b00      	cmp	r3, #0
 8000864:	d001      	beq.n	800086a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000866:	f000 f9d7 	bl	8000c18 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800086a:	bf00      	nop
 800086c:	bd80      	pop	{r7, pc}
 800086e:	bf00      	nop
 8000870:	20000078 	.word	0x20000078
 8000874:	40005400 	.word	0x40005400
 8000878:	20404768 	.word	0x20404768

0800087c <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8000880:	4b06      	ldr	r3, [pc, #24]	@ (800089c <MX_RNG_Init+0x20>)
 8000882:	4a07      	ldr	r2, [pc, #28]	@ (80008a0 <MX_RNG_Init+0x24>)
 8000884:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8000886:	4805      	ldr	r0, [pc, #20]	@ (800089c <MX_RNG_Init+0x20>)
 8000888:	f003 f882 	bl	8003990 <HAL_RNG_Init>
 800088c:	4603      	mov	r3, r0
 800088e:	2b00      	cmp	r3, #0
 8000890:	d001      	beq.n	8000896 <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 8000892:	f000 f9c1 	bl	8000c18 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8000896:	bf00      	nop
 8000898:	bd80      	pop	{r7, pc}
 800089a:	bf00      	nop
 800089c:	200000cc 	.word	0x200000cc
 80008a0:	50060800 	.word	0x50060800

080008a4 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 80008a8:	4b1b      	ldr	r3, [pc, #108]	@ (8000918 <MX_SPI5_Init+0x74>)
 80008aa:	4a1c      	ldr	r2, [pc, #112]	@ (800091c <MX_SPI5_Init+0x78>)
 80008ac:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 80008ae:	4b1a      	ldr	r3, [pc, #104]	@ (8000918 <MX_SPI5_Init+0x74>)
 80008b0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80008b4:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 80008b6:	4b18      	ldr	r3, [pc, #96]	@ (8000918 <MX_SPI5_Init+0x74>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 80008bc:	4b16      	ldr	r3, [pc, #88]	@ (8000918 <MX_SPI5_Init+0x74>)
 80008be:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80008c2:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008c4:	4b14      	ldr	r3, [pc, #80]	@ (8000918 <MX_SPI5_Init+0x74>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008ca:	4b13      	ldr	r3, [pc, #76]	@ (8000918 <MX_SPI5_Init+0x74>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 80008d0:	4b11      	ldr	r3, [pc, #68]	@ (8000918 <MX_SPI5_Init+0x74>)
 80008d2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80008d6:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80008d8:	4b0f      	ldr	r3, [pc, #60]	@ (8000918 <MX_SPI5_Init+0x74>)
 80008da:	2200      	movs	r2, #0
 80008dc:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008de:	4b0e      	ldr	r3, [pc, #56]	@ (8000918 <MX_SPI5_Init+0x74>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 80008e4:	4b0c      	ldr	r3, [pc, #48]	@ (8000918 <MX_SPI5_Init+0x74>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008ea:	4b0b      	ldr	r3, [pc, #44]	@ (8000918 <MX_SPI5_Init+0x74>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi5.Init.CRCPolynomial = 7;
 80008f0:	4b09      	ldr	r3, [pc, #36]	@ (8000918 <MX_SPI5_Init+0x74>)
 80008f2:	2207      	movs	r2, #7
 80008f4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi5.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80008f6:	4b08      	ldr	r3, [pc, #32]	@ (8000918 <MX_SPI5_Init+0x74>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi5.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80008fc:	4b06      	ldr	r3, [pc, #24]	@ (8000918 <MX_SPI5_Init+0x74>)
 80008fe:	2208      	movs	r2, #8
 8000900:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8000902:	4805      	ldr	r0, [pc, #20]	@ (8000918 <MX_SPI5_Init+0x74>)
 8000904:	f003 f86e 	bl	80039e4 <HAL_SPI_Init>
 8000908:	4603      	mov	r3, r0
 800090a:	2b00      	cmp	r3, #0
 800090c:	d001      	beq.n	8000912 <MX_SPI5_Init+0x6e>
  {
    Error_Handler();
 800090e:	f000 f983 	bl	8000c18 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8000912:	bf00      	nop
 8000914:	bd80      	pop	{r7, pc}
 8000916:	bf00      	nop
 8000918:	200000dc 	.word	0x200000dc
 800091c:	40015000 	.word	0x40015000

08000920 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b088      	sub	sp, #32
 8000924:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000926:	f107 0310 	add.w	r3, r7, #16
 800092a:	2200      	movs	r2, #0
 800092c:	601a      	str	r2, [r3, #0]
 800092e:	605a      	str	r2, [r3, #4]
 8000930:	609a      	str	r2, [r3, #8]
 8000932:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000934:	1d3b      	adds	r3, r7, #4
 8000936:	2200      	movs	r2, #0
 8000938:	601a      	str	r2, [r3, #0]
 800093a:	605a      	str	r2, [r3, #4]
 800093c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800093e:	4b20      	ldr	r3, [pc, #128]	@ (80009c0 <MX_TIM1_Init+0xa0>)
 8000940:	4a20      	ldr	r2, [pc, #128]	@ (80009c4 <MX_TIM1_Init+0xa4>)
 8000942:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 216-1;
 8000944:	4b1e      	ldr	r3, [pc, #120]	@ (80009c0 <MX_TIM1_Init+0xa0>)
 8000946:	22d7      	movs	r2, #215	@ 0xd7
 8000948:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800094a:	4b1d      	ldr	r3, [pc, #116]	@ (80009c0 <MX_TIM1_Init+0xa0>)
 800094c:	2200      	movs	r2, #0
 800094e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 8000950:	4b1b      	ldr	r3, [pc, #108]	@ (80009c0 <MX_TIM1_Init+0xa0>)
 8000952:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000956:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000958:	4b19      	ldr	r3, [pc, #100]	@ (80009c0 <MX_TIM1_Init+0xa0>)
 800095a:	2200      	movs	r2, #0
 800095c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800095e:	4b18      	ldr	r3, [pc, #96]	@ (80009c0 <MX_TIM1_Init+0xa0>)
 8000960:	2200      	movs	r2, #0
 8000962:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000964:	4b16      	ldr	r3, [pc, #88]	@ (80009c0 <MX_TIM1_Init+0xa0>)
 8000966:	2200      	movs	r2, #0
 8000968:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800096a:	4815      	ldr	r0, [pc, #84]	@ (80009c0 <MX_TIM1_Init+0xa0>)
 800096c:	f003 fbe2 	bl	8004134 <HAL_TIM_Base_Init>
 8000970:	4603      	mov	r3, r0
 8000972:	2b00      	cmp	r3, #0
 8000974:	d001      	beq.n	800097a <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8000976:	f000 f94f 	bl	8000c18 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800097a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800097e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000980:	f107 0310 	add.w	r3, r7, #16
 8000984:	4619      	mov	r1, r3
 8000986:	480e      	ldr	r0, [pc, #56]	@ (80009c0 <MX_TIM1_Init+0xa0>)
 8000988:	f003 fe9a 	bl	80046c0 <HAL_TIM_ConfigClockSource>
 800098c:	4603      	mov	r3, r0
 800098e:	2b00      	cmp	r3, #0
 8000990:	d001      	beq.n	8000996 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8000992:	f000 f941 	bl	8000c18 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000996:	2300      	movs	r3, #0
 8000998:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800099a:	2300      	movs	r3, #0
 800099c:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800099e:	2300      	movs	r3, #0
 80009a0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80009a2:	1d3b      	adds	r3, r7, #4
 80009a4:	4619      	mov	r1, r3
 80009a6:	4806      	ldr	r0, [pc, #24]	@ (80009c0 <MX_TIM1_Init+0xa0>)
 80009a8:	f004 fb1e 	bl	8004fe8 <HAL_TIMEx_MasterConfigSynchronization>
 80009ac:	4603      	mov	r3, r0
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d001      	beq.n	80009b6 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80009b2:	f000 f931 	bl	8000c18 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80009b6:	bf00      	nop
 80009b8:	3720      	adds	r7, #32
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	bf00      	nop
 80009c0:	20000140 	.word	0x20000140
 80009c4:	40010000 	.word	0x40010000

080009c8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b08e      	sub	sp, #56	@ 0x38
 80009cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009ce:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80009d2:	2200      	movs	r2, #0
 80009d4:	601a      	str	r2, [r3, #0]
 80009d6:	605a      	str	r2, [r3, #4]
 80009d8:	609a      	str	r2, [r3, #8]
 80009da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009dc:	f107 031c 	add.w	r3, r7, #28
 80009e0:	2200      	movs	r2, #0
 80009e2:	601a      	str	r2, [r3, #0]
 80009e4:	605a      	str	r2, [r3, #4]
 80009e6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80009e8:	463b      	mov	r3, r7
 80009ea:	2200      	movs	r2, #0
 80009ec:	601a      	str	r2, [r3, #0]
 80009ee:	605a      	str	r2, [r3, #4]
 80009f0:	609a      	str	r2, [r3, #8]
 80009f2:	60da      	str	r2, [r3, #12]
 80009f4:	611a      	str	r2, [r3, #16]
 80009f6:	615a      	str	r2, [r3, #20]
 80009f8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80009fa:	4b2d      	ldr	r3, [pc, #180]	@ (8000ab0 <MX_TIM2_Init+0xe8>)
 80009fc:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000a00:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 108-1;
 8000a02:	4b2b      	ldr	r3, [pc, #172]	@ (8000ab0 <MX_TIM2_Init+0xe8>)
 8000a04:	226b      	movs	r2, #107	@ 0x6b
 8000a06:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a08:	4b29      	ldr	r3, [pc, #164]	@ (8000ab0 <MX_TIM2_Init+0xe8>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8000a0e:	4b28      	ldr	r3, [pc, #160]	@ (8000ab0 <MX_TIM2_Init+0xe8>)
 8000a10:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000a14:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a16:	4b26      	ldr	r3, [pc, #152]	@ (8000ab0 <MX_TIM2_Init+0xe8>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a1c:	4b24      	ldr	r3, [pc, #144]	@ (8000ab0 <MX_TIM2_Init+0xe8>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000a22:	4823      	ldr	r0, [pc, #140]	@ (8000ab0 <MX_TIM2_Init+0xe8>)
 8000a24:	f003 fb86 	bl	8004134 <HAL_TIM_Base_Init>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d001      	beq.n	8000a32 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8000a2e:	f000 f8f3 	bl	8000c18 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a32:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a36:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000a38:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000a3c:	4619      	mov	r1, r3
 8000a3e:	481c      	ldr	r0, [pc, #112]	@ (8000ab0 <MX_TIM2_Init+0xe8>)
 8000a40:	f003 fe3e 	bl	80046c0 <HAL_TIM_ConfigClockSource>
 8000a44:	4603      	mov	r3, r0
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d001      	beq.n	8000a4e <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8000a4a:	f000 f8e5 	bl	8000c18 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000a4e:	4818      	ldr	r0, [pc, #96]	@ (8000ab0 <MX_TIM2_Init+0xe8>)
 8000a50:	f003 fbc7 	bl	80041e2 <HAL_TIM_PWM_Init>
 8000a54:	4603      	mov	r3, r0
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d001      	beq.n	8000a5e <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8000a5a:	f000 f8dd 	bl	8000c18 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a62:	2300      	movs	r3, #0
 8000a64:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000a66:	f107 031c 	add.w	r3, r7, #28
 8000a6a:	4619      	mov	r1, r3
 8000a6c:	4810      	ldr	r0, [pc, #64]	@ (8000ab0 <MX_TIM2_Init+0xe8>)
 8000a6e:	f004 fabb 	bl	8004fe8 <HAL_TIMEx_MasterConfigSynchronization>
 8000a72:	4603      	mov	r3, r0
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d001      	beq.n	8000a7c <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000a78:	f000 f8ce 	bl	8000c18 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a7c:	2360      	movs	r3, #96	@ 0x60
 8000a7e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 1000/4-1;
 8000a80:	23f9      	movs	r3, #249	@ 0xf9
 8000a82:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a84:	2300      	movs	r3, #0
 8000a86:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a8c:	463b      	mov	r3, r7
 8000a8e:	2200      	movs	r2, #0
 8000a90:	4619      	mov	r1, r3
 8000a92:	4807      	ldr	r0, [pc, #28]	@ (8000ab0 <MX_TIM2_Init+0xe8>)
 8000a94:	f003 fd00 	bl	8004498 <HAL_TIM_PWM_ConfigChannel>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d001      	beq.n	8000aa2 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8000a9e:	f000 f8bb 	bl	8000c18 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000aa2:	4803      	ldr	r0, [pc, #12]	@ (8000ab0 <MX_TIM2_Init+0xe8>)
 8000aa4:	f000 fa2a 	bl	8000efc <HAL_TIM_MspPostInit>

}
 8000aa8:	bf00      	nop
 8000aaa:	3738      	adds	r7, #56	@ 0x38
 8000aac:	46bd      	mov	sp, r7
 8000aae:	bd80      	pop	{r7, pc}
 8000ab0:	2000018c 	.word	0x2000018c

08000ab4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b08a      	sub	sp, #40	@ 0x28
 8000ab8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aba:	f107 0314 	add.w	r3, r7, #20
 8000abe:	2200      	movs	r2, #0
 8000ac0:	601a      	str	r2, [r3, #0]
 8000ac2:	605a      	str	r2, [r3, #4]
 8000ac4:	609a      	str	r2, [r3, #8]
 8000ac6:	60da      	str	r2, [r3, #12]
 8000ac8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000aca:	4b3a      	ldr	r3, [pc, #232]	@ (8000bb4 <MX_GPIO_Init+0x100>)
 8000acc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ace:	4a39      	ldr	r2, [pc, #228]	@ (8000bb4 <MX_GPIO_Init+0x100>)
 8000ad0:	f043 0310 	orr.w	r3, r3, #16
 8000ad4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ad6:	4b37      	ldr	r3, [pc, #220]	@ (8000bb4 <MX_GPIO_Init+0x100>)
 8000ad8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ada:	f003 0310 	and.w	r3, r3, #16
 8000ade:	613b      	str	r3, [r7, #16]
 8000ae0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000ae2:	4b34      	ldr	r3, [pc, #208]	@ (8000bb4 <MX_GPIO_Init+0x100>)
 8000ae4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ae6:	4a33      	ldr	r2, [pc, #204]	@ (8000bb4 <MX_GPIO_Init+0x100>)
 8000ae8:	f043 0320 	orr.w	r3, r3, #32
 8000aec:	6313      	str	r3, [r2, #48]	@ 0x30
 8000aee:	4b31      	ldr	r3, [pc, #196]	@ (8000bb4 <MX_GPIO_Init+0x100>)
 8000af0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000af2:	f003 0320 	and.w	r3, r3, #32
 8000af6:	60fb      	str	r3, [r7, #12]
 8000af8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000afa:	4b2e      	ldr	r3, [pc, #184]	@ (8000bb4 <MX_GPIO_Init+0x100>)
 8000afc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000afe:	4a2d      	ldr	r2, [pc, #180]	@ (8000bb4 <MX_GPIO_Init+0x100>)
 8000b00:	f043 0304 	orr.w	r3, r3, #4
 8000b04:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b06:	4b2b      	ldr	r3, [pc, #172]	@ (8000bb4 <MX_GPIO_Init+0x100>)
 8000b08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b0a:	f003 0304 	and.w	r3, r3, #4
 8000b0e:	60bb      	str	r3, [r7, #8]
 8000b10:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b12:	4b28      	ldr	r3, [pc, #160]	@ (8000bb4 <MX_GPIO_Init+0x100>)
 8000b14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b16:	4a27      	ldr	r2, [pc, #156]	@ (8000bb4 <MX_GPIO_Init+0x100>)
 8000b18:	f043 0301 	orr.w	r3, r3, #1
 8000b1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b1e:	4b25      	ldr	r3, [pc, #148]	@ (8000bb4 <MX_GPIO_Init+0x100>)
 8000b20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b22:	f003 0301 	and.w	r3, r3, #1
 8000b26:	607b      	str	r3, [r7, #4]
 8000b28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b2a:	4b22      	ldr	r3, [pc, #136]	@ (8000bb4 <MX_GPIO_Init+0x100>)
 8000b2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b2e:	4a21      	ldr	r2, [pc, #132]	@ (8000bb4 <MX_GPIO_Init+0x100>)
 8000b30:	f043 0302 	orr.w	r3, r3, #2
 8000b34:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b36:	4b1f      	ldr	r3, [pc, #124]	@ (8000bb4 <MX_GPIO_Init+0x100>)
 8000b38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b3a:	f003 0302 	and.w	r3, r3, #2
 8000b3e:	603b      	str	r3, [r7, #0]
 8000b40:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, T_CLK_Pin|T_MOSI_Pin|T_CS_Pin, GPIO_PIN_RESET);
 8000b42:	2200      	movs	r2, #0
 8000b44:	2168      	movs	r1, #104	@ 0x68
 8000b46:	481c      	ldr	r0, [pc, #112]	@ (8000bb8 <MX_GPIO_Init+0x104>)
 8000b48:	f001 fcfc 	bl	8002544 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, CS_Pin|DC_Pin|RST_Pin, GPIO_PIN_RESET);
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 8000b52:	481a      	ldr	r0, [pc, #104]	@ (8000bbc <MX_GPIO_Init+0x108>)
 8000b54:	f001 fcf6 	bl	8002544 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : T_IRQ_Pin T_MISO_Pin */
  GPIO_InitStruct.Pin = T_IRQ_Pin|T_MISO_Pin;
 8000b58:	2314      	movs	r3, #20
 8000b5a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b60:	2300      	movs	r3, #0
 8000b62:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000b64:	f107 0314 	add.w	r3, r7, #20
 8000b68:	4619      	mov	r1, r3
 8000b6a:	4813      	ldr	r0, [pc, #76]	@ (8000bb8 <MX_GPIO_Init+0x104>)
 8000b6c:	f001 fb3e 	bl	80021ec <HAL_GPIO_Init>

  /*Configure GPIO pins : T_CLK_Pin T_MOSI_Pin T_CS_Pin */
  GPIO_InitStruct.Pin = T_CLK_Pin|T_MOSI_Pin|T_CS_Pin;
 8000b70:	2368      	movs	r3, #104	@ 0x68
 8000b72:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b74:	2301      	movs	r3, #1
 8000b76:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000b80:	f107 0314 	add.w	r3, r7, #20
 8000b84:	4619      	mov	r1, r3
 8000b86:	480c      	ldr	r0, [pc, #48]	@ (8000bb8 <MX_GPIO_Init+0x104>)
 8000b88:	f001 fb30 	bl	80021ec <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_Pin DC_Pin RST_Pin */
  GPIO_InitStruct.Pin = CS_Pin|DC_Pin|RST_Pin;
 8000b8c:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8000b90:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b92:	2301      	movs	r3, #1
 8000b94:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b96:	2300      	movs	r3, #0
 8000b98:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b9e:	f107 0314 	add.w	r3, r7, #20
 8000ba2:	4619      	mov	r1, r3
 8000ba4:	4805      	ldr	r0, [pc, #20]	@ (8000bbc <MX_GPIO_Init+0x108>)
 8000ba6:	f001 fb21 	bl	80021ec <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000baa:	bf00      	nop
 8000bac:	3728      	adds	r7, #40	@ 0x28
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	bf00      	nop
 8000bb4:	40023800 	.word	0x40023800
 8000bb8:	40021000 	.word	0x40021000
 8000bbc:	40020800 	.word	0x40020800

08000bc0 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b084      	sub	sp, #16
 8000bc4:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000bc6:	463b      	mov	r3, r7
 8000bc8:	2200      	movs	r2, #0
 8000bca:	601a      	str	r2, [r3, #0]
 8000bcc:	605a      	str	r2, [r3, #4]
 8000bce:	609a      	str	r2, [r3, #8]
 8000bd0:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000bd2:	f001 fa93 	bl	80020fc <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000bd6:	2301      	movs	r3, #1
 8000bd8:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000bde:	2300      	movs	r3, #0
 8000be0:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000be2:	231f      	movs	r3, #31
 8000be4:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000be6:	2387      	movs	r3, #135	@ 0x87
 8000be8:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000bea:	2300      	movs	r3, #0
 8000bec:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000bf2:	2301      	movs	r3, #1
 8000bf4:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000bf6:	2301      	movs	r3, #1
 8000bf8:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000c02:	463b      	mov	r3, r7
 8000c04:	4618      	mov	r0, r3
 8000c06:	f001 fab1 	bl	800216c <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000c0a:	2004      	movs	r0, #4
 8000c0c:	f001 fa8e 	bl	800212c <HAL_MPU_Enable>

}
 8000c10:	bf00      	nop
 8000c12:	3710      	adds	r7, #16
 8000c14:	46bd      	mov	sp, r7
 8000c16:	bd80      	pop	{r7, pc}

08000c18 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c1c:	b672      	cpsid	i
}
 8000c1e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c20:	bf00      	nop
 8000c22:	e7fd      	b.n	8000c20 <Error_Handler+0x8>

08000c24 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c24:	b480      	push	{r7}
 8000c26:	b083      	sub	sp, #12
 8000c28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000c2a:	4b0f      	ldr	r3, [pc, #60]	@ (8000c68 <HAL_MspInit+0x44>)
 8000c2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c2e:	4a0e      	ldr	r2, [pc, #56]	@ (8000c68 <HAL_MspInit+0x44>)
 8000c30:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c34:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c36:	4b0c      	ldr	r3, [pc, #48]	@ (8000c68 <HAL_MspInit+0x44>)
 8000c38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c3a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c3e:	607b      	str	r3, [r7, #4]
 8000c40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c42:	4b09      	ldr	r3, [pc, #36]	@ (8000c68 <HAL_MspInit+0x44>)
 8000c44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c46:	4a08      	ldr	r2, [pc, #32]	@ (8000c68 <HAL_MspInit+0x44>)
 8000c48:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c4c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c4e:	4b06      	ldr	r3, [pc, #24]	@ (8000c68 <HAL_MspInit+0x44>)
 8000c50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c52:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000c56:	603b      	str	r3, [r7, #0]
 8000c58:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c5a:	bf00      	nop
 8000c5c:	370c      	adds	r7, #12
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop
 8000c68:	40023800 	.word	0x40023800

08000c6c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b08a      	sub	sp, #40	@ 0x28
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c74:	f107 0314 	add.w	r3, r7, #20
 8000c78:	2200      	movs	r2, #0
 8000c7a:	601a      	str	r2, [r3, #0]
 8000c7c:	605a      	str	r2, [r3, #4]
 8000c7e:	609a      	str	r2, [r3, #8]
 8000c80:	60da      	str	r2, [r3, #12]
 8000c82:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	4a15      	ldr	r2, [pc, #84]	@ (8000ce0 <HAL_ADC_MspInit+0x74>)
 8000c8a:	4293      	cmp	r3, r2
 8000c8c:	d123      	bne.n	8000cd6 <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000c8e:	4b15      	ldr	r3, [pc, #84]	@ (8000ce4 <HAL_ADC_MspInit+0x78>)
 8000c90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c92:	4a14      	ldr	r2, [pc, #80]	@ (8000ce4 <HAL_ADC_MspInit+0x78>)
 8000c94:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000c98:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c9a:	4b12      	ldr	r3, [pc, #72]	@ (8000ce4 <HAL_ADC_MspInit+0x78>)
 8000c9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c9e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000ca2:	613b      	str	r3, [r7, #16]
 8000ca4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ca6:	4b0f      	ldr	r3, [pc, #60]	@ (8000ce4 <HAL_ADC_MspInit+0x78>)
 8000ca8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000caa:	4a0e      	ldr	r2, [pc, #56]	@ (8000ce4 <HAL_ADC_MspInit+0x78>)
 8000cac:	f043 0304 	orr.w	r3, r3, #4
 8000cb0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cb2:	4b0c      	ldr	r3, [pc, #48]	@ (8000ce4 <HAL_ADC_MspInit+0x78>)
 8000cb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cb6:	f003 0304 	and.w	r3, r3, #4
 8000cba:	60fb      	str	r3, [r7, #12]
 8000cbc:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000cbe:	2301      	movs	r3, #1
 8000cc0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000cc2:	2303      	movs	r3, #3
 8000cc4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cca:	f107 0314 	add.w	r3, r7, #20
 8000cce:	4619      	mov	r1, r3
 8000cd0:	4805      	ldr	r0, [pc, #20]	@ (8000ce8 <HAL_ADC_MspInit+0x7c>)
 8000cd2:	f001 fa8b 	bl	80021ec <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000cd6:	bf00      	nop
 8000cd8:	3728      	adds	r7, #40	@ 0x28
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	40012000 	.word	0x40012000
 8000ce4:	40023800 	.word	0x40023800
 8000ce8:	40020800 	.word	0x40020800

08000cec <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b0ae      	sub	sp, #184	@ 0xb8
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cf4:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	601a      	str	r2, [r3, #0]
 8000cfc:	605a      	str	r2, [r3, #4]
 8000cfe:	609a      	str	r2, [r3, #8]
 8000d00:	60da      	str	r2, [r3, #12]
 8000d02:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d04:	f107 0314 	add.w	r3, r7, #20
 8000d08:	2290      	movs	r2, #144	@ 0x90
 8000d0a:	2100      	movs	r1, #0
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	f004 f9f9 	bl	8005104 <memset>
  if(hi2c->Instance==I2C1)
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	4a21      	ldr	r2, [pc, #132]	@ (8000d9c <HAL_I2C_MspInit+0xb0>)
 8000d18:	4293      	cmp	r3, r2
 8000d1a:	d13b      	bne.n	8000d94 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000d1c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000d20:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000d22:	2300      	movs	r3, #0
 8000d24:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d26:	f107 0314 	add.w	r3, r7, #20
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	f002 fa08 	bl	8003140 <HAL_RCCEx_PeriphCLKConfig>
 8000d30:	4603      	mov	r3, r0
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d001      	beq.n	8000d3a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000d36:	f7ff ff6f 	bl	8000c18 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d3a:	4b19      	ldr	r3, [pc, #100]	@ (8000da0 <HAL_I2C_MspInit+0xb4>)
 8000d3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d3e:	4a18      	ldr	r2, [pc, #96]	@ (8000da0 <HAL_I2C_MspInit+0xb4>)
 8000d40:	f043 0302 	orr.w	r3, r3, #2
 8000d44:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d46:	4b16      	ldr	r3, [pc, #88]	@ (8000da0 <HAL_I2C_MspInit+0xb4>)
 8000d48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d4a:	f003 0302 	and.w	r3, r3, #2
 8000d4e:	613b      	str	r3, [r7, #16]
 8000d50:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000d52:	23c0      	movs	r3, #192	@ 0xc0
 8000d54:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d58:	2312      	movs	r3, #18
 8000d5a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d64:	2303      	movs	r3, #3
 8000d66:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000d6a:	2304      	movs	r3, #4
 8000d6c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d70:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000d74:	4619      	mov	r1, r3
 8000d76:	480b      	ldr	r0, [pc, #44]	@ (8000da4 <HAL_I2C_MspInit+0xb8>)
 8000d78:	f001 fa38 	bl	80021ec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000d7c:	4b08      	ldr	r3, [pc, #32]	@ (8000da0 <HAL_I2C_MspInit+0xb4>)
 8000d7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d80:	4a07      	ldr	r2, [pc, #28]	@ (8000da0 <HAL_I2C_MspInit+0xb4>)
 8000d82:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000d86:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d88:	4b05      	ldr	r3, [pc, #20]	@ (8000da0 <HAL_I2C_MspInit+0xb4>)
 8000d8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d8c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000d90:	60fb      	str	r3, [r7, #12]
 8000d92:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000d94:	bf00      	nop
 8000d96:	37b8      	adds	r7, #184	@ 0xb8
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	bd80      	pop	{r7, pc}
 8000d9c:	40005400 	.word	0x40005400
 8000da0:	40023800 	.word	0x40023800
 8000da4:	40020400 	.word	0x40020400

08000da8 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b0a8      	sub	sp, #160	@ 0xa0
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000db0:	f107 0310 	add.w	r3, r7, #16
 8000db4:	2290      	movs	r2, #144	@ 0x90
 8000db6:	2100      	movs	r1, #0
 8000db8:	4618      	mov	r0, r3
 8000dba:	f004 f9a3 	bl	8005104 <memset>
  if(hrng->Instance==RNG)
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	4a11      	ldr	r2, [pc, #68]	@ (8000e08 <HAL_RNG_MspInit+0x60>)
 8000dc4:	4293      	cmp	r3, r2
 8000dc6:	d11b      	bne.n	8000e00 <HAL_RNG_MspInit+0x58>

  /* USER CODE END RNG_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8000dc8:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8000dcc:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000dd4:	f107 0310 	add.w	r3, r7, #16
 8000dd8:	4618      	mov	r0, r3
 8000dda:	f002 f9b1 	bl	8003140 <HAL_RCCEx_PeriphCLKConfig>
 8000dde:	4603      	mov	r3, r0
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d001      	beq.n	8000de8 <HAL_RNG_MspInit+0x40>
    {
      Error_Handler();
 8000de4:	f7ff ff18 	bl	8000c18 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8000de8:	4b08      	ldr	r3, [pc, #32]	@ (8000e0c <HAL_RNG_MspInit+0x64>)
 8000dea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000dec:	4a07      	ldr	r2, [pc, #28]	@ (8000e0c <HAL_RNG_MspInit+0x64>)
 8000dee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000df2:	6353      	str	r3, [r2, #52]	@ 0x34
 8000df4:	4b05      	ldr	r3, [pc, #20]	@ (8000e0c <HAL_RNG_MspInit+0x64>)
 8000df6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000df8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000dfc:	60fb      	str	r3, [r7, #12]
 8000dfe:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END RNG_MspInit 1 */

  }

}
 8000e00:	bf00      	nop
 8000e02:	37a0      	adds	r7, #160	@ 0xa0
 8000e04:	46bd      	mov	sp, r7
 8000e06:	bd80      	pop	{r7, pc}
 8000e08:	50060800 	.word	0x50060800
 8000e0c:	40023800 	.word	0x40023800

08000e10 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b08a      	sub	sp, #40	@ 0x28
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e18:	f107 0314 	add.w	r3, r7, #20
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	601a      	str	r2, [r3, #0]
 8000e20:	605a      	str	r2, [r3, #4]
 8000e22:	609a      	str	r2, [r3, #8]
 8000e24:	60da      	str	r2, [r3, #12]
 8000e26:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	4a17      	ldr	r2, [pc, #92]	@ (8000e8c <HAL_SPI_MspInit+0x7c>)
 8000e2e:	4293      	cmp	r3, r2
 8000e30:	d128      	bne.n	8000e84 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8000e32:	4b17      	ldr	r3, [pc, #92]	@ (8000e90 <HAL_SPI_MspInit+0x80>)
 8000e34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e36:	4a16      	ldr	r2, [pc, #88]	@ (8000e90 <HAL_SPI_MspInit+0x80>)
 8000e38:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000e3c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000e3e:	4b14      	ldr	r3, [pc, #80]	@ (8000e90 <HAL_SPI_MspInit+0x80>)
 8000e40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e42:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000e46:	613b      	str	r3, [r7, #16]
 8000e48:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000e4a:	4b11      	ldr	r3, [pc, #68]	@ (8000e90 <HAL_SPI_MspInit+0x80>)
 8000e4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e4e:	4a10      	ldr	r2, [pc, #64]	@ (8000e90 <HAL_SPI_MspInit+0x80>)
 8000e50:	f043 0320 	orr.w	r3, r3, #32
 8000e54:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e56:	4b0e      	ldr	r3, [pc, #56]	@ (8000e90 <HAL_SPI_MspInit+0x80>)
 8000e58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e5a:	f003 0320 	and.w	r3, r3, #32
 8000e5e:	60fb      	str	r3, [r7, #12]
 8000e60:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8000e62:	f44f 7360 	mov.w	r3, #896	@ 0x380
 8000e66:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e68:	2302      	movs	r3, #2
 8000e6a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e70:	2303      	movs	r3, #3
 8000e72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8000e74:	2305      	movs	r3, #5
 8000e76:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000e78:	f107 0314 	add.w	r3, r7, #20
 8000e7c:	4619      	mov	r1, r3
 8000e7e:	4805      	ldr	r0, [pc, #20]	@ (8000e94 <HAL_SPI_MspInit+0x84>)
 8000e80:	f001 f9b4 	bl	80021ec <HAL_GPIO_Init>

  /* USER CODE END SPI5_MspInit 1 */

  }

}
 8000e84:	bf00      	nop
 8000e86:	3728      	adds	r7, #40	@ 0x28
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	bd80      	pop	{r7, pc}
 8000e8c:	40015000 	.word	0x40015000
 8000e90:	40023800 	.word	0x40023800
 8000e94:	40021400 	.word	0x40021400

08000e98 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	b085      	sub	sp, #20
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	4a13      	ldr	r2, [pc, #76]	@ (8000ef4 <HAL_TIM_Base_MspInit+0x5c>)
 8000ea6:	4293      	cmp	r3, r2
 8000ea8:	d10c      	bne.n	8000ec4 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000eaa:	4b13      	ldr	r3, [pc, #76]	@ (8000ef8 <HAL_TIM_Base_MspInit+0x60>)
 8000eac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000eae:	4a12      	ldr	r2, [pc, #72]	@ (8000ef8 <HAL_TIM_Base_MspInit+0x60>)
 8000eb0:	f043 0301 	orr.w	r3, r3, #1
 8000eb4:	6453      	str	r3, [r2, #68]	@ 0x44
 8000eb6:	4b10      	ldr	r3, [pc, #64]	@ (8000ef8 <HAL_TIM_Base_MspInit+0x60>)
 8000eb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000eba:	f003 0301 	and.w	r3, r3, #1
 8000ebe:	60fb      	str	r3, [r7, #12]
 8000ec0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000ec2:	e010      	b.n	8000ee6 <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM2)
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000ecc:	d10b      	bne.n	8000ee6 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000ece:	4b0a      	ldr	r3, [pc, #40]	@ (8000ef8 <HAL_TIM_Base_MspInit+0x60>)
 8000ed0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ed2:	4a09      	ldr	r2, [pc, #36]	@ (8000ef8 <HAL_TIM_Base_MspInit+0x60>)
 8000ed4:	f043 0301 	orr.w	r3, r3, #1
 8000ed8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000eda:	4b07      	ldr	r3, [pc, #28]	@ (8000ef8 <HAL_TIM_Base_MspInit+0x60>)
 8000edc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ede:	f003 0301 	and.w	r3, r3, #1
 8000ee2:	60bb      	str	r3, [r7, #8]
 8000ee4:	68bb      	ldr	r3, [r7, #8]
}
 8000ee6:	bf00      	nop
 8000ee8:	3714      	adds	r7, #20
 8000eea:	46bd      	mov	sp, r7
 8000eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef0:	4770      	bx	lr
 8000ef2:	bf00      	nop
 8000ef4:	40010000 	.word	0x40010000
 8000ef8:	40023800 	.word	0x40023800

08000efc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b088      	sub	sp, #32
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f04:	f107 030c 	add.w	r3, r7, #12
 8000f08:	2200      	movs	r2, #0
 8000f0a:	601a      	str	r2, [r3, #0]
 8000f0c:	605a      	str	r2, [r3, #4]
 8000f0e:	609a      	str	r2, [r3, #8]
 8000f10:	60da      	str	r2, [r3, #12]
 8000f12:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000f1c:	d11b      	bne.n	8000f56 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f1e:	4b10      	ldr	r3, [pc, #64]	@ (8000f60 <HAL_TIM_MspPostInit+0x64>)
 8000f20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f22:	4a0f      	ldr	r2, [pc, #60]	@ (8000f60 <HAL_TIM_MspPostInit+0x64>)
 8000f24:	f043 0301 	orr.w	r3, r3, #1
 8000f28:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f2a:	4b0d      	ldr	r3, [pc, #52]	@ (8000f60 <HAL_TIM_MspPostInit+0x64>)
 8000f2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f2e:	f003 0301 	and.w	r3, r3, #1
 8000f32:	60bb      	str	r3, [r7, #8]
 8000f34:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0/WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000f36:	2301      	movs	r3, #1
 8000f38:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f3a:	2302      	movs	r3, #2
 8000f3c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f42:	2300      	movs	r3, #0
 8000f44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000f46:	2301      	movs	r3, #1
 8000f48:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f4a:	f107 030c 	add.w	r3, r7, #12
 8000f4e:	4619      	mov	r1, r3
 8000f50:	4804      	ldr	r0, [pc, #16]	@ (8000f64 <HAL_TIM_MspPostInit+0x68>)
 8000f52:	f001 f94b 	bl	80021ec <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000f56:	bf00      	nop
 8000f58:	3720      	adds	r7, #32
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}
 8000f5e:	bf00      	nop
 8000f60:	40023800 	.word	0x40023800
 8000f64:	40020000 	.word	0x40020000

08000f68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f6c:	bf00      	nop
 8000f6e:	e7fd      	b.n	8000f6c <NMI_Handler+0x4>

08000f70 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f70:	b480      	push	{r7}
 8000f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f74:	bf00      	nop
 8000f76:	e7fd      	b.n	8000f74 <HardFault_Handler+0x4>

08000f78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f7c:	bf00      	nop
 8000f7e:	e7fd      	b.n	8000f7c <MemManage_Handler+0x4>

08000f80 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f80:	b480      	push	{r7}
 8000f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f84:	bf00      	nop
 8000f86:	e7fd      	b.n	8000f84 <BusFault_Handler+0x4>

08000f88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f8c:	bf00      	nop
 8000f8e:	e7fd      	b.n	8000f8c <UsageFault_Handler+0x4>

08000f90 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f90:	b480      	push	{r7}
 8000f92:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f94:	bf00      	nop
 8000f96:	46bd      	mov	sp, r7
 8000f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9c:	4770      	bx	lr

08000f9e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f9e:	b480      	push	{r7}
 8000fa0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fa2:	bf00      	nop
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000faa:	4770      	bx	lr

08000fac <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fac:	b480      	push	{r7}
 8000fae:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fb0:	bf00      	nop
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb8:	4770      	bx	lr

08000fba <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fba:	b580      	push	{r7, lr}
 8000fbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fbe:	f000 fb79 	bl	80016b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fc2:	bf00      	nop
 8000fc4:	bd80      	pop	{r7, pc}
	...

08000fc8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000fcc:	4b06      	ldr	r3, [pc, #24]	@ (8000fe8 <SystemInit+0x20>)
 8000fce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000fd2:	4a05      	ldr	r2, [pc, #20]	@ (8000fe8 <SystemInit+0x20>)
 8000fd4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000fd8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fdc:	bf00      	nop
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe4:	4770      	bx	lr
 8000fe6:	bf00      	nop
 8000fe8:	e000ed00 	.word	0xe000ed00

08000fec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000fec:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001024 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000ff0:	f7ff ffea 	bl	8000fc8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ff4:	480c      	ldr	r0, [pc, #48]	@ (8001028 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000ff6:	490d      	ldr	r1, [pc, #52]	@ (800102c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000ff8:	4a0d      	ldr	r2, [pc, #52]	@ (8001030 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000ffa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ffc:	e002      	b.n	8001004 <LoopCopyDataInit>

08000ffe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ffe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001000:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001002:	3304      	adds	r3, #4

08001004 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001004:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001006:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001008:	d3f9      	bcc.n	8000ffe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800100a:	4a0a      	ldr	r2, [pc, #40]	@ (8001034 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800100c:	4c0a      	ldr	r4, [pc, #40]	@ (8001038 <LoopFillZerobss+0x22>)
  movs r3, #0
 800100e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001010:	e001      	b.n	8001016 <LoopFillZerobss>

08001012 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001012:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001014:	3204      	adds	r2, #4

08001016 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001016:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001018:	d3fb      	bcc.n	8001012 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800101a:	f004 f87b 	bl	8005114 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800101e:	f7ff faa3 	bl	8000568 <main>
  bx  lr    
 8001022:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001024:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001028:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800102c:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8001030:	08005194 	.word	0x08005194
  ldr r2, =_sbss
 8001034:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8001038:	200001dc 	.word	0x200001dc

0800103c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800103c:	e7fe      	b.n	800103c <ADC_IRQHandler>
	...

08001040 <ILI9341_SPI_Init>:
volatile uint16_t LCD_HEIGHT = ILI9341_SCREEN_HEIGHT;
volatile uint16_t LCD_WIDTH	 = ILI9341_SCREEN_WIDTH;

/* Initialize SPI */
void ILI9341_SPI_Init(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	af00      	add	r7, sp, #0
//MX_SPI5_Init();																							//SPI INIT
//MX_GPIO_Init();																							//GPIO INIT
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//CS OFF
 8001044:	2200      	movs	r2, #0
 8001046:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800104a:	4802      	ldr	r0, [pc, #8]	@ (8001054 <ILI9341_SPI_Init+0x14>)
 800104c:	f001 fa7a 	bl	8002544 <HAL_GPIO_WritePin>
}
 8001050:	bf00      	nop
 8001052:	bd80      	pop	{r7, pc}
 8001054:	40020800 	.word	0x40020800

08001058 <ILI9341_SPI_Send>:

/*Send data (char) to LCD*/
void ILI9341_SPI_Send(unsigned char SPI_Data)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b082      	sub	sp, #8
 800105c:	af00      	add	r7, sp, #0
 800105e:	4603      	mov	r3, r0
 8001060:	71fb      	strb	r3, [r7, #7]
HAL_SPI_Transmit(HSPI_INSTANCE, &SPI_Data, 1, 1);
 8001062:	1df9      	adds	r1, r7, #7
 8001064:	2301      	movs	r3, #1
 8001066:	2201      	movs	r2, #1
 8001068:	4803      	ldr	r0, [pc, #12]	@ (8001078 <ILI9341_SPI_Send+0x20>)
 800106a:	f002 fd66 	bl	8003b3a <HAL_SPI_Transmit>
}
 800106e:	bf00      	nop
 8001070:	3708      	adds	r7, #8
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	200000dc 	.word	0x200000dc

0800107c <ILI9341_Write_Command>:

/* Send command (char) to LCD */
void ILI9341_Write_Command(uint8_t Command)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b082      	sub	sp, #8
 8001080:	af00      	add	r7, sp, #0
 8001082:	4603      	mov	r3, r0
 8001084:	71fb      	strb	r3, [r7, #7]
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8001086:	2200      	movs	r2, #0
 8001088:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800108c:	480b      	ldr	r0, [pc, #44]	@ (80010bc <ILI9341_Write_Command+0x40>)
 800108e:	f001 fa59 	bl	8002544 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 8001092:	2200      	movs	r2, #0
 8001094:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001098:	4808      	ldr	r0, [pc, #32]	@ (80010bc <ILI9341_Write_Command+0x40>)
 800109a:	f001 fa53 	bl	8002544 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(Command);
 800109e:	79fb      	ldrb	r3, [r7, #7]
 80010a0:	4618      	mov	r0, r3
 80010a2:	f7ff ffd9 	bl	8001058 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);		
 80010a6:	2201      	movs	r2, #1
 80010a8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80010ac:	4803      	ldr	r0, [pc, #12]	@ (80010bc <ILI9341_Write_Command+0x40>)
 80010ae:	f001 fa49 	bl	8002544 <HAL_GPIO_WritePin>
}
 80010b2:	bf00      	nop
 80010b4:	3708      	adds	r7, #8
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	40020800 	.word	0x40020800

080010c0 <ILI9341_Write_Data>:

/* Send Data (char) to LCD */
void ILI9341_Write_Data(uint8_t Data)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b082      	sub	sp, #8
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	4603      	mov	r3, r0
 80010c8:	71fb      	strb	r3, [r7, #7]
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 80010ca:	2201      	movs	r2, #1
 80010cc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80010d0:	480b      	ldr	r0, [pc, #44]	@ (8001100 <ILI9341_Write_Data+0x40>)
 80010d2:	f001 fa37 	bl	8002544 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 80010d6:	2200      	movs	r2, #0
 80010d8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80010dc:	4808      	ldr	r0, [pc, #32]	@ (8001100 <ILI9341_Write_Data+0x40>)
 80010de:	f001 fa31 	bl	8002544 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(Data);	
 80010e2:	79fb      	ldrb	r3, [r7, #7]
 80010e4:	4618      	mov	r0, r3
 80010e6:	f7ff ffb7 	bl	8001058 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 80010ea:	2201      	movs	r2, #1
 80010ec:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80010f0:	4803      	ldr	r0, [pc, #12]	@ (8001100 <ILI9341_Write_Data+0x40>)
 80010f2:	f001 fa27 	bl	8002544 <HAL_GPIO_WritePin>
}
 80010f6:	bf00      	nop
 80010f8:	3708      	adds	r7, #8
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop
 8001100:	40020800 	.word	0x40020800

08001104 <ILI9341_Set_Address>:

/* Set Address - Location block - to draw into */
void ILI9341_Set_Address(uint16_t X1, uint16_t Y1, uint16_t X2, uint16_t Y2)
{
 8001104:	b590      	push	{r4, r7, lr}
 8001106:	b083      	sub	sp, #12
 8001108:	af00      	add	r7, sp, #0
 800110a:	4604      	mov	r4, r0
 800110c:	4608      	mov	r0, r1
 800110e:	4611      	mov	r1, r2
 8001110:	461a      	mov	r2, r3
 8001112:	4623      	mov	r3, r4
 8001114:	80fb      	strh	r3, [r7, #6]
 8001116:	4603      	mov	r3, r0
 8001118:	80bb      	strh	r3, [r7, #4]
 800111a:	460b      	mov	r3, r1
 800111c:	807b      	strh	r3, [r7, #2]
 800111e:	4613      	mov	r3, r2
 8001120:	803b      	strh	r3, [r7, #0]
ILI9341_Write_Command(0x2A);
 8001122:	202a      	movs	r0, #42	@ 0x2a
 8001124:	f7ff ffaa 	bl	800107c <ILI9341_Write_Command>
ILI9341_Write_Data(X1>>8);
 8001128:	88fb      	ldrh	r3, [r7, #6]
 800112a:	0a1b      	lsrs	r3, r3, #8
 800112c:	b29b      	uxth	r3, r3
 800112e:	b2db      	uxtb	r3, r3
 8001130:	4618      	mov	r0, r3
 8001132:	f7ff ffc5 	bl	80010c0 <ILI9341_Write_Data>
ILI9341_Write_Data(X1);
 8001136:	88fb      	ldrh	r3, [r7, #6]
 8001138:	b2db      	uxtb	r3, r3
 800113a:	4618      	mov	r0, r3
 800113c:	f7ff ffc0 	bl	80010c0 <ILI9341_Write_Data>
ILI9341_Write_Data(X2>>8);
 8001140:	887b      	ldrh	r3, [r7, #2]
 8001142:	0a1b      	lsrs	r3, r3, #8
 8001144:	b29b      	uxth	r3, r3
 8001146:	b2db      	uxtb	r3, r3
 8001148:	4618      	mov	r0, r3
 800114a:	f7ff ffb9 	bl	80010c0 <ILI9341_Write_Data>
ILI9341_Write_Data(X2);
 800114e:	887b      	ldrh	r3, [r7, #2]
 8001150:	b2db      	uxtb	r3, r3
 8001152:	4618      	mov	r0, r3
 8001154:	f7ff ffb4 	bl	80010c0 <ILI9341_Write_Data>

ILI9341_Write_Command(0x2B);
 8001158:	202b      	movs	r0, #43	@ 0x2b
 800115a:	f7ff ff8f 	bl	800107c <ILI9341_Write_Command>
ILI9341_Write_Data(Y1>>8);
 800115e:	88bb      	ldrh	r3, [r7, #4]
 8001160:	0a1b      	lsrs	r3, r3, #8
 8001162:	b29b      	uxth	r3, r3
 8001164:	b2db      	uxtb	r3, r3
 8001166:	4618      	mov	r0, r3
 8001168:	f7ff ffaa 	bl	80010c0 <ILI9341_Write_Data>
ILI9341_Write_Data(Y1);
 800116c:	88bb      	ldrh	r3, [r7, #4]
 800116e:	b2db      	uxtb	r3, r3
 8001170:	4618      	mov	r0, r3
 8001172:	f7ff ffa5 	bl	80010c0 <ILI9341_Write_Data>
ILI9341_Write_Data(Y2>>8);
 8001176:	883b      	ldrh	r3, [r7, #0]
 8001178:	0a1b      	lsrs	r3, r3, #8
 800117a:	b29b      	uxth	r3, r3
 800117c:	b2db      	uxtb	r3, r3
 800117e:	4618      	mov	r0, r3
 8001180:	f7ff ff9e 	bl	80010c0 <ILI9341_Write_Data>
ILI9341_Write_Data(Y2);
 8001184:	883b      	ldrh	r3, [r7, #0]
 8001186:	b2db      	uxtb	r3, r3
 8001188:	4618      	mov	r0, r3
 800118a:	f7ff ff99 	bl	80010c0 <ILI9341_Write_Data>

ILI9341_Write_Command(0x2C);
 800118e:	202c      	movs	r0, #44	@ 0x2c
 8001190:	f7ff ff74 	bl	800107c <ILI9341_Write_Command>
}
 8001194:	bf00      	nop
 8001196:	370c      	adds	r7, #12
 8001198:	46bd      	mov	sp, r7
 800119a:	bd90      	pop	{r4, r7, pc}

0800119c <ILI9341_Reset>:

/*HARDWARE RESET*/
void ILI9341_Reset(void)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	af00      	add	r7, sp, #0
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_RESET);
 80011a0:	2200      	movs	r2, #0
 80011a2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80011a6:	480b      	ldr	r0, [pc, #44]	@ (80011d4 <ILI9341_Reset+0x38>)
 80011a8:	f001 f9cc 	bl	8002544 <HAL_GPIO_WritePin>
HAL_Delay(200);
 80011ac:	20c8      	movs	r0, #200	@ 0xc8
 80011ae:	f000 faa1 	bl	80016f4 <HAL_Delay>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 80011b2:	2200      	movs	r2, #0
 80011b4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80011b8:	4806      	ldr	r0, [pc, #24]	@ (80011d4 <ILI9341_Reset+0x38>)
 80011ba:	f001 f9c3 	bl	8002544 <HAL_GPIO_WritePin>
HAL_Delay(200);
 80011be:	20c8      	movs	r0, #200	@ 0xc8
 80011c0:	f000 fa98 	bl	80016f4 <HAL_Delay>
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);	
 80011c4:	2201      	movs	r2, #1
 80011c6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80011ca:	4802      	ldr	r0, [pc, #8]	@ (80011d4 <ILI9341_Reset+0x38>)
 80011cc:	f001 f9ba 	bl	8002544 <HAL_GPIO_WritePin>
}
 80011d0:	bf00      	nop
 80011d2:	bd80      	pop	{r7, pc}
 80011d4:	40020800 	.word	0x40020800

080011d8 <ILI9341_Set_Rotation>:

/*Ser rotation of the screen - changes x0 and y0*/
void ILI9341_Set_Rotation(uint8_t Rotation) 
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b084      	sub	sp, #16
 80011dc:	af00      	add	r7, sp, #0
 80011de:	4603      	mov	r3, r0
 80011e0:	71fb      	strb	r3, [r7, #7]
	
uint8_t screen_rotation = Rotation;
 80011e2:	79fb      	ldrb	r3, [r7, #7]
 80011e4:	73fb      	strb	r3, [r7, #15]

ILI9341_Write_Command(0x36);
 80011e6:	2036      	movs	r0, #54	@ 0x36
 80011e8:	f7ff ff48 	bl	800107c <ILI9341_Write_Command>
HAL_Delay(1);
 80011ec:	2001      	movs	r0, #1
 80011ee:	f000 fa81 	bl	80016f4 <HAL_Delay>
	
switch(screen_rotation) 
 80011f2:	7bfb      	ldrb	r3, [r7, #15]
 80011f4:	2b03      	cmp	r3, #3
 80011f6:	d837      	bhi.n	8001268 <ILI9341_Set_Rotation+0x90>
 80011f8:	a201      	add	r2, pc, #4	@ (adr r2, 8001200 <ILI9341_Set_Rotation+0x28>)
 80011fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011fe:	bf00      	nop
 8001200:	08001211 	.word	0x08001211
 8001204:	08001227 	.word	0x08001227
 8001208:	0800123d 	.word	0x0800123d
 800120c:	08001253 	.word	0x08001253
	{
		case SCREEN_VERTICAL_1:
			ILI9341_Write_Data(0x40|0x08);
 8001210:	2048      	movs	r0, #72	@ 0x48
 8001212:	f7ff ff55 	bl	80010c0 <ILI9341_Write_Data>
			LCD_WIDTH = 240;
 8001216:	4b17      	ldr	r3, [pc, #92]	@ (8001274 <ILI9341_Set_Rotation+0x9c>)
 8001218:	22f0      	movs	r2, #240	@ 0xf0
 800121a:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 800121c:	4b16      	ldr	r3, [pc, #88]	@ (8001278 <ILI9341_Set_Rotation+0xa0>)
 800121e:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8001222:	801a      	strh	r2, [r3, #0]
			break;
 8001224:	e021      	b.n	800126a <ILI9341_Set_Rotation+0x92>
		case SCREEN_HORIZONTAL_1:
			ILI9341_Write_Data(0x20|0x08);
 8001226:	2028      	movs	r0, #40	@ 0x28
 8001228:	f7ff ff4a 	bl	80010c0 <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 800122c:	4b11      	ldr	r3, [pc, #68]	@ (8001274 <ILI9341_Set_Rotation+0x9c>)
 800122e:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8001232:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 8001234:	4b10      	ldr	r3, [pc, #64]	@ (8001278 <ILI9341_Set_Rotation+0xa0>)
 8001236:	22f0      	movs	r2, #240	@ 0xf0
 8001238:	801a      	strh	r2, [r3, #0]
			break;
 800123a:	e016      	b.n	800126a <ILI9341_Set_Rotation+0x92>
		case SCREEN_VERTICAL_2:
			ILI9341_Write_Data(0x80|0x08);
 800123c:	2088      	movs	r0, #136	@ 0x88
 800123e:	f7ff ff3f 	bl	80010c0 <ILI9341_Write_Data>
			LCD_WIDTH  = 240;
 8001242:	4b0c      	ldr	r3, [pc, #48]	@ (8001274 <ILI9341_Set_Rotation+0x9c>)
 8001244:	22f0      	movs	r2, #240	@ 0xf0
 8001246:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 8001248:	4b0b      	ldr	r3, [pc, #44]	@ (8001278 <ILI9341_Set_Rotation+0xa0>)
 800124a:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 800124e:	801a      	strh	r2, [r3, #0]
			break;
 8001250:	e00b      	b.n	800126a <ILI9341_Set_Rotation+0x92>
		case SCREEN_HORIZONTAL_2:
			ILI9341_Write_Data(0x40|0x80|0x20|0x08);
 8001252:	20e8      	movs	r0, #232	@ 0xe8
 8001254:	f7ff ff34 	bl	80010c0 <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 8001258:	4b06      	ldr	r3, [pc, #24]	@ (8001274 <ILI9341_Set_Rotation+0x9c>)
 800125a:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 800125e:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 8001260:	4b05      	ldr	r3, [pc, #20]	@ (8001278 <ILI9341_Set_Rotation+0xa0>)
 8001262:	22f0      	movs	r2, #240	@ 0xf0
 8001264:	801a      	strh	r2, [r3, #0]
			break;
 8001266:	e000      	b.n	800126a <ILI9341_Set_Rotation+0x92>
		default:
			//EXIT IF SCREEN ROTATION NOT VALID!
			break;
 8001268:	bf00      	nop
	}
}
 800126a:	bf00      	nop
 800126c:	3710      	adds	r7, #16
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop
 8001274:	2000000a 	.word	0x2000000a
 8001278:	20000008 	.word	0x20000008

0800127c <ILI9341_Enable>:

/*Enable LCD display*/
void ILI9341_Enable(void)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	af00      	add	r7, sp, #0
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);
 8001280:	2201      	movs	r2, #1
 8001282:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001286:	4802      	ldr	r0, [pc, #8]	@ (8001290 <ILI9341_Enable+0x14>)
 8001288:	f001 f95c 	bl	8002544 <HAL_GPIO_WritePin>
}
 800128c:	bf00      	nop
 800128e:	bd80      	pop	{r7, pc}
 8001290:	40020800 	.word	0x40020800

08001294 <ILI9341_Init>:

/*Initialize LCD display*/
void ILI9341_Init(void)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	af00      	add	r7, sp, #0

ILI9341_Enable();
 8001298:	f7ff fff0 	bl	800127c <ILI9341_Enable>
ILI9341_SPI_Init();
 800129c:	f7ff fed0 	bl	8001040 <ILI9341_SPI_Init>
ILI9341_Reset();
 80012a0:	f7ff ff7c 	bl	800119c <ILI9341_Reset>

//SOFTWARE RESET
ILI9341_Write_Command(0x01);
 80012a4:	2001      	movs	r0, #1
 80012a6:	f7ff fee9 	bl	800107c <ILI9341_Write_Command>
HAL_Delay(1000);
 80012aa:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80012ae:	f000 fa21 	bl	80016f4 <HAL_Delay>
	
//POWER CONTROL A
ILI9341_Write_Command(0xCB);
 80012b2:	20cb      	movs	r0, #203	@ 0xcb
 80012b4:	f7ff fee2 	bl	800107c <ILI9341_Write_Command>
ILI9341_Write_Data(0x39);
 80012b8:	2039      	movs	r0, #57	@ 0x39
 80012ba:	f7ff ff01 	bl	80010c0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x2C);
 80012be:	202c      	movs	r0, #44	@ 0x2c
 80012c0:	f7ff fefe 	bl	80010c0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 80012c4:	2000      	movs	r0, #0
 80012c6:	f7ff fefb 	bl	80010c0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x34);
 80012ca:	2034      	movs	r0, #52	@ 0x34
 80012cc:	f7ff fef8 	bl	80010c0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x02);
 80012d0:	2002      	movs	r0, #2
 80012d2:	f7ff fef5 	bl	80010c0 <ILI9341_Write_Data>

//POWER CONTROL B
ILI9341_Write_Command(0xCF);
 80012d6:	20cf      	movs	r0, #207	@ 0xcf
 80012d8:	f7ff fed0 	bl	800107c <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 80012dc:	2000      	movs	r0, #0
 80012de:	f7ff feef 	bl	80010c0 <ILI9341_Write_Data>
ILI9341_Write_Data(0xC1);
 80012e2:	20c1      	movs	r0, #193	@ 0xc1
 80012e4:	f7ff feec 	bl	80010c0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x30);
 80012e8:	2030      	movs	r0, #48	@ 0x30
 80012ea:	f7ff fee9 	bl	80010c0 <ILI9341_Write_Data>

//DRIVER TIMING CONTROL A
ILI9341_Write_Command(0xE8);
 80012ee:	20e8      	movs	r0, #232	@ 0xe8
 80012f0:	f7ff fec4 	bl	800107c <ILI9341_Write_Command>
ILI9341_Write_Data(0x85);
 80012f4:	2085      	movs	r0, #133	@ 0x85
 80012f6:	f7ff fee3 	bl	80010c0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 80012fa:	2000      	movs	r0, #0
 80012fc:	f7ff fee0 	bl	80010c0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x78);
 8001300:	2078      	movs	r0, #120	@ 0x78
 8001302:	f7ff fedd 	bl	80010c0 <ILI9341_Write_Data>

//DRIVER TIMING CONTROL B
ILI9341_Write_Command(0xEA);
 8001306:	20ea      	movs	r0, #234	@ 0xea
 8001308:	f7ff feb8 	bl	800107c <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 800130c:	2000      	movs	r0, #0
 800130e:	f7ff fed7 	bl	80010c0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8001312:	2000      	movs	r0, #0
 8001314:	f7ff fed4 	bl	80010c0 <ILI9341_Write_Data>

//POWER ON SEQUENCE CONTROL
ILI9341_Write_Command(0xED);
 8001318:	20ed      	movs	r0, #237	@ 0xed
 800131a:	f7ff feaf 	bl	800107c <ILI9341_Write_Command>
ILI9341_Write_Data(0x64);
 800131e:	2064      	movs	r0, #100	@ 0x64
 8001320:	f7ff fece 	bl	80010c0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 8001324:	2003      	movs	r0, #3
 8001326:	f7ff fecb 	bl	80010c0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x12);
 800132a:	2012      	movs	r0, #18
 800132c:	f7ff fec8 	bl	80010c0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x81);
 8001330:	2081      	movs	r0, #129	@ 0x81
 8001332:	f7ff fec5 	bl	80010c0 <ILI9341_Write_Data>

//PUMP RATIO CONTROL
ILI9341_Write_Command(0xF7);
 8001336:	20f7      	movs	r0, #247	@ 0xf7
 8001338:	f7ff fea0 	bl	800107c <ILI9341_Write_Command>
ILI9341_Write_Data(0x20);
 800133c:	2020      	movs	r0, #32
 800133e:	f7ff febf 	bl	80010c0 <ILI9341_Write_Data>

//POWER CONTROL,VRH[5:0]
ILI9341_Write_Command(0xC0);
 8001342:	20c0      	movs	r0, #192	@ 0xc0
 8001344:	f7ff fe9a 	bl	800107c <ILI9341_Write_Command>
ILI9341_Write_Data(0x23);
 8001348:	2023      	movs	r0, #35	@ 0x23
 800134a:	f7ff feb9 	bl	80010c0 <ILI9341_Write_Data>

//POWER CONTROL,SAP[2:0];BT[3:0]
ILI9341_Write_Command(0xC1);
 800134e:	20c1      	movs	r0, #193	@ 0xc1
 8001350:	f7ff fe94 	bl	800107c <ILI9341_Write_Command>
ILI9341_Write_Data(0x10);
 8001354:	2010      	movs	r0, #16
 8001356:	f7ff feb3 	bl	80010c0 <ILI9341_Write_Data>

//VCM CONTROL
ILI9341_Write_Command(0xC5);
 800135a:	20c5      	movs	r0, #197	@ 0xc5
 800135c:	f7ff fe8e 	bl	800107c <ILI9341_Write_Command>
ILI9341_Write_Data(0x3E);
 8001360:	203e      	movs	r0, #62	@ 0x3e
 8001362:	f7ff fead 	bl	80010c0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x28);
 8001366:	2028      	movs	r0, #40	@ 0x28
 8001368:	f7ff feaa 	bl	80010c0 <ILI9341_Write_Data>

//VCM CONTROL 2
ILI9341_Write_Command(0xC7);
 800136c:	20c7      	movs	r0, #199	@ 0xc7
 800136e:	f7ff fe85 	bl	800107c <ILI9341_Write_Command>
ILI9341_Write_Data(0x86);
 8001372:	2086      	movs	r0, #134	@ 0x86
 8001374:	f7ff fea4 	bl	80010c0 <ILI9341_Write_Data>

//MEMORY ACCESS CONTROL
ILI9341_Write_Command(0x36);
 8001378:	2036      	movs	r0, #54	@ 0x36
 800137a:	f7ff fe7f 	bl	800107c <ILI9341_Write_Command>
ILI9341_Write_Data(0x48);
 800137e:	2048      	movs	r0, #72	@ 0x48
 8001380:	f7ff fe9e 	bl	80010c0 <ILI9341_Write_Data>

//PIXEL FORMAT
ILI9341_Write_Command(0x3A);
 8001384:	203a      	movs	r0, #58	@ 0x3a
 8001386:	f7ff fe79 	bl	800107c <ILI9341_Write_Command>
ILI9341_Write_Data(0x55);
 800138a:	2055      	movs	r0, #85	@ 0x55
 800138c:	f7ff fe98 	bl	80010c0 <ILI9341_Write_Data>

//FRAME RATIO CONTROL, STANDARD RGB COLOR
ILI9341_Write_Command(0xB1);
 8001390:	20b1      	movs	r0, #177	@ 0xb1
 8001392:	f7ff fe73 	bl	800107c <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8001396:	2000      	movs	r0, #0
 8001398:	f7ff fe92 	bl	80010c0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x18);
 800139c:	2018      	movs	r0, #24
 800139e:	f7ff fe8f 	bl	80010c0 <ILI9341_Write_Data>

//DISPLAY FUNCTION CONTROL
ILI9341_Write_Command(0xB6);
 80013a2:	20b6      	movs	r0, #182	@ 0xb6
 80013a4:	f7ff fe6a 	bl	800107c <ILI9341_Write_Command>
ILI9341_Write_Data(0x08);
 80013a8:	2008      	movs	r0, #8
 80013aa:	f7ff fe89 	bl	80010c0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x82);
 80013ae:	2082      	movs	r0, #130	@ 0x82
 80013b0:	f7ff fe86 	bl	80010c0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x27);
 80013b4:	2027      	movs	r0, #39	@ 0x27
 80013b6:	f7ff fe83 	bl	80010c0 <ILI9341_Write_Data>

//3GAMMA FUNCTION DISABLE
ILI9341_Write_Command(0xF2);
 80013ba:	20f2      	movs	r0, #242	@ 0xf2
 80013bc:	f7ff fe5e 	bl	800107c <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 80013c0:	2000      	movs	r0, #0
 80013c2:	f7ff fe7d 	bl	80010c0 <ILI9341_Write_Data>

//GAMMA CURVE SELECTED
ILI9341_Write_Command(0x26);
 80013c6:	2026      	movs	r0, #38	@ 0x26
 80013c8:	f7ff fe58 	bl	800107c <ILI9341_Write_Command>
ILI9341_Write_Data(0x01);
 80013cc:	2001      	movs	r0, #1
 80013ce:	f7ff fe77 	bl	80010c0 <ILI9341_Write_Data>

//POSITIVE GAMMA CORRECTION
ILI9341_Write_Command(0xE0);
 80013d2:	20e0      	movs	r0, #224	@ 0xe0
 80013d4:	f7ff fe52 	bl	800107c <ILI9341_Write_Command>
ILI9341_Write_Data(0x0F);
 80013d8:	200f      	movs	r0, #15
 80013da:	f7ff fe71 	bl	80010c0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 80013de:	2031      	movs	r0, #49	@ 0x31
 80013e0:	f7ff fe6e 	bl	80010c0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x2B);
 80013e4:	202b      	movs	r0, #43	@ 0x2b
 80013e6:	f7ff fe6b 	bl	80010c0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0C);
 80013ea:	200c      	movs	r0, #12
 80013ec:	f7ff fe68 	bl	80010c0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 80013f0:	200e      	movs	r0, #14
 80013f2:	f7ff fe65 	bl	80010c0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x08);
 80013f6:	2008      	movs	r0, #8
 80013f8:	f7ff fe62 	bl	80010c0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x4E);
 80013fc:	204e      	movs	r0, #78	@ 0x4e
 80013fe:	f7ff fe5f 	bl	80010c0 <ILI9341_Write_Data>
ILI9341_Write_Data(0xF1);
 8001402:	20f1      	movs	r0, #241	@ 0xf1
 8001404:	f7ff fe5c 	bl	80010c0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x37);
 8001408:	2037      	movs	r0, #55	@ 0x37
 800140a:	f7ff fe59 	bl	80010c0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x07);
 800140e:	2007      	movs	r0, #7
 8001410:	f7ff fe56 	bl	80010c0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x10);
 8001414:	2010      	movs	r0, #16
 8001416:	f7ff fe53 	bl	80010c0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 800141a:	2003      	movs	r0, #3
 800141c:	f7ff fe50 	bl	80010c0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 8001420:	200e      	movs	r0, #14
 8001422:	f7ff fe4d 	bl	80010c0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x09);
 8001426:	2009      	movs	r0, #9
 8001428:	f7ff fe4a 	bl	80010c0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 800142c:	2000      	movs	r0, #0
 800142e:	f7ff fe47 	bl	80010c0 <ILI9341_Write_Data>

//NEGATIVE GAMMA CORRECTION
ILI9341_Write_Command(0xE1);
 8001432:	20e1      	movs	r0, #225	@ 0xe1
 8001434:	f7ff fe22 	bl	800107c <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8001438:	2000      	movs	r0, #0
 800143a:	f7ff fe41 	bl	80010c0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 800143e:	200e      	movs	r0, #14
 8001440:	f7ff fe3e 	bl	80010c0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x14);
 8001444:	2014      	movs	r0, #20
 8001446:	f7ff fe3b 	bl	80010c0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 800144a:	2003      	movs	r0, #3
 800144c:	f7ff fe38 	bl	80010c0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x11);
 8001450:	2011      	movs	r0, #17
 8001452:	f7ff fe35 	bl	80010c0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x07);
 8001456:	2007      	movs	r0, #7
 8001458:	f7ff fe32 	bl	80010c0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 800145c:	2031      	movs	r0, #49	@ 0x31
 800145e:	f7ff fe2f 	bl	80010c0 <ILI9341_Write_Data>
ILI9341_Write_Data(0xC1);
 8001462:	20c1      	movs	r0, #193	@ 0xc1
 8001464:	f7ff fe2c 	bl	80010c0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x48);
 8001468:	2048      	movs	r0, #72	@ 0x48
 800146a:	f7ff fe29 	bl	80010c0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x08);
 800146e:	2008      	movs	r0, #8
 8001470:	f7ff fe26 	bl	80010c0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0F);
 8001474:	200f      	movs	r0, #15
 8001476:	f7ff fe23 	bl	80010c0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0C);
 800147a:	200c      	movs	r0, #12
 800147c:	f7ff fe20 	bl	80010c0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 8001480:	2031      	movs	r0, #49	@ 0x31
 8001482:	f7ff fe1d 	bl	80010c0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x36);
 8001486:	2036      	movs	r0, #54	@ 0x36
 8001488:	f7ff fe1a 	bl	80010c0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0F);
 800148c:	200f      	movs	r0, #15
 800148e:	f7ff fe17 	bl	80010c0 <ILI9341_Write_Data>

//EXIT SLEEP
ILI9341_Write_Command(0x11);
 8001492:	2011      	movs	r0, #17
 8001494:	f7ff fdf2 	bl	800107c <ILI9341_Write_Command>
HAL_Delay(120);
 8001498:	2078      	movs	r0, #120	@ 0x78
 800149a:	f000 f92b 	bl	80016f4 <HAL_Delay>

//TURN ON DISPLAY
ILI9341_Write_Command(0x29);
 800149e:	2029      	movs	r0, #41	@ 0x29
 80014a0:	f7ff fdec 	bl	800107c <ILI9341_Write_Command>

//STARTING ROTATION
ILI9341_Set_Rotation(SCREEN_VERTICAL_1);
 80014a4:	2000      	movs	r0, #0
 80014a6:	f7ff fe97 	bl	80011d8 <ILI9341_Set_Rotation>
}
 80014aa:	bf00      	nop
 80014ac:	bd80      	pop	{r7, pc}
	...

080014b0 <ILI9341_Draw_Colour_Burst>:
}

//INTERNAL FUNCTION OF LIBRARY
/*Sends block colour information to LCD*/
void ILI9341_Draw_Colour_Burst(uint16_t Colour, uint32_t Size)
{
 80014b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80014b4:	b08d      	sub	sp, #52	@ 0x34
 80014b6:	af00      	add	r7, sp, #0
 80014b8:	4603      	mov	r3, r0
 80014ba:	6039      	str	r1, [r7, #0]
 80014bc:	80fb      	strh	r3, [r7, #6]
 80014be:	466b      	mov	r3, sp
 80014c0:	461e      	mov	r6, r3
//SENDS COLOUR
uint32_t Buffer_Size = 0;
 80014c2:	2300      	movs	r3, #0
 80014c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
if((Size*2) < BURST_MAX_SIZE)
 80014c6:	683b      	ldr	r3, [r7, #0]
 80014c8:	005b      	lsls	r3, r3, #1
 80014ca:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80014ce:	d202      	bcs.n	80014d6 <ILI9341_Draw_Colour_Burst+0x26>
{
	Buffer_Size = Size;
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80014d4:	e002      	b.n	80014dc <ILI9341_Draw_Colour_Burst+0x2c>
}
else
{
	Buffer_Size = BURST_MAX_SIZE;
 80014d6:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80014da:	62fb      	str	r3, [r7, #44]	@ 0x2c
}
	
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 80014dc:	2201      	movs	r2, #1
 80014de:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80014e2:	4840      	ldr	r0, [pc, #256]	@ (80015e4 <ILI9341_Draw_Colour_Burst+0x134>)
 80014e4:	f001 f82e 	bl	8002544 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 80014e8:	2200      	movs	r2, #0
 80014ea:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80014ee:	483d      	ldr	r0, [pc, #244]	@ (80015e4 <ILI9341_Draw_Colour_Burst+0x134>)
 80014f0:	f001 f828 	bl	8002544 <HAL_GPIO_WritePin>

unsigned char chifted = 	Colour>>8;;
 80014f4:	88fb      	ldrh	r3, [r7, #6]
 80014f6:	0a1b      	lsrs	r3, r3, #8
 80014f8:	b29b      	uxth	r3, r3
 80014fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
unsigned char burst_buffer[Buffer_Size];
 80014fe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8001500:	460b      	mov	r3, r1
 8001502:	3b01      	subs	r3, #1
 8001504:	61fb      	str	r3, [r7, #28]
 8001506:	2300      	movs	r3, #0
 8001508:	4688      	mov	r8, r1
 800150a:	4699      	mov	r9, r3
 800150c:	f04f 0200 	mov.w	r2, #0
 8001510:	f04f 0300 	mov.w	r3, #0
 8001514:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001518:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800151c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001520:	2300      	movs	r3, #0
 8001522:	460c      	mov	r4, r1
 8001524:	461d      	mov	r5, r3
 8001526:	f04f 0200 	mov.w	r2, #0
 800152a:	f04f 0300 	mov.w	r3, #0
 800152e:	00eb      	lsls	r3, r5, #3
 8001530:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001534:	00e2      	lsls	r2, r4, #3
 8001536:	1dcb      	adds	r3, r1, #7
 8001538:	08db      	lsrs	r3, r3, #3
 800153a:	00db      	lsls	r3, r3, #3
 800153c:	ebad 0d03 	sub.w	sp, sp, r3
 8001540:	466b      	mov	r3, sp
 8001542:	3300      	adds	r3, #0
 8001544:	61bb      	str	r3, [r7, #24]
for(uint32_t j = 0; j < Buffer_Size; j+=2)
 8001546:	2300      	movs	r3, #0
 8001548:	62bb      	str	r3, [r7, #40]	@ 0x28
 800154a:	e00e      	b.n	800156a <ILI9341_Draw_Colour_Burst+0xba>
	{
		burst_buffer[j] = 	chifted;
 800154c:	69ba      	ldr	r2, [r7, #24]
 800154e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001550:	4413      	add	r3, r2
 8001552:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8001556:	701a      	strb	r2, [r3, #0]
		burst_buffer[j+1] = Colour;
 8001558:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800155a:	3301      	adds	r3, #1
 800155c:	88fa      	ldrh	r2, [r7, #6]
 800155e:	b2d1      	uxtb	r1, r2
 8001560:	69ba      	ldr	r2, [r7, #24]
 8001562:	54d1      	strb	r1, [r2, r3]
for(uint32_t j = 0; j < Buffer_Size; j+=2)
 8001564:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001566:	3302      	adds	r3, #2
 8001568:	62bb      	str	r3, [r7, #40]	@ 0x28
 800156a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800156c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800156e:	429a      	cmp	r2, r3
 8001570:	d3ec      	bcc.n	800154c <ILI9341_Draw_Colour_Burst+0x9c>
	}

uint32_t Sending_Size = Size*2;
 8001572:	683b      	ldr	r3, [r7, #0]
 8001574:	005b      	lsls	r3, r3, #1
 8001576:	617b      	str	r3, [r7, #20]
uint32_t Sending_in_Block = Sending_Size/Buffer_Size;
 8001578:	697a      	ldr	r2, [r7, #20]
 800157a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800157c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001580:	613b      	str	r3, [r7, #16]
uint32_t Remainder_from_block = Sending_Size%Buffer_Size;
 8001582:	697b      	ldr	r3, [r7, #20]
 8001584:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001586:	fbb3 f2f2 	udiv	r2, r3, r2
 800158a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800158c:	fb01 f202 	mul.w	r2, r1, r2
 8001590:	1a9b      	subs	r3, r3, r2
 8001592:	60fb      	str	r3, [r7, #12]

if(Sending_in_Block != 0)
 8001594:	693b      	ldr	r3, [r7, #16]
 8001596:	2b00      	cmp	r3, #0
 8001598:	d010      	beq.n	80015bc <ILI9341_Draw_Colour_Burst+0x10c>
{
	for(uint32_t j = 0; j < (Sending_in_Block); j++)
 800159a:	2300      	movs	r3, #0
 800159c:	627b      	str	r3, [r7, #36]	@ 0x24
 800159e:	e009      	b.n	80015b4 <ILI9341_Draw_Colour_Burst+0x104>
		{
		HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)burst_buffer, Buffer_Size, 10);	
 80015a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80015a2:	b29a      	uxth	r2, r3
 80015a4:	230a      	movs	r3, #10
 80015a6:	69b9      	ldr	r1, [r7, #24]
 80015a8:	480f      	ldr	r0, [pc, #60]	@ (80015e8 <ILI9341_Draw_Colour_Burst+0x138>)
 80015aa:	f002 fac6 	bl	8003b3a <HAL_SPI_Transmit>
	for(uint32_t j = 0; j < (Sending_in_Block); j++)
 80015ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015b0:	3301      	adds	r3, #1
 80015b2:	627b      	str	r3, [r7, #36]	@ 0x24
 80015b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80015b6:	693b      	ldr	r3, [r7, #16]
 80015b8:	429a      	cmp	r2, r3
 80015ba:	d3f1      	bcc.n	80015a0 <ILI9341_Draw_Colour_Burst+0xf0>
		}
}

//REMAINDER!
HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)burst_buffer, Remainder_from_block, 10);	
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	b29a      	uxth	r2, r3
 80015c0:	230a      	movs	r3, #10
 80015c2:	69b9      	ldr	r1, [r7, #24]
 80015c4:	4808      	ldr	r0, [pc, #32]	@ (80015e8 <ILI9341_Draw_Colour_Burst+0x138>)
 80015c6:	f002 fab8 	bl	8003b3a <HAL_SPI_Transmit>
	
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 80015ca:	2201      	movs	r2, #1
 80015cc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80015d0:	4804      	ldr	r0, [pc, #16]	@ (80015e4 <ILI9341_Draw_Colour_Burst+0x134>)
 80015d2:	f000 ffb7 	bl	8002544 <HAL_GPIO_WritePin>
 80015d6:	46b5      	mov	sp, r6
}
 80015d8:	bf00      	nop
 80015da:	3734      	adds	r7, #52	@ 0x34
 80015dc:	46bd      	mov	sp, r7
 80015de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80015e2:	bf00      	nop
 80015e4:	40020800 	.word	0x40020800
 80015e8:	200000dc 	.word	0x200000dc

080015ec <ILI9341_Fill_Screen>:

//FILL THE ENTIRE SCREEN WITH SELECTED COLOUR (either #define-d ones or custom 16bit)
/*Sets address (entire screen) and Sends Height*Width ammount of colour information to LCD*/
void ILI9341_Fill_Screen(uint16_t Colour)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b082      	sub	sp, #8
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	4603      	mov	r3, r0
 80015f4:	80fb      	strh	r3, [r7, #6]
ILI9341_Set_Address(0,0,LCD_WIDTH,LCD_HEIGHT);	
 80015f6:	4b0e      	ldr	r3, [pc, #56]	@ (8001630 <ILI9341_Fill_Screen+0x44>)
 80015f8:	881b      	ldrh	r3, [r3, #0]
 80015fa:	b29a      	uxth	r2, r3
 80015fc:	4b0d      	ldr	r3, [pc, #52]	@ (8001634 <ILI9341_Fill_Screen+0x48>)
 80015fe:	881b      	ldrh	r3, [r3, #0]
 8001600:	b29b      	uxth	r3, r3
 8001602:	2100      	movs	r1, #0
 8001604:	2000      	movs	r0, #0
 8001606:	f7ff fd7d 	bl	8001104 <ILI9341_Set_Address>
ILI9341_Draw_Colour_Burst(Colour, LCD_WIDTH*LCD_HEIGHT);	
 800160a:	4b09      	ldr	r3, [pc, #36]	@ (8001630 <ILI9341_Fill_Screen+0x44>)
 800160c:	881b      	ldrh	r3, [r3, #0]
 800160e:	b29b      	uxth	r3, r3
 8001610:	461a      	mov	r2, r3
 8001612:	4b08      	ldr	r3, [pc, #32]	@ (8001634 <ILI9341_Fill_Screen+0x48>)
 8001614:	881b      	ldrh	r3, [r3, #0]
 8001616:	b29b      	uxth	r3, r3
 8001618:	fb02 f303 	mul.w	r3, r2, r3
 800161c:	461a      	mov	r2, r3
 800161e:	88fb      	ldrh	r3, [r7, #6]
 8001620:	4611      	mov	r1, r2
 8001622:	4618      	mov	r0, r3
 8001624:	f7ff ff44 	bl	80014b0 <ILI9341_Draw_Colour_Burst>
}
 8001628:	bf00      	nop
 800162a:	3708      	adds	r7, #8
 800162c:	46bd      	mov	sp, r7
 800162e:	bd80      	pop	{r7, pc}
 8001630:	2000000a 	.word	0x2000000a
 8001634:	20000008 	.word	0x20000008

08001638 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800163c:	2003      	movs	r0, #3
 800163e:	f000 fd29 	bl	8002094 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001642:	200f      	movs	r0, #15
 8001644:	f000 f806 	bl	8001654 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001648:	f7ff faec 	bl	8000c24 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800164c:	2300      	movs	r3, #0
}
 800164e:	4618      	mov	r0, r3
 8001650:	bd80      	pop	{r7, pc}
	...

08001654 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b082      	sub	sp, #8
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800165c:	4b12      	ldr	r3, [pc, #72]	@ (80016a8 <HAL_InitTick+0x54>)
 800165e:	681a      	ldr	r2, [r3, #0]
 8001660:	4b12      	ldr	r3, [pc, #72]	@ (80016ac <HAL_InitTick+0x58>)
 8001662:	781b      	ldrb	r3, [r3, #0]
 8001664:	4619      	mov	r1, r3
 8001666:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800166a:	fbb3 f3f1 	udiv	r3, r3, r1
 800166e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001672:	4618      	mov	r0, r3
 8001674:	f000 fd35 	bl	80020e2 <HAL_SYSTICK_Config>
 8001678:	4603      	mov	r3, r0
 800167a:	2b00      	cmp	r3, #0
 800167c:	d001      	beq.n	8001682 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800167e:	2301      	movs	r3, #1
 8001680:	e00e      	b.n	80016a0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	2b0f      	cmp	r3, #15
 8001686:	d80a      	bhi.n	800169e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001688:	2200      	movs	r2, #0
 800168a:	6879      	ldr	r1, [r7, #4]
 800168c:	f04f 30ff 	mov.w	r0, #4294967295
 8001690:	f000 fd0b 	bl	80020aa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001694:	4a06      	ldr	r2, [pc, #24]	@ (80016b0 <HAL_InitTick+0x5c>)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800169a:	2300      	movs	r3, #0
 800169c:	e000      	b.n	80016a0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800169e:	2301      	movs	r3, #1
}
 80016a0:	4618      	mov	r0, r3
 80016a2:	3708      	adds	r7, #8
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bd80      	pop	{r7, pc}
 80016a8:	20000004 	.word	0x20000004
 80016ac:	20000010 	.word	0x20000010
 80016b0:	2000000c 	.word	0x2000000c

080016b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016b4:	b480      	push	{r7}
 80016b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016b8:	4b06      	ldr	r3, [pc, #24]	@ (80016d4 <HAL_IncTick+0x20>)
 80016ba:	781b      	ldrb	r3, [r3, #0]
 80016bc:	461a      	mov	r2, r3
 80016be:	4b06      	ldr	r3, [pc, #24]	@ (80016d8 <HAL_IncTick+0x24>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	4413      	add	r3, r2
 80016c4:	4a04      	ldr	r2, [pc, #16]	@ (80016d8 <HAL_IncTick+0x24>)
 80016c6:	6013      	str	r3, [r2, #0]
}
 80016c8:	bf00      	nop
 80016ca:	46bd      	mov	sp, r7
 80016cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d0:	4770      	bx	lr
 80016d2:	bf00      	nop
 80016d4:	20000010 	.word	0x20000010
 80016d8:	200001d8 	.word	0x200001d8

080016dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016dc:	b480      	push	{r7}
 80016de:	af00      	add	r7, sp, #0
  return uwTick;
 80016e0:	4b03      	ldr	r3, [pc, #12]	@ (80016f0 <HAL_GetTick+0x14>)
 80016e2:	681b      	ldr	r3, [r3, #0]
}
 80016e4:	4618      	mov	r0, r3
 80016e6:	46bd      	mov	sp, r7
 80016e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ec:	4770      	bx	lr
 80016ee:	bf00      	nop
 80016f0:	200001d8 	.word	0x200001d8

080016f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b084      	sub	sp, #16
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80016fc:	f7ff ffee 	bl	80016dc <HAL_GetTick>
 8001700:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	f1b3 3fff 	cmp.w	r3, #4294967295
 800170c:	d005      	beq.n	800171a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800170e:	4b0a      	ldr	r3, [pc, #40]	@ (8001738 <HAL_Delay+0x44>)
 8001710:	781b      	ldrb	r3, [r3, #0]
 8001712:	461a      	mov	r2, r3
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	4413      	add	r3, r2
 8001718:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800171a:	bf00      	nop
 800171c:	f7ff ffde 	bl	80016dc <HAL_GetTick>
 8001720:	4602      	mov	r2, r0
 8001722:	68bb      	ldr	r3, [r7, #8]
 8001724:	1ad3      	subs	r3, r2, r3
 8001726:	68fa      	ldr	r2, [r7, #12]
 8001728:	429a      	cmp	r2, r3
 800172a:	d8f7      	bhi.n	800171c <HAL_Delay+0x28>
  {
  }
}
 800172c:	bf00      	nop
 800172e:	bf00      	nop
 8001730:	3710      	adds	r7, #16
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}
 8001736:	bf00      	nop
 8001738:	20000010 	.word	0x20000010

0800173c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b084      	sub	sp, #16
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001744:	2300      	movs	r3, #0
 8001746:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	2b00      	cmp	r3, #0
 800174c:	d101      	bne.n	8001752 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800174e:	2301      	movs	r3, #1
 8001750:	e031      	b.n	80017b6 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001756:	2b00      	cmp	r3, #0
 8001758:	d109      	bne.n	800176e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800175a:	6878      	ldr	r0, [r7, #4]
 800175c:	f7ff fa86 	bl	8000c6c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	2200      	movs	r2, #0
 8001764:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	2200      	movs	r2, #0
 800176a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001772:	f003 0310 	and.w	r3, r3, #16
 8001776:	2b00      	cmp	r3, #0
 8001778:	d116      	bne.n	80017a8 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800177e:	4b10      	ldr	r3, [pc, #64]	@ (80017c0 <HAL_ADC_Init+0x84>)
 8001780:	4013      	ands	r3, r2
 8001782:	f043 0202 	orr.w	r2, r3, #2
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800178a:	6878      	ldr	r0, [r7, #4]
 800178c:	f000 fad6 	bl	8001d3c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	2200      	movs	r2, #0
 8001794:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800179a:	f023 0303 	bic.w	r3, r3, #3
 800179e:	f043 0201 	orr.w	r2, r3, #1
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	641a      	str	r2, [r3, #64]	@ 0x40
 80017a6:	e001      	b.n	80017ac <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80017a8:	2301      	movs	r3, #1
 80017aa:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	2200      	movs	r2, #0
 80017b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80017b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80017b6:	4618      	mov	r0, r3
 80017b8:	3710      	adds	r7, #16
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	bf00      	nop
 80017c0:	ffffeefd 	.word	0xffffeefd

080017c4 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80017c4:	b480      	push	{r7}
 80017c6:	b085      	sub	sp, #20
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 80017cc:	2300      	movs	r3, #0
 80017ce:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80017d6:	2b01      	cmp	r3, #1
 80017d8:	d101      	bne.n	80017de <HAL_ADC_Start+0x1a>
 80017da:	2302      	movs	r3, #2
 80017dc:	e0ad      	b.n	800193a <HAL_ADC_Start+0x176>
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	2201      	movs	r2, #1
 80017e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	689b      	ldr	r3, [r3, #8]
 80017ec:	f003 0301 	and.w	r3, r3, #1
 80017f0:	2b01      	cmp	r3, #1
 80017f2:	d018      	beq.n	8001826 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	689a      	ldr	r2, [r3, #8]
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f042 0201 	orr.w	r2, r2, #1
 8001802:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8001804:	4b50      	ldr	r3, [pc, #320]	@ (8001948 <HAL_ADC_Start+0x184>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	4a50      	ldr	r2, [pc, #320]	@ (800194c <HAL_ADC_Start+0x188>)
 800180a:	fba2 2303 	umull	r2, r3, r2, r3
 800180e:	0c9a      	lsrs	r2, r3, #18
 8001810:	4613      	mov	r3, r2
 8001812:	005b      	lsls	r3, r3, #1
 8001814:	4413      	add	r3, r2
 8001816:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8001818:	e002      	b.n	8001820 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	3b01      	subs	r3, #1
 800181e:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	2b00      	cmp	r3, #0
 8001824:	d1f9      	bne.n	800181a <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	689b      	ldr	r3, [r3, #8]
 800182c:	f003 0301 	and.w	r3, r3, #1
 8001830:	2b01      	cmp	r3, #1
 8001832:	d175      	bne.n	8001920 <HAL_ADC_Start+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001838:	4b45      	ldr	r3, [pc, #276]	@ (8001950 <HAL_ADC_Start+0x18c>)
 800183a:	4013      	ands	r3, r2
 800183c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	685b      	ldr	r3, [r3, #4]
 800184a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800184e:	2b00      	cmp	r3, #0
 8001850:	d007      	beq.n	8001862 <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001856:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800185a:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001866:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800186a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800186e:	d106      	bne.n	800187e <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001874:	f023 0206 	bic.w	r2, r3, #6
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	645a      	str	r2, [r3, #68]	@ 0x44
 800187c:	e002      	b.n	8001884 <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	2200      	movs	r2, #0
 8001882:	645a      	str	r2, [r3, #68]	@ 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	2200      	movs	r2, #0
 8001888:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8001894:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8001896:	4b2f      	ldr	r3, [pc, #188]	@ (8001954 <HAL_ADC_Start+0x190>)
 8001898:	685b      	ldr	r3, [r3, #4]
 800189a:	f003 031f 	and.w	r3, r3, #31
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d10f      	bne.n	80018c2 <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	689b      	ldr	r3, [r3, #8]
 80018a8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d143      	bne.n	8001938 <HAL_ADC_Start+0x174>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	689a      	ldr	r2, [r3, #8]
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80018be:	609a      	str	r2, [r3, #8]
 80018c0:	e03a      	b.n	8001938 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	4a24      	ldr	r2, [pc, #144]	@ (8001958 <HAL_ADC_Start+0x194>)
 80018c8:	4293      	cmp	r3, r2
 80018ca:	d10e      	bne.n	80018ea <HAL_ADC_Start+0x126>
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	689b      	ldr	r3, [r3, #8]
 80018d2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d107      	bne.n	80018ea <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	689a      	ldr	r2, [r3, #8]
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80018e8:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 80018ea:	4b1a      	ldr	r3, [pc, #104]	@ (8001954 <HAL_ADC_Start+0x190>)
 80018ec:	685b      	ldr	r3, [r3, #4]
 80018ee:	f003 0310 	and.w	r3, r3, #16
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d120      	bne.n	8001938 <HAL_ADC_Start+0x174>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	4a18      	ldr	r2, [pc, #96]	@ (800195c <HAL_ADC_Start+0x198>)
 80018fc:	4293      	cmp	r3, r2
 80018fe:	d11b      	bne.n	8001938 <HAL_ADC_Start+0x174>
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	689b      	ldr	r3, [r3, #8]
 8001906:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800190a:	2b00      	cmp	r3, #0
 800190c:	d114      	bne.n	8001938 <HAL_ADC_Start+0x174>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	689a      	ldr	r2, [r3, #8]
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800191c:	609a      	str	r2, [r3, #8]
 800191e:	e00b      	b.n	8001938 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001924:	f043 0210 	orr.w	r2, r3, #16
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001930:	f043 0201 	orr.w	r2, r3, #1
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001938:	2300      	movs	r3, #0
}
 800193a:	4618      	mov	r0, r3
 800193c:	3714      	adds	r7, #20
 800193e:	46bd      	mov	sp, r7
 8001940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001944:	4770      	bx	lr
 8001946:	bf00      	nop
 8001948:	20000004 	.word	0x20000004
 800194c:	431bde83 	.word	0x431bde83
 8001950:	fffff8fe 	.word	0xfffff8fe
 8001954:	40012300 	.word	0x40012300
 8001958:	40012000 	.word	0x40012000
 800195c:	40012200 	.word	0x40012200

08001960 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b084      	sub	sp, #16
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
 8001968:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800196a:	2300      	movs	r3, #0
 800196c:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	689b      	ldr	r3, [r3, #8]
 8001974:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001978:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800197c:	d113      	bne.n	80019a6 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	689b      	ldr	r3, [r3, #8]
 8001984:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001988:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800198c:	d10b      	bne.n	80019a6 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001992:	f043 0220 	orr.w	r2, r3, #32
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	2200      	movs	r2, #0
 800199e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    return HAL_ERROR;
 80019a2:	2301      	movs	r3, #1
 80019a4:	e063      	b.n	8001a6e <HAL_ADC_PollForConversion+0x10e>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 80019a6:	f7ff fe99 	bl	80016dc <HAL_GetTick>
 80019aa:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80019ac:	e021      	b.n	80019f2 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019b4:	d01d      	beq.n	80019f2 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d007      	beq.n	80019cc <HAL_ADC_PollForConversion+0x6c>
 80019bc:	f7ff fe8e 	bl	80016dc <HAL_GetTick>
 80019c0:	4602      	mov	r2, r0
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	1ad3      	subs	r3, r2, r3
 80019c6:	683a      	ldr	r2, [r7, #0]
 80019c8:	429a      	cmp	r2, r3
 80019ca:	d212      	bcs.n	80019f2 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f003 0302 	and.w	r3, r3, #2
 80019d6:	2b02      	cmp	r3, #2
 80019d8:	d00b      	beq.n	80019f2 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019de:	f043 0204 	orr.w	r2, r3, #4
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	641a      	str	r2, [r3, #64]	@ 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	2200      	movs	r2, #0
 80019ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
          
          return HAL_TIMEOUT;
 80019ee:	2303      	movs	r3, #3
 80019f0:	e03d      	b.n	8001a6e <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f003 0302 	and.w	r3, r3, #2
 80019fc:	2b02      	cmp	r3, #2
 80019fe:	d1d6      	bne.n	80019ae <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f06f 0212 	mvn.w	r2, #18
 8001a08:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a0e:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	689b      	ldr	r3, [r3, #8]
 8001a1c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d123      	bne.n	8001a6c <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d11f      	bne.n	8001a6c <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a32:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d006      	beq.n	8001a48 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	689b      	ldr	r3, [r3, #8]
 8001a40:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d111      	bne.n	8001a6c <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a4c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	641a      	str	r2, [r3, #64]	@ 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a58:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d105      	bne.n	8001a6c <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a64:	f043 0201 	orr.w	r2, r3, #1
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001a6c:	2300      	movs	r3, #0
}
 8001a6e:	4618      	mov	r0, r3
 8001a70:	3710      	adds	r7, #16
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bd80      	pop	{r7, pc}

08001a76 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001a76:	b480      	push	{r7}
 8001a78:	b083      	sub	sp, #12
 8001a7a:	af00      	add	r7, sp, #0
 8001a7c:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8001a84:	4618      	mov	r0, r3
 8001a86:	370c      	adds	r7, #12
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8e:	4770      	bx	lr

08001a90 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001a90:	b480      	push	{r7}
 8001a92:	b085      	sub	sp, #20
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
 8001a98:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001aa4:	2b01      	cmp	r3, #1
 8001aa6:	d101      	bne.n	8001aac <HAL_ADC_ConfigChannel+0x1c>
 8001aa8:	2302      	movs	r3, #2
 8001aaa:	e136      	b.n	8001d1a <HAL_ADC_ConfigChannel+0x28a>
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	2201      	movs	r2, #1
 8001ab0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	2b09      	cmp	r3, #9
 8001aba:	d93a      	bls.n	8001b32 <HAL_ADC_ConfigChannel+0xa2>
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001ac4:	d035      	beq.n	8001b32 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	68d9      	ldr	r1, [r3, #12]
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	b29b      	uxth	r3, r3
 8001ad2:	461a      	mov	r2, r3
 8001ad4:	4613      	mov	r3, r2
 8001ad6:	005b      	lsls	r3, r3, #1
 8001ad8:	4413      	add	r3, r2
 8001ada:	3b1e      	subs	r3, #30
 8001adc:	2207      	movs	r2, #7
 8001ade:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae2:	43da      	mvns	r2, r3
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	400a      	ands	r2, r1
 8001aea:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	4a8d      	ldr	r2, [pc, #564]	@ (8001d28 <HAL_ADC_ConfigChannel+0x298>)
 8001af2:	4293      	cmp	r3, r2
 8001af4:	d10a      	bne.n	8001b0c <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	68d9      	ldr	r1, [r3, #12]
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	689b      	ldr	r3, [r3, #8]
 8001b00:	061a      	lsls	r2, r3, #24
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	430a      	orrs	r2, r1
 8001b08:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001b0a:	e035      	b.n	8001b78 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	68d9      	ldr	r1, [r3, #12]
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	689a      	ldr	r2, [r3, #8]
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	b29b      	uxth	r3, r3
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	4603      	mov	r3, r0
 8001b20:	005b      	lsls	r3, r3, #1
 8001b22:	4403      	add	r3, r0
 8001b24:	3b1e      	subs	r3, #30
 8001b26:	409a      	lsls	r2, r3
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	430a      	orrs	r2, r1
 8001b2e:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001b30:	e022      	b.n	8001b78 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	6919      	ldr	r1, [r3, #16]
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	b29b      	uxth	r3, r3
 8001b3e:	461a      	mov	r2, r3
 8001b40:	4613      	mov	r3, r2
 8001b42:	005b      	lsls	r3, r3, #1
 8001b44:	4413      	add	r3, r2
 8001b46:	2207      	movs	r2, #7
 8001b48:	fa02 f303 	lsl.w	r3, r2, r3
 8001b4c:	43da      	mvns	r2, r3
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	400a      	ands	r2, r1
 8001b54:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	6919      	ldr	r1, [r3, #16]
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	689a      	ldr	r2, [r3, #8]
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	b29b      	uxth	r3, r3
 8001b66:	4618      	mov	r0, r3
 8001b68:	4603      	mov	r3, r0
 8001b6a:	005b      	lsls	r3, r3, #1
 8001b6c:	4403      	add	r3, r0
 8001b6e:	409a      	lsls	r2, r3
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	430a      	orrs	r2, r1
 8001b76:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	685b      	ldr	r3, [r3, #4]
 8001b7c:	2b06      	cmp	r3, #6
 8001b7e:	d824      	bhi.n	8001bca <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	685a      	ldr	r2, [r3, #4]
 8001b8a:	4613      	mov	r3, r2
 8001b8c:	009b      	lsls	r3, r3, #2
 8001b8e:	4413      	add	r3, r2
 8001b90:	3b05      	subs	r3, #5
 8001b92:	221f      	movs	r2, #31
 8001b94:	fa02 f303 	lsl.w	r3, r2, r3
 8001b98:	43da      	mvns	r2, r3
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	400a      	ands	r2, r1
 8001ba0:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	b29b      	uxth	r3, r3
 8001bae:	4618      	mov	r0, r3
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	685a      	ldr	r2, [r3, #4]
 8001bb4:	4613      	mov	r3, r2
 8001bb6:	009b      	lsls	r3, r3, #2
 8001bb8:	4413      	add	r3, r2
 8001bba:	3b05      	subs	r3, #5
 8001bbc:	fa00 f203 	lsl.w	r2, r0, r3
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	430a      	orrs	r2, r1
 8001bc6:	635a      	str	r2, [r3, #52]	@ 0x34
 8001bc8:	e04c      	b.n	8001c64 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	685b      	ldr	r3, [r3, #4]
 8001bce:	2b0c      	cmp	r3, #12
 8001bd0:	d824      	bhi.n	8001c1c <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	685a      	ldr	r2, [r3, #4]
 8001bdc:	4613      	mov	r3, r2
 8001bde:	009b      	lsls	r3, r3, #2
 8001be0:	4413      	add	r3, r2
 8001be2:	3b23      	subs	r3, #35	@ 0x23
 8001be4:	221f      	movs	r2, #31
 8001be6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bea:	43da      	mvns	r2, r3
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	400a      	ands	r2, r1
 8001bf2:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	b29b      	uxth	r3, r3
 8001c00:	4618      	mov	r0, r3
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	685a      	ldr	r2, [r3, #4]
 8001c06:	4613      	mov	r3, r2
 8001c08:	009b      	lsls	r3, r3, #2
 8001c0a:	4413      	add	r3, r2
 8001c0c:	3b23      	subs	r3, #35	@ 0x23
 8001c0e:	fa00 f203 	lsl.w	r2, r0, r3
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	430a      	orrs	r2, r1
 8001c18:	631a      	str	r2, [r3, #48]	@ 0x30
 8001c1a:	e023      	b.n	8001c64 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	685a      	ldr	r2, [r3, #4]
 8001c26:	4613      	mov	r3, r2
 8001c28:	009b      	lsls	r3, r3, #2
 8001c2a:	4413      	add	r3, r2
 8001c2c:	3b41      	subs	r3, #65	@ 0x41
 8001c2e:	221f      	movs	r2, #31
 8001c30:	fa02 f303 	lsl.w	r3, r2, r3
 8001c34:	43da      	mvns	r2, r3
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	400a      	ands	r2, r1
 8001c3c:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	b29b      	uxth	r3, r3
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	685a      	ldr	r2, [r3, #4]
 8001c50:	4613      	mov	r3, r2
 8001c52:	009b      	lsls	r3, r3, #2
 8001c54:	4413      	add	r3, r2
 8001c56:	3b41      	subs	r3, #65	@ 0x41
 8001c58:	fa00 f203 	lsl.w	r2, r0, r3
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	430a      	orrs	r2, r1
 8001c62:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4a30      	ldr	r2, [pc, #192]	@ (8001d2c <HAL_ADC_ConfigChannel+0x29c>)
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d10a      	bne.n	8001c84 <HAL_ADC_ConfigChannel+0x1f4>
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001c76:	d105      	bne.n	8001c84 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8001c78:	4b2d      	ldr	r3, [pc, #180]	@ (8001d30 <HAL_ADC_ConfigChannel+0x2a0>)
 8001c7a:	685b      	ldr	r3, [r3, #4]
 8001c7c:	4a2c      	ldr	r2, [pc, #176]	@ (8001d30 <HAL_ADC_ConfigChannel+0x2a0>)
 8001c7e:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8001c82:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4a28      	ldr	r2, [pc, #160]	@ (8001d2c <HAL_ADC_ConfigChannel+0x29c>)
 8001c8a:	4293      	cmp	r3, r2
 8001c8c:	d10f      	bne.n	8001cae <HAL_ADC_ConfigChannel+0x21e>
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	2b12      	cmp	r3, #18
 8001c94:	d10b      	bne.n	8001cae <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8001c96:	4b26      	ldr	r3, [pc, #152]	@ (8001d30 <HAL_ADC_ConfigChannel+0x2a0>)
 8001c98:	685b      	ldr	r3, [r3, #4]
 8001c9a:	4a25      	ldr	r2, [pc, #148]	@ (8001d30 <HAL_ADC_ConfigChannel+0x2a0>)
 8001c9c:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8001ca0:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8001ca2:	4b23      	ldr	r3, [pc, #140]	@ (8001d30 <HAL_ADC_ConfigChannel+0x2a0>)
 8001ca4:	685b      	ldr	r3, [r3, #4]
 8001ca6:	4a22      	ldr	r2, [pc, #136]	@ (8001d30 <HAL_ADC_ConfigChannel+0x2a0>)
 8001ca8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001cac:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	4a1e      	ldr	r2, [pc, #120]	@ (8001d2c <HAL_ADC_ConfigChannel+0x29c>)
 8001cb4:	4293      	cmp	r3, r2
 8001cb6:	d12b      	bne.n	8001d10 <HAL_ADC_ConfigChannel+0x280>
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4a1a      	ldr	r2, [pc, #104]	@ (8001d28 <HAL_ADC_ConfigChannel+0x298>)
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d003      	beq.n	8001cca <HAL_ADC_ConfigChannel+0x23a>
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	2b11      	cmp	r3, #17
 8001cc8:	d122      	bne.n	8001d10 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8001cca:	4b19      	ldr	r3, [pc, #100]	@ (8001d30 <HAL_ADC_ConfigChannel+0x2a0>)
 8001ccc:	685b      	ldr	r3, [r3, #4]
 8001cce:	4a18      	ldr	r2, [pc, #96]	@ (8001d30 <HAL_ADC_ConfigChannel+0x2a0>)
 8001cd0:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8001cd4:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8001cd6:	4b16      	ldr	r3, [pc, #88]	@ (8001d30 <HAL_ADC_ConfigChannel+0x2a0>)
 8001cd8:	685b      	ldr	r3, [r3, #4]
 8001cda:	4a15      	ldr	r2, [pc, #84]	@ (8001d30 <HAL_ADC_ConfigChannel+0x2a0>)
 8001cdc:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001ce0:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	4a10      	ldr	r2, [pc, #64]	@ (8001d28 <HAL_ADC_ConfigChannel+0x298>)
 8001ce8:	4293      	cmp	r3, r2
 8001cea:	d111      	bne.n	8001d10 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8001cec:	4b11      	ldr	r3, [pc, #68]	@ (8001d34 <HAL_ADC_ConfigChannel+0x2a4>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	4a11      	ldr	r2, [pc, #68]	@ (8001d38 <HAL_ADC_ConfigChannel+0x2a8>)
 8001cf2:	fba2 2303 	umull	r2, r3, r2, r3
 8001cf6:	0c9a      	lsrs	r2, r3, #18
 8001cf8:	4613      	mov	r3, r2
 8001cfa:	009b      	lsls	r3, r3, #2
 8001cfc:	4413      	add	r3, r2
 8001cfe:	005b      	lsls	r3, r3, #1
 8001d00:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001d02:	e002      	b.n	8001d0a <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	3b01      	subs	r3, #1
 8001d08:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d1f9      	bne.n	8001d04 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	2200      	movs	r2, #0
 8001d14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001d18:	2300      	movs	r3, #0
}
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	3714      	adds	r7, #20
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d24:	4770      	bx	lr
 8001d26:	bf00      	nop
 8001d28:	10000012 	.word	0x10000012
 8001d2c:	40012000 	.word	0x40012000
 8001d30:	40012300 	.word	0x40012300
 8001d34:	20000004 	.word	0x20000004
 8001d38:	431bde83 	.word	0x431bde83

08001d3c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	b083      	sub	sp, #12
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8001d44:	4b78      	ldr	r3, [pc, #480]	@ (8001f28 <ADC_Init+0x1ec>)
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	4a77      	ldr	r2, [pc, #476]	@ (8001f28 <ADC_Init+0x1ec>)
 8001d4a:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8001d4e:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8001d50:	4b75      	ldr	r3, [pc, #468]	@ (8001f28 <ADC_Init+0x1ec>)
 8001d52:	685a      	ldr	r2, [r3, #4]
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	4973      	ldr	r1, [pc, #460]	@ (8001f28 <ADC_Init+0x1ec>)
 8001d5a:	4313      	orrs	r3, r2
 8001d5c:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	685a      	ldr	r2, [r3, #4]
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001d6c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	6859      	ldr	r1, [r3, #4]
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	691b      	ldr	r3, [r3, #16]
 8001d78:	021a      	lsls	r2, r3, #8
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	430a      	orrs	r2, r1
 8001d80:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	685a      	ldr	r2, [r3, #4]
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001d90:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	6859      	ldr	r1, [r3, #4]
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	689a      	ldr	r2, [r3, #8]
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	430a      	orrs	r2, r1
 8001da2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	689a      	ldr	r2, [r3, #8]
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001db2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	6899      	ldr	r1, [r3, #8]
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	68da      	ldr	r2, [r3, #12]
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	430a      	orrs	r2, r1
 8001dc4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001dca:	4a58      	ldr	r2, [pc, #352]	@ (8001f2c <ADC_Init+0x1f0>)
 8001dcc:	4293      	cmp	r3, r2
 8001dce:	d022      	beq.n	8001e16 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	689a      	ldr	r2, [r3, #8]
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001dde:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	6899      	ldr	r1, [r3, #8]
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	430a      	orrs	r2, r1
 8001df0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	689a      	ldr	r2, [r3, #8]
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001e00:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	6899      	ldr	r1, [r3, #8]
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	430a      	orrs	r2, r1
 8001e12:	609a      	str	r2, [r3, #8]
 8001e14:	e00f      	b.n	8001e36 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	689a      	ldr	r2, [r3, #8]
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001e24:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	689a      	ldr	r2, [r3, #8]
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001e34:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	689a      	ldr	r2, [r3, #8]
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f022 0202 	bic.w	r2, r2, #2
 8001e44:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	6899      	ldr	r1, [r3, #8]
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	699b      	ldr	r3, [r3, #24]
 8001e50:	005a      	lsls	r2, r3, #1
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	430a      	orrs	r2, r1
 8001e58:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d01b      	beq.n	8001e9c <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	685a      	ldr	r2, [r3, #4]
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001e72:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	685a      	ldr	r2, [r3, #4]
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8001e82:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	6859      	ldr	r1, [r3, #4]
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e8e:	3b01      	subs	r3, #1
 8001e90:	035a      	lsls	r2, r3, #13
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	430a      	orrs	r2, r1
 8001e98:	605a      	str	r2, [r3, #4]
 8001e9a:	e007      	b.n	8001eac <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	685a      	ldr	r2, [r3, #4]
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001eaa:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8001eba:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	69db      	ldr	r3, [r3, #28]
 8001ec6:	3b01      	subs	r3, #1
 8001ec8:	051a      	lsls	r2, r3, #20
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	430a      	orrs	r2, r1
 8001ed0:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	689a      	ldr	r2, [r3, #8]
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001ee0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	6899      	ldr	r1, [r3, #8]
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001eee:	025a      	lsls	r2, r3, #9
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	430a      	orrs	r2, r1
 8001ef6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	689a      	ldr	r2, [r3, #8]
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001f06:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	6899      	ldr	r1, [r3, #8]
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	695b      	ldr	r3, [r3, #20]
 8001f12:	029a      	lsls	r2, r3, #10
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	430a      	orrs	r2, r1
 8001f1a:	609a      	str	r2, [r3, #8]
}
 8001f1c:	bf00      	nop
 8001f1e:	370c      	adds	r7, #12
 8001f20:	46bd      	mov	sp, r7
 8001f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f26:	4770      	bx	lr
 8001f28:	40012300 	.word	0x40012300
 8001f2c:	0f000001 	.word	0x0f000001

08001f30 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f30:	b480      	push	{r7}
 8001f32:	b085      	sub	sp, #20
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	f003 0307 	and.w	r3, r3, #7
 8001f3e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f40:	4b0b      	ldr	r3, [pc, #44]	@ (8001f70 <__NVIC_SetPriorityGrouping+0x40>)
 8001f42:	68db      	ldr	r3, [r3, #12]
 8001f44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f46:	68ba      	ldr	r2, [r7, #8]
 8001f48:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001f4c:	4013      	ands	r3, r2
 8001f4e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f54:	68bb      	ldr	r3, [r7, #8]
 8001f56:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001f58:	4b06      	ldr	r3, [pc, #24]	@ (8001f74 <__NVIC_SetPriorityGrouping+0x44>)
 8001f5a:	4313      	orrs	r3, r2
 8001f5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f5e:	4a04      	ldr	r2, [pc, #16]	@ (8001f70 <__NVIC_SetPriorityGrouping+0x40>)
 8001f60:	68bb      	ldr	r3, [r7, #8]
 8001f62:	60d3      	str	r3, [r2, #12]
}
 8001f64:	bf00      	nop
 8001f66:	3714      	adds	r7, #20
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6e:	4770      	bx	lr
 8001f70:	e000ed00 	.word	0xe000ed00
 8001f74:	05fa0000 	.word	0x05fa0000

08001f78 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f7c:	4b04      	ldr	r3, [pc, #16]	@ (8001f90 <__NVIC_GetPriorityGrouping+0x18>)
 8001f7e:	68db      	ldr	r3, [r3, #12]
 8001f80:	0a1b      	lsrs	r3, r3, #8
 8001f82:	f003 0307 	and.w	r3, r3, #7
}
 8001f86:	4618      	mov	r0, r3
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8e:	4770      	bx	lr
 8001f90:	e000ed00 	.word	0xe000ed00

08001f94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f94:	b480      	push	{r7}
 8001f96:	b083      	sub	sp, #12
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	6039      	str	r1, [r7, #0]
 8001f9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fa0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	db0a      	blt.n	8001fbe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	b2da      	uxtb	r2, r3
 8001fac:	490c      	ldr	r1, [pc, #48]	@ (8001fe0 <__NVIC_SetPriority+0x4c>)
 8001fae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fb2:	0112      	lsls	r2, r2, #4
 8001fb4:	b2d2      	uxtb	r2, r2
 8001fb6:	440b      	add	r3, r1
 8001fb8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001fbc:	e00a      	b.n	8001fd4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	b2da      	uxtb	r2, r3
 8001fc2:	4908      	ldr	r1, [pc, #32]	@ (8001fe4 <__NVIC_SetPriority+0x50>)
 8001fc4:	79fb      	ldrb	r3, [r7, #7]
 8001fc6:	f003 030f 	and.w	r3, r3, #15
 8001fca:	3b04      	subs	r3, #4
 8001fcc:	0112      	lsls	r2, r2, #4
 8001fce:	b2d2      	uxtb	r2, r2
 8001fd0:	440b      	add	r3, r1
 8001fd2:	761a      	strb	r2, [r3, #24]
}
 8001fd4:	bf00      	nop
 8001fd6:	370c      	adds	r7, #12
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fde:	4770      	bx	lr
 8001fe0:	e000e100 	.word	0xe000e100
 8001fe4:	e000ed00 	.word	0xe000ed00

08001fe8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	b089      	sub	sp, #36	@ 0x24
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	60f8      	str	r0, [r7, #12]
 8001ff0:	60b9      	str	r1, [r7, #8]
 8001ff2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	f003 0307 	and.w	r3, r3, #7
 8001ffa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ffc:	69fb      	ldr	r3, [r7, #28]
 8001ffe:	f1c3 0307 	rsb	r3, r3, #7
 8002002:	2b04      	cmp	r3, #4
 8002004:	bf28      	it	cs
 8002006:	2304      	movcs	r3, #4
 8002008:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800200a:	69fb      	ldr	r3, [r7, #28]
 800200c:	3304      	adds	r3, #4
 800200e:	2b06      	cmp	r3, #6
 8002010:	d902      	bls.n	8002018 <NVIC_EncodePriority+0x30>
 8002012:	69fb      	ldr	r3, [r7, #28]
 8002014:	3b03      	subs	r3, #3
 8002016:	e000      	b.n	800201a <NVIC_EncodePriority+0x32>
 8002018:	2300      	movs	r3, #0
 800201a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800201c:	f04f 32ff 	mov.w	r2, #4294967295
 8002020:	69bb      	ldr	r3, [r7, #24]
 8002022:	fa02 f303 	lsl.w	r3, r2, r3
 8002026:	43da      	mvns	r2, r3
 8002028:	68bb      	ldr	r3, [r7, #8]
 800202a:	401a      	ands	r2, r3
 800202c:	697b      	ldr	r3, [r7, #20]
 800202e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002030:	f04f 31ff 	mov.w	r1, #4294967295
 8002034:	697b      	ldr	r3, [r7, #20]
 8002036:	fa01 f303 	lsl.w	r3, r1, r3
 800203a:	43d9      	mvns	r1, r3
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002040:	4313      	orrs	r3, r2
         );
}
 8002042:	4618      	mov	r0, r3
 8002044:	3724      	adds	r7, #36	@ 0x24
 8002046:	46bd      	mov	sp, r7
 8002048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204c:	4770      	bx	lr
	...

08002050 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b082      	sub	sp, #8
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	3b01      	subs	r3, #1
 800205c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002060:	d301      	bcc.n	8002066 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002062:	2301      	movs	r3, #1
 8002064:	e00f      	b.n	8002086 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002066:	4a0a      	ldr	r2, [pc, #40]	@ (8002090 <SysTick_Config+0x40>)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	3b01      	subs	r3, #1
 800206c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800206e:	210f      	movs	r1, #15
 8002070:	f04f 30ff 	mov.w	r0, #4294967295
 8002074:	f7ff ff8e 	bl	8001f94 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002078:	4b05      	ldr	r3, [pc, #20]	@ (8002090 <SysTick_Config+0x40>)
 800207a:	2200      	movs	r2, #0
 800207c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800207e:	4b04      	ldr	r3, [pc, #16]	@ (8002090 <SysTick_Config+0x40>)
 8002080:	2207      	movs	r2, #7
 8002082:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002084:	2300      	movs	r3, #0
}
 8002086:	4618      	mov	r0, r3
 8002088:	3708      	adds	r7, #8
 800208a:	46bd      	mov	sp, r7
 800208c:	bd80      	pop	{r7, pc}
 800208e:	bf00      	nop
 8002090:	e000e010 	.word	0xe000e010

08002094 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b082      	sub	sp, #8
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800209c:	6878      	ldr	r0, [r7, #4]
 800209e:	f7ff ff47 	bl	8001f30 <__NVIC_SetPriorityGrouping>
}
 80020a2:	bf00      	nop
 80020a4:	3708      	adds	r7, #8
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bd80      	pop	{r7, pc}

080020aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80020aa:	b580      	push	{r7, lr}
 80020ac:	b086      	sub	sp, #24
 80020ae:	af00      	add	r7, sp, #0
 80020b0:	4603      	mov	r3, r0
 80020b2:	60b9      	str	r1, [r7, #8]
 80020b4:	607a      	str	r2, [r7, #4]
 80020b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80020b8:	2300      	movs	r3, #0
 80020ba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80020bc:	f7ff ff5c 	bl	8001f78 <__NVIC_GetPriorityGrouping>
 80020c0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020c2:	687a      	ldr	r2, [r7, #4]
 80020c4:	68b9      	ldr	r1, [r7, #8]
 80020c6:	6978      	ldr	r0, [r7, #20]
 80020c8:	f7ff ff8e 	bl	8001fe8 <NVIC_EncodePriority>
 80020cc:	4602      	mov	r2, r0
 80020ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020d2:	4611      	mov	r1, r2
 80020d4:	4618      	mov	r0, r3
 80020d6:	f7ff ff5d 	bl	8001f94 <__NVIC_SetPriority>
}
 80020da:	bf00      	nop
 80020dc:	3718      	adds	r7, #24
 80020de:	46bd      	mov	sp, r7
 80020e0:	bd80      	pop	{r7, pc}

080020e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80020e2:	b580      	push	{r7, lr}
 80020e4:	b082      	sub	sp, #8
 80020e6:	af00      	add	r7, sp, #0
 80020e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80020ea:	6878      	ldr	r0, [r7, #4]
 80020ec:	f7ff ffb0 	bl	8002050 <SysTick_Config>
 80020f0:	4603      	mov	r3, r0
}
 80020f2:	4618      	mov	r0, r3
 80020f4:	3708      	adds	r7, #8
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bd80      	pop	{r7, pc}
	...

080020fc <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80020fc:	b480      	push	{r7}
 80020fe:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8002100:	f3bf 8f5f 	dmb	sy
}
 8002104:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8002106:	4b07      	ldr	r3, [pc, #28]	@ (8002124 <HAL_MPU_Disable+0x28>)
 8002108:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800210a:	4a06      	ldr	r2, [pc, #24]	@ (8002124 <HAL_MPU_Disable+0x28>)
 800210c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002110:	6253      	str	r3, [r2, #36]	@ 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8002112:	4b05      	ldr	r3, [pc, #20]	@ (8002128 <HAL_MPU_Disable+0x2c>)
 8002114:	2200      	movs	r2, #0
 8002116:	605a      	str	r2, [r3, #4]
}
 8002118:	bf00      	nop
 800211a:	46bd      	mov	sp, r7
 800211c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002120:	4770      	bx	lr
 8002122:	bf00      	nop
 8002124:	e000ed00 	.word	0xe000ed00
 8002128:	e000ed90 	.word	0xe000ed90

0800212c <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 800212c:	b480      	push	{r7}
 800212e:	b083      	sub	sp, #12
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8002134:	4a0b      	ldr	r2, [pc, #44]	@ (8002164 <HAL_MPU_Enable+0x38>)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	f043 0301 	orr.w	r3, r3, #1
 800213c:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800213e:	4b0a      	ldr	r3, [pc, #40]	@ (8002168 <HAL_MPU_Enable+0x3c>)
 8002140:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002142:	4a09      	ldr	r2, [pc, #36]	@ (8002168 <HAL_MPU_Enable+0x3c>)
 8002144:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002148:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800214a:	f3bf 8f4f 	dsb	sy
}
 800214e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002150:	f3bf 8f6f 	isb	sy
}
 8002154:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8002156:	bf00      	nop
 8002158:	370c      	adds	r7, #12
 800215a:	46bd      	mov	sp, r7
 800215c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002160:	4770      	bx	lr
 8002162:	bf00      	nop
 8002164:	e000ed90 	.word	0xe000ed90
 8002168:	e000ed00 	.word	0xe000ed00

0800216c <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 800216c:	b480      	push	{r7}
 800216e:	b083      	sub	sp, #12
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	785a      	ldrb	r2, [r3, #1]
 8002178:	4b1b      	ldr	r3, [pc, #108]	@ (80021e8 <HAL_MPU_ConfigRegion+0x7c>)
 800217a:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 800217c:	4b1a      	ldr	r3, [pc, #104]	@ (80021e8 <HAL_MPU_ConfigRegion+0x7c>)
 800217e:	691b      	ldr	r3, [r3, #16]
 8002180:	4a19      	ldr	r2, [pc, #100]	@ (80021e8 <HAL_MPU_ConfigRegion+0x7c>)
 8002182:	f023 0301 	bic.w	r3, r3, #1
 8002186:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8002188:	4a17      	ldr	r2, [pc, #92]	@ (80021e8 <HAL_MPU_ConfigRegion+0x7c>)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	685b      	ldr	r3, [r3, #4]
 800218e:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	7b1b      	ldrb	r3, [r3, #12]
 8002194:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	7adb      	ldrb	r3, [r3, #11]
 800219a:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800219c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	7a9b      	ldrb	r3, [r3, #10]
 80021a2:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80021a4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	7b5b      	ldrb	r3, [r3, #13]
 80021aa:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80021ac:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	7b9b      	ldrb	r3, [r3, #14]
 80021b2:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80021b4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	7bdb      	ldrb	r3, [r3, #15]
 80021ba:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80021bc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	7a5b      	ldrb	r3, [r3, #9]
 80021c2:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80021c4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	7a1b      	ldrb	r3, [r3, #8]
 80021ca:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80021cc:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80021ce:	687a      	ldr	r2, [r7, #4]
 80021d0:	7812      	ldrb	r2, [r2, #0]
 80021d2:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80021d4:	4a04      	ldr	r2, [pc, #16]	@ (80021e8 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80021d6:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80021d8:	6113      	str	r3, [r2, #16]
}
 80021da:	bf00      	nop
 80021dc:	370c      	adds	r7, #12
 80021de:	46bd      	mov	sp, r7
 80021e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e4:	4770      	bx	lr
 80021e6:	bf00      	nop
 80021e8:	e000ed90 	.word	0xe000ed90

080021ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021ec:	b480      	push	{r7}
 80021ee:	b089      	sub	sp, #36	@ 0x24
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
 80021f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80021f6:	2300      	movs	r3, #0
 80021f8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80021fa:	2300      	movs	r3, #0
 80021fc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80021fe:	2300      	movs	r3, #0
 8002200:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002202:	2300      	movs	r3, #0
 8002204:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8002206:	2300      	movs	r3, #0
 8002208:	61fb      	str	r3, [r7, #28]
 800220a:	e175      	b.n	80024f8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800220c:	2201      	movs	r2, #1
 800220e:	69fb      	ldr	r3, [r7, #28]
 8002210:	fa02 f303 	lsl.w	r3, r2, r3
 8002214:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	697a      	ldr	r2, [r7, #20]
 800221c:	4013      	ands	r3, r2
 800221e:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8002220:	693a      	ldr	r2, [r7, #16]
 8002222:	697b      	ldr	r3, [r7, #20]
 8002224:	429a      	cmp	r2, r3
 8002226:	f040 8164 	bne.w	80024f2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	685b      	ldr	r3, [r3, #4]
 800222e:	f003 0303 	and.w	r3, r3, #3
 8002232:	2b01      	cmp	r3, #1
 8002234:	d005      	beq.n	8002242 <HAL_GPIO_Init+0x56>
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	685b      	ldr	r3, [r3, #4]
 800223a:	f003 0303 	and.w	r3, r3, #3
 800223e:	2b02      	cmp	r3, #2
 8002240:	d130      	bne.n	80022a4 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	689b      	ldr	r3, [r3, #8]
 8002246:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002248:	69fb      	ldr	r3, [r7, #28]
 800224a:	005b      	lsls	r3, r3, #1
 800224c:	2203      	movs	r2, #3
 800224e:	fa02 f303 	lsl.w	r3, r2, r3
 8002252:	43db      	mvns	r3, r3
 8002254:	69ba      	ldr	r2, [r7, #24]
 8002256:	4013      	ands	r3, r2
 8002258:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	68da      	ldr	r2, [r3, #12]
 800225e:	69fb      	ldr	r3, [r7, #28]
 8002260:	005b      	lsls	r3, r3, #1
 8002262:	fa02 f303 	lsl.w	r3, r2, r3
 8002266:	69ba      	ldr	r2, [r7, #24]
 8002268:	4313      	orrs	r3, r2
 800226a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	69ba      	ldr	r2, [r7, #24]
 8002270:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	685b      	ldr	r3, [r3, #4]
 8002276:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002278:	2201      	movs	r2, #1
 800227a:	69fb      	ldr	r3, [r7, #28]
 800227c:	fa02 f303 	lsl.w	r3, r2, r3
 8002280:	43db      	mvns	r3, r3
 8002282:	69ba      	ldr	r2, [r7, #24]
 8002284:	4013      	ands	r3, r2
 8002286:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	091b      	lsrs	r3, r3, #4
 800228e:	f003 0201 	and.w	r2, r3, #1
 8002292:	69fb      	ldr	r3, [r7, #28]
 8002294:	fa02 f303 	lsl.w	r3, r2, r3
 8002298:	69ba      	ldr	r2, [r7, #24]
 800229a:	4313      	orrs	r3, r2
 800229c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	69ba      	ldr	r2, [r7, #24]
 80022a2:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	f003 0303 	and.w	r3, r3, #3
 80022ac:	2b03      	cmp	r3, #3
 80022ae:	d017      	beq.n	80022e0 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	68db      	ldr	r3, [r3, #12]
 80022b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80022b6:	69fb      	ldr	r3, [r7, #28]
 80022b8:	005b      	lsls	r3, r3, #1
 80022ba:	2203      	movs	r2, #3
 80022bc:	fa02 f303 	lsl.w	r3, r2, r3
 80022c0:	43db      	mvns	r3, r3
 80022c2:	69ba      	ldr	r2, [r7, #24]
 80022c4:	4013      	ands	r3, r2
 80022c6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	689a      	ldr	r2, [r3, #8]
 80022cc:	69fb      	ldr	r3, [r7, #28]
 80022ce:	005b      	lsls	r3, r3, #1
 80022d0:	fa02 f303 	lsl.w	r3, r2, r3
 80022d4:	69ba      	ldr	r2, [r7, #24]
 80022d6:	4313      	orrs	r3, r2
 80022d8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	69ba      	ldr	r2, [r7, #24]
 80022de:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	f003 0303 	and.w	r3, r3, #3
 80022e8:	2b02      	cmp	r3, #2
 80022ea:	d123      	bne.n	8002334 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80022ec:	69fb      	ldr	r3, [r7, #28]
 80022ee:	08da      	lsrs	r2, r3, #3
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	3208      	adds	r2, #8
 80022f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80022fa:	69fb      	ldr	r3, [r7, #28]
 80022fc:	f003 0307 	and.w	r3, r3, #7
 8002300:	009b      	lsls	r3, r3, #2
 8002302:	220f      	movs	r2, #15
 8002304:	fa02 f303 	lsl.w	r3, r2, r3
 8002308:	43db      	mvns	r3, r3
 800230a:	69ba      	ldr	r2, [r7, #24]
 800230c:	4013      	ands	r3, r2
 800230e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	691a      	ldr	r2, [r3, #16]
 8002314:	69fb      	ldr	r3, [r7, #28]
 8002316:	f003 0307 	and.w	r3, r3, #7
 800231a:	009b      	lsls	r3, r3, #2
 800231c:	fa02 f303 	lsl.w	r3, r2, r3
 8002320:	69ba      	ldr	r2, [r7, #24]
 8002322:	4313      	orrs	r3, r2
 8002324:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002326:	69fb      	ldr	r3, [r7, #28]
 8002328:	08da      	lsrs	r2, r3, #3
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	3208      	adds	r2, #8
 800232e:	69b9      	ldr	r1, [r7, #24]
 8002330:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800233a:	69fb      	ldr	r3, [r7, #28]
 800233c:	005b      	lsls	r3, r3, #1
 800233e:	2203      	movs	r2, #3
 8002340:	fa02 f303 	lsl.w	r3, r2, r3
 8002344:	43db      	mvns	r3, r3
 8002346:	69ba      	ldr	r2, [r7, #24]
 8002348:	4013      	ands	r3, r2
 800234a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	f003 0203 	and.w	r2, r3, #3
 8002354:	69fb      	ldr	r3, [r7, #28]
 8002356:	005b      	lsls	r3, r3, #1
 8002358:	fa02 f303 	lsl.w	r3, r2, r3
 800235c:	69ba      	ldr	r2, [r7, #24]
 800235e:	4313      	orrs	r3, r2
 8002360:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	69ba      	ldr	r2, [r7, #24]
 8002366:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	685b      	ldr	r3, [r3, #4]
 800236c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002370:	2b00      	cmp	r3, #0
 8002372:	f000 80be 	beq.w	80024f2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002376:	4b66      	ldr	r3, [pc, #408]	@ (8002510 <HAL_GPIO_Init+0x324>)
 8002378:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800237a:	4a65      	ldr	r2, [pc, #404]	@ (8002510 <HAL_GPIO_Init+0x324>)
 800237c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002380:	6453      	str	r3, [r2, #68]	@ 0x44
 8002382:	4b63      	ldr	r3, [pc, #396]	@ (8002510 <HAL_GPIO_Init+0x324>)
 8002384:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002386:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800238a:	60fb      	str	r3, [r7, #12]
 800238c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800238e:	4a61      	ldr	r2, [pc, #388]	@ (8002514 <HAL_GPIO_Init+0x328>)
 8002390:	69fb      	ldr	r3, [r7, #28]
 8002392:	089b      	lsrs	r3, r3, #2
 8002394:	3302      	adds	r3, #2
 8002396:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800239a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800239c:	69fb      	ldr	r3, [r7, #28]
 800239e:	f003 0303 	and.w	r3, r3, #3
 80023a2:	009b      	lsls	r3, r3, #2
 80023a4:	220f      	movs	r2, #15
 80023a6:	fa02 f303 	lsl.w	r3, r2, r3
 80023aa:	43db      	mvns	r3, r3
 80023ac:	69ba      	ldr	r2, [r7, #24]
 80023ae:	4013      	ands	r3, r2
 80023b0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	4a58      	ldr	r2, [pc, #352]	@ (8002518 <HAL_GPIO_Init+0x32c>)
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d037      	beq.n	800242a <HAL_GPIO_Init+0x23e>
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	4a57      	ldr	r2, [pc, #348]	@ (800251c <HAL_GPIO_Init+0x330>)
 80023be:	4293      	cmp	r3, r2
 80023c0:	d031      	beq.n	8002426 <HAL_GPIO_Init+0x23a>
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	4a56      	ldr	r2, [pc, #344]	@ (8002520 <HAL_GPIO_Init+0x334>)
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d02b      	beq.n	8002422 <HAL_GPIO_Init+0x236>
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	4a55      	ldr	r2, [pc, #340]	@ (8002524 <HAL_GPIO_Init+0x338>)
 80023ce:	4293      	cmp	r3, r2
 80023d0:	d025      	beq.n	800241e <HAL_GPIO_Init+0x232>
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	4a54      	ldr	r2, [pc, #336]	@ (8002528 <HAL_GPIO_Init+0x33c>)
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d01f      	beq.n	800241a <HAL_GPIO_Init+0x22e>
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	4a53      	ldr	r2, [pc, #332]	@ (800252c <HAL_GPIO_Init+0x340>)
 80023de:	4293      	cmp	r3, r2
 80023e0:	d019      	beq.n	8002416 <HAL_GPIO_Init+0x22a>
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	4a52      	ldr	r2, [pc, #328]	@ (8002530 <HAL_GPIO_Init+0x344>)
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d013      	beq.n	8002412 <HAL_GPIO_Init+0x226>
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	4a51      	ldr	r2, [pc, #324]	@ (8002534 <HAL_GPIO_Init+0x348>)
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d00d      	beq.n	800240e <HAL_GPIO_Init+0x222>
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	4a50      	ldr	r2, [pc, #320]	@ (8002538 <HAL_GPIO_Init+0x34c>)
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d007      	beq.n	800240a <HAL_GPIO_Init+0x21e>
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	4a4f      	ldr	r2, [pc, #316]	@ (800253c <HAL_GPIO_Init+0x350>)
 80023fe:	4293      	cmp	r3, r2
 8002400:	d101      	bne.n	8002406 <HAL_GPIO_Init+0x21a>
 8002402:	2309      	movs	r3, #9
 8002404:	e012      	b.n	800242c <HAL_GPIO_Init+0x240>
 8002406:	230a      	movs	r3, #10
 8002408:	e010      	b.n	800242c <HAL_GPIO_Init+0x240>
 800240a:	2308      	movs	r3, #8
 800240c:	e00e      	b.n	800242c <HAL_GPIO_Init+0x240>
 800240e:	2307      	movs	r3, #7
 8002410:	e00c      	b.n	800242c <HAL_GPIO_Init+0x240>
 8002412:	2306      	movs	r3, #6
 8002414:	e00a      	b.n	800242c <HAL_GPIO_Init+0x240>
 8002416:	2305      	movs	r3, #5
 8002418:	e008      	b.n	800242c <HAL_GPIO_Init+0x240>
 800241a:	2304      	movs	r3, #4
 800241c:	e006      	b.n	800242c <HAL_GPIO_Init+0x240>
 800241e:	2303      	movs	r3, #3
 8002420:	e004      	b.n	800242c <HAL_GPIO_Init+0x240>
 8002422:	2302      	movs	r3, #2
 8002424:	e002      	b.n	800242c <HAL_GPIO_Init+0x240>
 8002426:	2301      	movs	r3, #1
 8002428:	e000      	b.n	800242c <HAL_GPIO_Init+0x240>
 800242a:	2300      	movs	r3, #0
 800242c:	69fa      	ldr	r2, [r7, #28]
 800242e:	f002 0203 	and.w	r2, r2, #3
 8002432:	0092      	lsls	r2, r2, #2
 8002434:	4093      	lsls	r3, r2
 8002436:	69ba      	ldr	r2, [r7, #24]
 8002438:	4313      	orrs	r3, r2
 800243a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800243c:	4935      	ldr	r1, [pc, #212]	@ (8002514 <HAL_GPIO_Init+0x328>)
 800243e:	69fb      	ldr	r3, [r7, #28]
 8002440:	089b      	lsrs	r3, r3, #2
 8002442:	3302      	adds	r3, #2
 8002444:	69ba      	ldr	r2, [r7, #24]
 8002446:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800244a:	4b3d      	ldr	r3, [pc, #244]	@ (8002540 <HAL_GPIO_Init+0x354>)
 800244c:	689b      	ldr	r3, [r3, #8]
 800244e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002450:	693b      	ldr	r3, [r7, #16]
 8002452:	43db      	mvns	r3, r3
 8002454:	69ba      	ldr	r2, [r7, #24]
 8002456:	4013      	ands	r3, r2
 8002458:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	685b      	ldr	r3, [r3, #4]
 800245e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002462:	2b00      	cmp	r3, #0
 8002464:	d003      	beq.n	800246e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002466:	69ba      	ldr	r2, [r7, #24]
 8002468:	693b      	ldr	r3, [r7, #16]
 800246a:	4313      	orrs	r3, r2
 800246c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800246e:	4a34      	ldr	r2, [pc, #208]	@ (8002540 <HAL_GPIO_Init+0x354>)
 8002470:	69bb      	ldr	r3, [r7, #24]
 8002472:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002474:	4b32      	ldr	r3, [pc, #200]	@ (8002540 <HAL_GPIO_Init+0x354>)
 8002476:	68db      	ldr	r3, [r3, #12]
 8002478:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800247a:	693b      	ldr	r3, [r7, #16]
 800247c:	43db      	mvns	r3, r3
 800247e:	69ba      	ldr	r2, [r7, #24]
 8002480:	4013      	ands	r3, r2
 8002482:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800248c:	2b00      	cmp	r3, #0
 800248e:	d003      	beq.n	8002498 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002490:	69ba      	ldr	r2, [r7, #24]
 8002492:	693b      	ldr	r3, [r7, #16]
 8002494:	4313      	orrs	r3, r2
 8002496:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002498:	4a29      	ldr	r2, [pc, #164]	@ (8002540 <HAL_GPIO_Init+0x354>)
 800249a:	69bb      	ldr	r3, [r7, #24]
 800249c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800249e:	4b28      	ldr	r3, [pc, #160]	@ (8002540 <HAL_GPIO_Init+0x354>)
 80024a0:	685b      	ldr	r3, [r3, #4]
 80024a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024a4:	693b      	ldr	r3, [r7, #16]
 80024a6:	43db      	mvns	r3, r3
 80024a8:	69ba      	ldr	r2, [r7, #24]
 80024aa:	4013      	ands	r3, r2
 80024ac:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	685b      	ldr	r3, [r3, #4]
 80024b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d003      	beq.n	80024c2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80024ba:	69ba      	ldr	r2, [r7, #24]
 80024bc:	693b      	ldr	r3, [r7, #16]
 80024be:	4313      	orrs	r3, r2
 80024c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80024c2:	4a1f      	ldr	r2, [pc, #124]	@ (8002540 <HAL_GPIO_Init+0x354>)
 80024c4:	69bb      	ldr	r3, [r7, #24]
 80024c6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80024c8:	4b1d      	ldr	r3, [pc, #116]	@ (8002540 <HAL_GPIO_Init+0x354>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024ce:	693b      	ldr	r3, [r7, #16]
 80024d0:	43db      	mvns	r3, r3
 80024d2:	69ba      	ldr	r2, [r7, #24]
 80024d4:	4013      	ands	r3, r2
 80024d6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	685b      	ldr	r3, [r3, #4]
 80024dc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d003      	beq.n	80024ec <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80024e4:	69ba      	ldr	r2, [r7, #24]
 80024e6:	693b      	ldr	r3, [r7, #16]
 80024e8:	4313      	orrs	r3, r2
 80024ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80024ec:	4a14      	ldr	r2, [pc, #80]	@ (8002540 <HAL_GPIO_Init+0x354>)
 80024ee:	69bb      	ldr	r3, [r7, #24]
 80024f0:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 80024f2:	69fb      	ldr	r3, [r7, #28]
 80024f4:	3301      	adds	r3, #1
 80024f6:	61fb      	str	r3, [r7, #28]
 80024f8:	69fb      	ldr	r3, [r7, #28]
 80024fa:	2b0f      	cmp	r3, #15
 80024fc:	f67f ae86 	bls.w	800220c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002500:	bf00      	nop
 8002502:	bf00      	nop
 8002504:	3724      	adds	r7, #36	@ 0x24
 8002506:	46bd      	mov	sp, r7
 8002508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250c:	4770      	bx	lr
 800250e:	bf00      	nop
 8002510:	40023800 	.word	0x40023800
 8002514:	40013800 	.word	0x40013800
 8002518:	40020000 	.word	0x40020000
 800251c:	40020400 	.word	0x40020400
 8002520:	40020800 	.word	0x40020800
 8002524:	40020c00 	.word	0x40020c00
 8002528:	40021000 	.word	0x40021000
 800252c:	40021400 	.word	0x40021400
 8002530:	40021800 	.word	0x40021800
 8002534:	40021c00 	.word	0x40021c00
 8002538:	40022000 	.word	0x40022000
 800253c:	40022400 	.word	0x40022400
 8002540:	40013c00 	.word	0x40013c00

08002544 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002544:	b480      	push	{r7}
 8002546:	b083      	sub	sp, #12
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
 800254c:	460b      	mov	r3, r1
 800254e:	807b      	strh	r3, [r7, #2]
 8002550:	4613      	mov	r3, r2
 8002552:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002554:	787b      	ldrb	r3, [r7, #1]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d003      	beq.n	8002562 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800255a:	887a      	ldrh	r2, [r7, #2]
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002560:	e003      	b.n	800256a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002562:	887b      	ldrh	r3, [r7, #2]
 8002564:	041a      	lsls	r2, r3, #16
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	619a      	str	r2, [r3, #24]
}
 800256a:	bf00      	nop
 800256c:	370c      	adds	r7, #12
 800256e:	46bd      	mov	sp, r7
 8002570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002574:	4770      	bx	lr
	...

08002578 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b082      	sub	sp, #8
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2b00      	cmp	r3, #0
 8002584:	d101      	bne.n	800258a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002586:	2301      	movs	r3, #1
 8002588:	e08b      	b.n	80026a2 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002590:	b2db      	uxtb	r3, r3
 8002592:	2b00      	cmp	r3, #0
 8002594:	d106      	bne.n	80025a4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	2200      	movs	r2, #0
 800259a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800259e:	6878      	ldr	r0, [r7, #4]
 80025a0:	f7fe fba4 	bl	8000cec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2224      	movs	r2, #36	@ 0x24
 80025a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	681a      	ldr	r2, [r3, #0]
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f022 0201 	bic.w	r2, r2, #1
 80025ba:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	685a      	ldr	r2, [r3, #4]
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80025c8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	689a      	ldr	r2, [r3, #8]
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80025d8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	68db      	ldr	r3, [r3, #12]
 80025de:	2b01      	cmp	r3, #1
 80025e0:	d107      	bne.n	80025f2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	689a      	ldr	r2, [r3, #8]
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80025ee:	609a      	str	r2, [r3, #8]
 80025f0:	e006      	b.n	8002600 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	689a      	ldr	r2, [r3, #8]
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80025fe:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	68db      	ldr	r3, [r3, #12]
 8002604:	2b02      	cmp	r3, #2
 8002606:	d108      	bne.n	800261a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	685a      	ldr	r2, [r3, #4]
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002616:	605a      	str	r2, [r3, #4]
 8002618:	e007      	b.n	800262a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	685a      	ldr	r2, [r3, #4]
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002628:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	6859      	ldr	r1, [r3, #4]
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681a      	ldr	r2, [r3, #0]
 8002634:	4b1d      	ldr	r3, [pc, #116]	@ (80026ac <HAL_I2C_Init+0x134>)
 8002636:	430b      	orrs	r3, r1
 8002638:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	68da      	ldr	r2, [r3, #12]
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002648:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	691a      	ldr	r2, [r3, #16]
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	695b      	ldr	r3, [r3, #20]
 8002652:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	699b      	ldr	r3, [r3, #24]
 800265a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	430a      	orrs	r2, r1
 8002662:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	69d9      	ldr	r1, [r3, #28]
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6a1a      	ldr	r2, [r3, #32]
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	430a      	orrs	r2, r1
 8002672:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	681a      	ldr	r2, [r3, #0]
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f042 0201 	orr.w	r2, r2, #1
 8002682:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2200      	movs	r2, #0
 8002688:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	2220      	movs	r2, #32
 800268e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	2200      	movs	r2, #0
 8002696:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2200      	movs	r2, #0
 800269c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80026a0:	2300      	movs	r3, #0
}
 80026a2:	4618      	mov	r0, r3
 80026a4:	3708      	adds	r7, #8
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bd80      	pop	{r7, pc}
 80026aa:	bf00      	nop
 80026ac:	02008000 	.word	0x02008000

080026b0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80026b0:	b480      	push	{r7}
 80026b2:	b083      	sub	sp, #12
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
 80026b8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80026c0:	b2db      	uxtb	r3, r3
 80026c2:	2b20      	cmp	r3, #32
 80026c4:	d138      	bne.n	8002738 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80026cc:	2b01      	cmp	r3, #1
 80026ce:	d101      	bne.n	80026d4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80026d0:	2302      	movs	r3, #2
 80026d2:	e032      	b.n	800273a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2201      	movs	r2, #1
 80026d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2224      	movs	r2, #36	@ 0x24
 80026e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	681a      	ldr	r2, [r3, #0]
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f022 0201 	bic.w	r2, r2, #1
 80026f2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	681a      	ldr	r2, [r3, #0]
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002702:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	6819      	ldr	r1, [r3, #0]
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	683a      	ldr	r2, [r7, #0]
 8002710:	430a      	orrs	r2, r1
 8002712:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	681a      	ldr	r2, [r3, #0]
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f042 0201 	orr.w	r2, r2, #1
 8002722:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2220      	movs	r2, #32
 8002728:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2200      	movs	r2, #0
 8002730:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002734:	2300      	movs	r3, #0
 8002736:	e000      	b.n	800273a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002738:	2302      	movs	r3, #2
  }
}
 800273a:	4618      	mov	r0, r3
 800273c:	370c      	adds	r7, #12
 800273e:	46bd      	mov	sp, r7
 8002740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002744:	4770      	bx	lr

08002746 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002746:	b480      	push	{r7}
 8002748:	b085      	sub	sp, #20
 800274a:	af00      	add	r7, sp, #0
 800274c:	6078      	str	r0, [r7, #4]
 800274e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002756:	b2db      	uxtb	r3, r3
 8002758:	2b20      	cmp	r3, #32
 800275a:	d139      	bne.n	80027d0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002762:	2b01      	cmp	r3, #1
 8002764:	d101      	bne.n	800276a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002766:	2302      	movs	r3, #2
 8002768:	e033      	b.n	80027d2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	2201      	movs	r2, #1
 800276e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	2224      	movs	r2, #36	@ 0x24
 8002776:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	681a      	ldr	r2, [r3, #0]
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f022 0201 	bic.w	r2, r2, #1
 8002788:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002798:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	021b      	lsls	r3, r3, #8
 800279e:	68fa      	ldr	r2, [r7, #12]
 80027a0:	4313      	orrs	r3, r2
 80027a2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	68fa      	ldr	r2, [r7, #12]
 80027aa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	681a      	ldr	r2, [r3, #0]
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f042 0201 	orr.w	r2, r2, #1
 80027ba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2220      	movs	r2, #32
 80027c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2200      	movs	r2, #0
 80027c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80027cc:	2300      	movs	r3, #0
 80027ce:	e000      	b.n	80027d2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80027d0:	2302      	movs	r3, #2
  }
}
 80027d2:	4618      	mov	r0, r3
 80027d4:	3714      	adds	r7, #20
 80027d6:	46bd      	mov	sp, r7
 80027d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027dc:	4770      	bx	lr
	...

080027e0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b082      	sub	sp, #8
 80027e4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80027e6:	2300      	movs	r3, #0
 80027e8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80027ea:	4b23      	ldr	r3, [pc, #140]	@ (8002878 <HAL_PWREx_EnableOverDrive+0x98>)
 80027ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027ee:	4a22      	ldr	r2, [pc, #136]	@ (8002878 <HAL_PWREx_EnableOverDrive+0x98>)
 80027f0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80027f4:	6413      	str	r3, [r2, #64]	@ 0x40
 80027f6:	4b20      	ldr	r3, [pc, #128]	@ (8002878 <HAL_PWREx_EnableOverDrive+0x98>)
 80027f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027fe:	603b      	str	r3, [r7, #0]
 8002800:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002802:	4b1e      	ldr	r3, [pc, #120]	@ (800287c <HAL_PWREx_EnableOverDrive+0x9c>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	4a1d      	ldr	r2, [pc, #116]	@ (800287c <HAL_PWREx_EnableOverDrive+0x9c>)
 8002808:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800280c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800280e:	f7fe ff65 	bl	80016dc <HAL_GetTick>
 8002812:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002814:	e009      	b.n	800282a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002816:	f7fe ff61 	bl	80016dc <HAL_GetTick>
 800281a:	4602      	mov	r2, r0
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	1ad3      	subs	r3, r2, r3
 8002820:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002824:	d901      	bls.n	800282a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8002826:	2303      	movs	r3, #3
 8002828:	e022      	b.n	8002870 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800282a:	4b14      	ldr	r3, [pc, #80]	@ (800287c <HAL_PWREx_EnableOverDrive+0x9c>)
 800282c:	685b      	ldr	r3, [r3, #4]
 800282e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002832:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002836:	d1ee      	bne.n	8002816 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002838:	4b10      	ldr	r3, [pc, #64]	@ (800287c <HAL_PWREx_EnableOverDrive+0x9c>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	4a0f      	ldr	r2, [pc, #60]	@ (800287c <HAL_PWREx_EnableOverDrive+0x9c>)
 800283e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002842:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002844:	f7fe ff4a 	bl	80016dc <HAL_GetTick>
 8002848:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800284a:	e009      	b.n	8002860 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800284c:	f7fe ff46 	bl	80016dc <HAL_GetTick>
 8002850:	4602      	mov	r2, r0
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	1ad3      	subs	r3, r2, r3
 8002856:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800285a:	d901      	bls.n	8002860 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 800285c:	2303      	movs	r3, #3
 800285e:	e007      	b.n	8002870 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002860:	4b06      	ldr	r3, [pc, #24]	@ (800287c <HAL_PWREx_EnableOverDrive+0x9c>)
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002868:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800286c:	d1ee      	bne.n	800284c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800286e:	2300      	movs	r3, #0
}
 8002870:	4618      	mov	r0, r3
 8002872:	3708      	adds	r7, #8
 8002874:	46bd      	mov	sp, r7
 8002876:	bd80      	pop	{r7, pc}
 8002878:	40023800 	.word	0x40023800
 800287c:	40007000 	.word	0x40007000

08002880 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b086      	sub	sp, #24
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002888:	2300      	movs	r3, #0
 800288a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2b00      	cmp	r3, #0
 8002890:	d101      	bne.n	8002896 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002892:	2301      	movs	r3, #1
 8002894:	e29b      	b.n	8002dce <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f003 0301 	and.w	r3, r3, #1
 800289e:	2b00      	cmp	r3, #0
 80028a0:	f000 8087 	beq.w	80029b2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80028a4:	4b96      	ldr	r3, [pc, #600]	@ (8002b00 <HAL_RCC_OscConfig+0x280>)
 80028a6:	689b      	ldr	r3, [r3, #8]
 80028a8:	f003 030c 	and.w	r3, r3, #12
 80028ac:	2b04      	cmp	r3, #4
 80028ae:	d00c      	beq.n	80028ca <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80028b0:	4b93      	ldr	r3, [pc, #588]	@ (8002b00 <HAL_RCC_OscConfig+0x280>)
 80028b2:	689b      	ldr	r3, [r3, #8]
 80028b4:	f003 030c 	and.w	r3, r3, #12
 80028b8:	2b08      	cmp	r3, #8
 80028ba:	d112      	bne.n	80028e2 <HAL_RCC_OscConfig+0x62>
 80028bc:	4b90      	ldr	r3, [pc, #576]	@ (8002b00 <HAL_RCC_OscConfig+0x280>)
 80028be:	685b      	ldr	r3, [r3, #4]
 80028c0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80028c4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80028c8:	d10b      	bne.n	80028e2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028ca:	4b8d      	ldr	r3, [pc, #564]	@ (8002b00 <HAL_RCC_OscConfig+0x280>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d06c      	beq.n	80029b0 <HAL_RCC_OscConfig+0x130>
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	685b      	ldr	r3, [r3, #4]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d168      	bne.n	80029b0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80028de:	2301      	movs	r3, #1
 80028e0:	e275      	b.n	8002dce <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	685b      	ldr	r3, [r3, #4]
 80028e6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80028ea:	d106      	bne.n	80028fa <HAL_RCC_OscConfig+0x7a>
 80028ec:	4b84      	ldr	r3, [pc, #528]	@ (8002b00 <HAL_RCC_OscConfig+0x280>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	4a83      	ldr	r2, [pc, #524]	@ (8002b00 <HAL_RCC_OscConfig+0x280>)
 80028f2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80028f6:	6013      	str	r3, [r2, #0]
 80028f8:	e02e      	b.n	8002958 <HAL_RCC_OscConfig+0xd8>
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	685b      	ldr	r3, [r3, #4]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d10c      	bne.n	800291c <HAL_RCC_OscConfig+0x9c>
 8002902:	4b7f      	ldr	r3, [pc, #508]	@ (8002b00 <HAL_RCC_OscConfig+0x280>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	4a7e      	ldr	r2, [pc, #504]	@ (8002b00 <HAL_RCC_OscConfig+0x280>)
 8002908:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800290c:	6013      	str	r3, [r2, #0]
 800290e:	4b7c      	ldr	r3, [pc, #496]	@ (8002b00 <HAL_RCC_OscConfig+0x280>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	4a7b      	ldr	r2, [pc, #492]	@ (8002b00 <HAL_RCC_OscConfig+0x280>)
 8002914:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002918:	6013      	str	r3, [r2, #0]
 800291a:	e01d      	b.n	8002958 <HAL_RCC_OscConfig+0xd8>
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002924:	d10c      	bne.n	8002940 <HAL_RCC_OscConfig+0xc0>
 8002926:	4b76      	ldr	r3, [pc, #472]	@ (8002b00 <HAL_RCC_OscConfig+0x280>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	4a75      	ldr	r2, [pc, #468]	@ (8002b00 <HAL_RCC_OscConfig+0x280>)
 800292c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002930:	6013      	str	r3, [r2, #0]
 8002932:	4b73      	ldr	r3, [pc, #460]	@ (8002b00 <HAL_RCC_OscConfig+0x280>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	4a72      	ldr	r2, [pc, #456]	@ (8002b00 <HAL_RCC_OscConfig+0x280>)
 8002938:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800293c:	6013      	str	r3, [r2, #0]
 800293e:	e00b      	b.n	8002958 <HAL_RCC_OscConfig+0xd8>
 8002940:	4b6f      	ldr	r3, [pc, #444]	@ (8002b00 <HAL_RCC_OscConfig+0x280>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4a6e      	ldr	r2, [pc, #440]	@ (8002b00 <HAL_RCC_OscConfig+0x280>)
 8002946:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800294a:	6013      	str	r3, [r2, #0]
 800294c:	4b6c      	ldr	r3, [pc, #432]	@ (8002b00 <HAL_RCC_OscConfig+0x280>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	4a6b      	ldr	r2, [pc, #428]	@ (8002b00 <HAL_RCC_OscConfig+0x280>)
 8002952:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002956:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	2b00      	cmp	r3, #0
 800295e:	d013      	beq.n	8002988 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002960:	f7fe febc 	bl	80016dc <HAL_GetTick>
 8002964:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002966:	e008      	b.n	800297a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002968:	f7fe feb8 	bl	80016dc <HAL_GetTick>
 800296c:	4602      	mov	r2, r0
 800296e:	693b      	ldr	r3, [r7, #16]
 8002970:	1ad3      	subs	r3, r2, r3
 8002972:	2b64      	cmp	r3, #100	@ 0x64
 8002974:	d901      	bls.n	800297a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002976:	2303      	movs	r3, #3
 8002978:	e229      	b.n	8002dce <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800297a:	4b61      	ldr	r3, [pc, #388]	@ (8002b00 <HAL_RCC_OscConfig+0x280>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002982:	2b00      	cmp	r3, #0
 8002984:	d0f0      	beq.n	8002968 <HAL_RCC_OscConfig+0xe8>
 8002986:	e014      	b.n	80029b2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002988:	f7fe fea8 	bl	80016dc <HAL_GetTick>
 800298c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800298e:	e008      	b.n	80029a2 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002990:	f7fe fea4 	bl	80016dc <HAL_GetTick>
 8002994:	4602      	mov	r2, r0
 8002996:	693b      	ldr	r3, [r7, #16]
 8002998:	1ad3      	subs	r3, r2, r3
 800299a:	2b64      	cmp	r3, #100	@ 0x64
 800299c:	d901      	bls.n	80029a2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800299e:	2303      	movs	r3, #3
 80029a0:	e215      	b.n	8002dce <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029a2:	4b57      	ldr	r3, [pc, #348]	@ (8002b00 <HAL_RCC_OscConfig+0x280>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d1f0      	bne.n	8002990 <HAL_RCC_OscConfig+0x110>
 80029ae:	e000      	b.n	80029b2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f003 0302 	and.w	r3, r3, #2
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d069      	beq.n	8002a92 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80029be:	4b50      	ldr	r3, [pc, #320]	@ (8002b00 <HAL_RCC_OscConfig+0x280>)
 80029c0:	689b      	ldr	r3, [r3, #8]
 80029c2:	f003 030c 	and.w	r3, r3, #12
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d00b      	beq.n	80029e2 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80029ca:	4b4d      	ldr	r3, [pc, #308]	@ (8002b00 <HAL_RCC_OscConfig+0x280>)
 80029cc:	689b      	ldr	r3, [r3, #8]
 80029ce:	f003 030c 	and.w	r3, r3, #12
 80029d2:	2b08      	cmp	r3, #8
 80029d4:	d11c      	bne.n	8002a10 <HAL_RCC_OscConfig+0x190>
 80029d6:	4b4a      	ldr	r3, [pc, #296]	@ (8002b00 <HAL_RCC_OscConfig+0x280>)
 80029d8:	685b      	ldr	r3, [r3, #4]
 80029da:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d116      	bne.n	8002a10 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029e2:	4b47      	ldr	r3, [pc, #284]	@ (8002b00 <HAL_RCC_OscConfig+0x280>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f003 0302 	and.w	r3, r3, #2
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d005      	beq.n	80029fa <HAL_RCC_OscConfig+0x17a>
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	68db      	ldr	r3, [r3, #12]
 80029f2:	2b01      	cmp	r3, #1
 80029f4:	d001      	beq.n	80029fa <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80029f6:	2301      	movs	r3, #1
 80029f8:	e1e9      	b.n	8002dce <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029fa:	4b41      	ldr	r3, [pc, #260]	@ (8002b00 <HAL_RCC_OscConfig+0x280>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	691b      	ldr	r3, [r3, #16]
 8002a06:	00db      	lsls	r3, r3, #3
 8002a08:	493d      	ldr	r1, [pc, #244]	@ (8002b00 <HAL_RCC_OscConfig+0x280>)
 8002a0a:	4313      	orrs	r3, r2
 8002a0c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a0e:	e040      	b.n	8002a92 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	68db      	ldr	r3, [r3, #12]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d023      	beq.n	8002a60 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a18:	4b39      	ldr	r3, [pc, #228]	@ (8002b00 <HAL_RCC_OscConfig+0x280>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	4a38      	ldr	r2, [pc, #224]	@ (8002b00 <HAL_RCC_OscConfig+0x280>)
 8002a1e:	f043 0301 	orr.w	r3, r3, #1
 8002a22:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a24:	f7fe fe5a 	bl	80016dc <HAL_GetTick>
 8002a28:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a2a:	e008      	b.n	8002a3e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a2c:	f7fe fe56 	bl	80016dc <HAL_GetTick>
 8002a30:	4602      	mov	r2, r0
 8002a32:	693b      	ldr	r3, [r7, #16]
 8002a34:	1ad3      	subs	r3, r2, r3
 8002a36:	2b02      	cmp	r3, #2
 8002a38:	d901      	bls.n	8002a3e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002a3a:	2303      	movs	r3, #3
 8002a3c:	e1c7      	b.n	8002dce <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a3e:	4b30      	ldr	r3, [pc, #192]	@ (8002b00 <HAL_RCC_OscConfig+0x280>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f003 0302 	and.w	r3, r3, #2
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d0f0      	beq.n	8002a2c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a4a:	4b2d      	ldr	r3, [pc, #180]	@ (8002b00 <HAL_RCC_OscConfig+0x280>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	691b      	ldr	r3, [r3, #16]
 8002a56:	00db      	lsls	r3, r3, #3
 8002a58:	4929      	ldr	r1, [pc, #164]	@ (8002b00 <HAL_RCC_OscConfig+0x280>)
 8002a5a:	4313      	orrs	r3, r2
 8002a5c:	600b      	str	r3, [r1, #0]
 8002a5e:	e018      	b.n	8002a92 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a60:	4b27      	ldr	r3, [pc, #156]	@ (8002b00 <HAL_RCC_OscConfig+0x280>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4a26      	ldr	r2, [pc, #152]	@ (8002b00 <HAL_RCC_OscConfig+0x280>)
 8002a66:	f023 0301 	bic.w	r3, r3, #1
 8002a6a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a6c:	f7fe fe36 	bl	80016dc <HAL_GetTick>
 8002a70:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a72:	e008      	b.n	8002a86 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a74:	f7fe fe32 	bl	80016dc <HAL_GetTick>
 8002a78:	4602      	mov	r2, r0
 8002a7a:	693b      	ldr	r3, [r7, #16]
 8002a7c:	1ad3      	subs	r3, r2, r3
 8002a7e:	2b02      	cmp	r3, #2
 8002a80:	d901      	bls.n	8002a86 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002a82:	2303      	movs	r3, #3
 8002a84:	e1a3      	b.n	8002dce <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a86:	4b1e      	ldr	r3, [pc, #120]	@ (8002b00 <HAL_RCC_OscConfig+0x280>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f003 0302 	and.w	r3, r3, #2
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d1f0      	bne.n	8002a74 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f003 0308 	and.w	r3, r3, #8
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d038      	beq.n	8002b10 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	695b      	ldr	r3, [r3, #20]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d019      	beq.n	8002ada <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002aa6:	4b16      	ldr	r3, [pc, #88]	@ (8002b00 <HAL_RCC_OscConfig+0x280>)
 8002aa8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002aaa:	4a15      	ldr	r2, [pc, #84]	@ (8002b00 <HAL_RCC_OscConfig+0x280>)
 8002aac:	f043 0301 	orr.w	r3, r3, #1
 8002ab0:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ab2:	f7fe fe13 	bl	80016dc <HAL_GetTick>
 8002ab6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ab8:	e008      	b.n	8002acc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002aba:	f7fe fe0f 	bl	80016dc <HAL_GetTick>
 8002abe:	4602      	mov	r2, r0
 8002ac0:	693b      	ldr	r3, [r7, #16]
 8002ac2:	1ad3      	subs	r3, r2, r3
 8002ac4:	2b02      	cmp	r3, #2
 8002ac6:	d901      	bls.n	8002acc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002ac8:	2303      	movs	r3, #3
 8002aca:	e180      	b.n	8002dce <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002acc:	4b0c      	ldr	r3, [pc, #48]	@ (8002b00 <HAL_RCC_OscConfig+0x280>)
 8002ace:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002ad0:	f003 0302 	and.w	r3, r3, #2
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d0f0      	beq.n	8002aba <HAL_RCC_OscConfig+0x23a>
 8002ad8:	e01a      	b.n	8002b10 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ada:	4b09      	ldr	r3, [pc, #36]	@ (8002b00 <HAL_RCC_OscConfig+0x280>)
 8002adc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002ade:	4a08      	ldr	r2, [pc, #32]	@ (8002b00 <HAL_RCC_OscConfig+0x280>)
 8002ae0:	f023 0301 	bic.w	r3, r3, #1
 8002ae4:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ae6:	f7fe fdf9 	bl	80016dc <HAL_GetTick>
 8002aea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002aec:	e00a      	b.n	8002b04 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002aee:	f7fe fdf5 	bl	80016dc <HAL_GetTick>
 8002af2:	4602      	mov	r2, r0
 8002af4:	693b      	ldr	r3, [r7, #16]
 8002af6:	1ad3      	subs	r3, r2, r3
 8002af8:	2b02      	cmp	r3, #2
 8002afa:	d903      	bls.n	8002b04 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002afc:	2303      	movs	r3, #3
 8002afe:	e166      	b.n	8002dce <HAL_RCC_OscConfig+0x54e>
 8002b00:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b04:	4b92      	ldr	r3, [pc, #584]	@ (8002d50 <HAL_RCC_OscConfig+0x4d0>)
 8002b06:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002b08:	f003 0302 	and.w	r3, r3, #2
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d1ee      	bne.n	8002aee <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f003 0304 	and.w	r3, r3, #4
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	f000 80a4 	beq.w	8002c66 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b1e:	4b8c      	ldr	r3, [pc, #560]	@ (8002d50 <HAL_RCC_OscConfig+0x4d0>)
 8002b20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b22:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d10d      	bne.n	8002b46 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b2a:	4b89      	ldr	r3, [pc, #548]	@ (8002d50 <HAL_RCC_OscConfig+0x4d0>)
 8002b2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b2e:	4a88      	ldr	r2, [pc, #544]	@ (8002d50 <HAL_RCC_OscConfig+0x4d0>)
 8002b30:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002b34:	6413      	str	r3, [r2, #64]	@ 0x40
 8002b36:	4b86      	ldr	r3, [pc, #536]	@ (8002d50 <HAL_RCC_OscConfig+0x4d0>)
 8002b38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b3a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b3e:	60bb      	str	r3, [r7, #8]
 8002b40:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b42:	2301      	movs	r3, #1
 8002b44:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b46:	4b83      	ldr	r3, [pc, #524]	@ (8002d54 <HAL_RCC_OscConfig+0x4d4>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d118      	bne.n	8002b84 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002b52:	4b80      	ldr	r3, [pc, #512]	@ (8002d54 <HAL_RCC_OscConfig+0x4d4>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	4a7f      	ldr	r2, [pc, #508]	@ (8002d54 <HAL_RCC_OscConfig+0x4d4>)
 8002b58:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002b5c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b5e:	f7fe fdbd 	bl	80016dc <HAL_GetTick>
 8002b62:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b64:	e008      	b.n	8002b78 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b66:	f7fe fdb9 	bl	80016dc <HAL_GetTick>
 8002b6a:	4602      	mov	r2, r0
 8002b6c:	693b      	ldr	r3, [r7, #16]
 8002b6e:	1ad3      	subs	r3, r2, r3
 8002b70:	2b64      	cmp	r3, #100	@ 0x64
 8002b72:	d901      	bls.n	8002b78 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002b74:	2303      	movs	r3, #3
 8002b76:	e12a      	b.n	8002dce <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b78:	4b76      	ldr	r3, [pc, #472]	@ (8002d54 <HAL_RCC_OscConfig+0x4d4>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d0f0      	beq.n	8002b66 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	689b      	ldr	r3, [r3, #8]
 8002b88:	2b01      	cmp	r3, #1
 8002b8a:	d106      	bne.n	8002b9a <HAL_RCC_OscConfig+0x31a>
 8002b8c:	4b70      	ldr	r3, [pc, #448]	@ (8002d50 <HAL_RCC_OscConfig+0x4d0>)
 8002b8e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b90:	4a6f      	ldr	r2, [pc, #444]	@ (8002d50 <HAL_RCC_OscConfig+0x4d0>)
 8002b92:	f043 0301 	orr.w	r3, r3, #1
 8002b96:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b98:	e02d      	b.n	8002bf6 <HAL_RCC_OscConfig+0x376>
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	689b      	ldr	r3, [r3, #8]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d10c      	bne.n	8002bbc <HAL_RCC_OscConfig+0x33c>
 8002ba2:	4b6b      	ldr	r3, [pc, #428]	@ (8002d50 <HAL_RCC_OscConfig+0x4d0>)
 8002ba4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ba6:	4a6a      	ldr	r2, [pc, #424]	@ (8002d50 <HAL_RCC_OscConfig+0x4d0>)
 8002ba8:	f023 0301 	bic.w	r3, r3, #1
 8002bac:	6713      	str	r3, [r2, #112]	@ 0x70
 8002bae:	4b68      	ldr	r3, [pc, #416]	@ (8002d50 <HAL_RCC_OscConfig+0x4d0>)
 8002bb0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002bb2:	4a67      	ldr	r2, [pc, #412]	@ (8002d50 <HAL_RCC_OscConfig+0x4d0>)
 8002bb4:	f023 0304 	bic.w	r3, r3, #4
 8002bb8:	6713      	str	r3, [r2, #112]	@ 0x70
 8002bba:	e01c      	b.n	8002bf6 <HAL_RCC_OscConfig+0x376>
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	689b      	ldr	r3, [r3, #8]
 8002bc0:	2b05      	cmp	r3, #5
 8002bc2:	d10c      	bne.n	8002bde <HAL_RCC_OscConfig+0x35e>
 8002bc4:	4b62      	ldr	r3, [pc, #392]	@ (8002d50 <HAL_RCC_OscConfig+0x4d0>)
 8002bc6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002bc8:	4a61      	ldr	r2, [pc, #388]	@ (8002d50 <HAL_RCC_OscConfig+0x4d0>)
 8002bca:	f043 0304 	orr.w	r3, r3, #4
 8002bce:	6713      	str	r3, [r2, #112]	@ 0x70
 8002bd0:	4b5f      	ldr	r3, [pc, #380]	@ (8002d50 <HAL_RCC_OscConfig+0x4d0>)
 8002bd2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002bd4:	4a5e      	ldr	r2, [pc, #376]	@ (8002d50 <HAL_RCC_OscConfig+0x4d0>)
 8002bd6:	f043 0301 	orr.w	r3, r3, #1
 8002bda:	6713      	str	r3, [r2, #112]	@ 0x70
 8002bdc:	e00b      	b.n	8002bf6 <HAL_RCC_OscConfig+0x376>
 8002bde:	4b5c      	ldr	r3, [pc, #368]	@ (8002d50 <HAL_RCC_OscConfig+0x4d0>)
 8002be0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002be2:	4a5b      	ldr	r2, [pc, #364]	@ (8002d50 <HAL_RCC_OscConfig+0x4d0>)
 8002be4:	f023 0301 	bic.w	r3, r3, #1
 8002be8:	6713      	str	r3, [r2, #112]	@ 0x70
 8002bea:	4b59      	ldr	r3, [pc, #356]	@ (8002d50 <HAL_RCC_OscConfig+0x4d0>)
 8002bec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002bee:	4a58      	ldr	r2, [pc, #352]	@ (8002d50 <HAL_RCC_OscConfig+0x4d0>)
 8002bf0:	f023 0304 	bic.w	r3, r3, #4
 8002bf4:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	689b      	ldr	r3, [r3, #8]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d015      	beq.n	8002c2a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bfe:	f7fe fd6d 	bl	80016dc <HAL_GetTick>
 8002c02:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c04:	e00a      	b.n	8002c1c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c06:	f7fe fd69 	bl	80016dc <HAL_GetTick>
 8002c0a:	4602      	mov	r2, r0
 8002c0c:	693b      	ldr	r3, [r7, #16]
 8002c0e:	1ad3      	subs	r3, r2, r3
 8002c10:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c14:	4293      	cmp	r3, r2
 8002c16:	d901      	bls.n	8002c1c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002c18:	2303      	movs	r3, #3
 8002c1a:	e0d8      	b.n	8002dce <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c1c:	4b4c      	ldr	r3, [pc, #304]	@ (8002d50 <HAL_RCC_OscConfig+0x4d0>)
 8002c1e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c20:	f003 0302 	and.w	r3, r3, #2
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d0ee      	beq.n	8002c06 <HAL_RCC_OscConfig+0x386>
 8002c28:	e014      	b.n	8002c54 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c2a:	f7fe fd57 	bl	80016dc <HAL_GetTick>
 8002c2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c30:	e00a      	b.n	8002c48 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c32:	f7fe fd53 	bl	80016dc <HAL_GetTick>
 8002c36:	4602      	mov	r2, r0
 8002c38:	693b      	ldr	r3, [r7, #16]
 8002c3a:	1ad3      	subs	r3, r2, r3
 8002c3c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c40:	4293      	cmp	r3, r2
 8002c42:	d901      	bls.n	8002c48 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002c44:	2303      	movs	r3, #3
 8002c46:	e0c2      	b.n	8002dce <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c48:	4b41      	ldr	r3, [pc, #260]	@ (8002d50 <HAL_RCC_OscConfig+0x4d0>)
 8002c4a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c4c:	f003 0302 	and.w	r3, r3, #2
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d1ee      	bne.n	8002c32 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002c54:	7dfb      	ldrb	r3, [r7, #23]
 8002c56:	2b01      	cmp	r3, #1
 8002c58:	d105      	bne.n	8002c66 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c5a:	4b3d      	ldr	r3, [pc, #244]	@ (8002d50 <HAL_RCC_OscConfig+0x4d0>)
 8002c5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c5e:	4a3c      	ldr	r2, [pc, #240]	@ (8002d50 <HAL_RCC_OscConfig+0x4d0>)
 8002c60:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002c64:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	699b      	ldr	r3, [r3, #24]
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	f000 80ae 	beq.w	8002dcc <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002c70:	4b37      	ldr	r3, [pc, #220]	@ (8002d50 <HAL_RCC_OscConfig+0x4d0>)
 8002c72:	689b      	ldr	r3, [r3, #8]
 8002c74:	f003 030c 	and.w	r3, r3, #12
 8002c78:	2b08      	cmp	r3, #8
 8002c7a:	d06d      	beq.n	8002d58 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	699b      	ldr	r3, [r3, #24]
 8002c80:	2b02      	cmp	r3, #2
 8002c82:	d14b      	bne.n	8002d1c <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c84:	4b32      	ldr	r3, [pc, #200]	@ (8002d50 <HAL_RCC_OscConfig+0x4d0>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4a31      	ldr	r2, [pc, #196]	@ (8002d50 <HAL_RCC_OscConfig+0x4d0>)
 8002c8a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002c8e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c90:	f7fe fd24 	bl	80016dc <HAL_GetTick>
 8002c94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c96:	e008      	b.n	8002caa <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c98:	f7fe fd20 	bl	80016dc <HAL_GetTick>
 8002c9c:	4602      	mov	r2, r0
 8002c9e:	693b      	ldr	r3, [r7, #16]
 8002ca0:	1ad3      	subs	r3, r2, r3
 8002ca2:	2b02      	cmp	r3, #2
 8002ca4:	d901      	bls.n	8002caa <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002ca6:	2303      	movs	r3, #3
 8002ca8:	e091      	b.n	8002dce <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002caa:	4b29      	ldr	r3, [pc, #164]	@ (8002d50 <HAL_RCC_OscConfig+0x4d0>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d1f0      	bne.n	8002c98 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	69da      	ldr	r2, [r3, #28]
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6a1b      	ldr	r3, [r3, #32]
 8002cbe:	431a      	orrs	r2, r3
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cc4:	019b      	lsls	r3, r3, #6
 8002cc6:	431a      	orrs	r2, r3
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ccc:	085b      	lsrs	r3, r3, #1
 8002cce:	3b01      	subs	r3, #1
 8002cd0:	041b      	lsls	r3, r3, #16
 8002cd2:	431a      	orrs	r2, r3
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cd8:	061b      	lsls	r3, r3, #24
 8002cda:	431a      	orrs	r2, r3
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ce0:	071b      	lsls	r3, r3, #28
 8002ce2:	491b      	ldr	r1, [pc, #108]	@ (8002d50 <HAL_RCC_OscConfig+0x4d0>)
 8002ce4:	4313      	orrs	r3, r2
 8002ce6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ce8:	4b19      	ldr	r3, [pc, #100]	@ (8002d50 <HAL_RCC_OscConfig+0x4d0>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4a18      	ldr	r2, [pc, #96]	@ (8002d50 <HAL_RCC_OscConfig+0x4d0>)
 8002cee:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002cf2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cf4:	f7fe fcf2 	bl	80016dc <HAL_GetTick>
 8002cf8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002cfa:	e008      	b.n	8002d0e <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cfc:	f7fe fcee 	bl	80016dc <HAL_GetTick>
 8002d00:	4602      	mov	r2, r0
 8002d02:	693b      	ldr	r3, [r7, #16]
 8002d04:	1ad3      	subs	r3, r2, r3
 8002d06:	2b02      	cmp	r3, #2
 8002d08:	d901      	bls.n	8002d0e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8002d0a:	2303      	movs	r3, #3
 8002d0c:	e05f      	b.n	8002dce <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d0e:	4b10      	ldr	r3, [pc, #64]	@ (8002d50 <HAL_RCC_OscConfig+0x4d0>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d0f0      	beq.n	8002cfc <HAL_RCC_OscConfig+0x47c>
 8002d1a:	e057      	b.n	8002dcc <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d1c:	4b0c      	ldr	r3, [pc, #48]	@ (8002d50 <HAL_RCC_OscConfig+0x4d0>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4a0b      	ldr	r2, [pc, #44]	@ (8002d50 <HAL_RCC_OscConfig+0x4d0>)
 8002d22:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002d26:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d28:	f7fe fcd8 	bl	80016dc <HAL_GetTick>
 8002d2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d2e:	e008      	b.n	8002d42 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d30:	f7fe fcd4 	bl	80016dc <HAL_GetTick>
 8002d34:	4602      	mov	r2, r0
 8002d36:	693b      	ldr	r3, [r7, #16]
 8002d38:	1ad3      	subs	r3, r2, r3
 8002d3a:	2b02      	cmp	r3, #2
 8002d3c:	d901      	bls.n	8002d42 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8002d3e:	2303      	movs	r3, #3
 8002d40:	e045      	b.n	8002dce <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d42:	4b03      	ldr	r3, [pc, #12]	@ (8002d50 <HAL_RCC_OscConfig+0x4d0>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d1f0      	bne.n	8002d30 <HAL_RCC_OscConfig+0x4b0>
 8002d4e:	e03d      	b.n	8002dcc <HAL_RCC_OscConfig+0x54c>
 8002d50:	40023800 	.word	0x40023800
 8002d54:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002d58:	4b1f      	ldr	r3, [pc, #124]	@ (8002dd8 <HAL_RCC_OscConfig+0x558>)
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	699b      	ldr	r3, [r3, #24]
 8002d62:	2b01      	cmp	r3, #1
 8002d64:	d030      	beq.n	8002dc8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d70:	429a      	cmp	r2, r3
 8002d72:	d129      	bne.n	8002dc8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d7e:	429a      	cmp	r2, r3
 8002d80:	d122      	bne.n	8002dc8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002d82:	68fa      	ldr	r2, [r7, #12]
 8002d84:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002d88:	4013      	ands	r3, r2
 8002d8a:	687a      	ldr	r2, [r7, #4]
 8002d8c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002d8e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002d90:	4293      	cmp	r3, r2
 8002d92:	d119      	bne.n	8002dc8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d9e:	085b      	lsrs	r3, r3, #1
 8002da0:	3b01      	subs	r3, #1
 8002da2:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002da4:	429a      	cmp	r2, r3
 8002da6:	d10f      	bne.n	8002dc8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002db2:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002db4:	429a      	cmp	r2, r3
 8002db6:	d107      	bne.n	8002dc8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dc2:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002dc4:	429a      	cmp	r2, r3
 8002dc6:	d001      	beq.n	8002dcc <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8002dc8:	2301      	movs	r3, #1
 8002dca:	e000      	b.n	8002dce <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8002dcc:	2300      	movs	r3, #0
}
 8002dce:	4618      	mov	r0, r3
 8002dd0:	3718      	adds	r7, #24
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	bd80      	pop	{r7, pc}
 8002dd6:	bf00      	nop
 8002dd8:	40023800 	.word	0x40023800

08002ddc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b084      	sub	sp, #16
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
 8002de4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002de6:	2300      	movs	r3, #0
 8002de8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d101      	bne.n	8002df4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002df0:	2301      	movs	r3, #1
 8002df2:	e0d0      	b.n	8002f96 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002df4:	4b6a      	ldr	r3, [pc, #424]	@ (8002fa0 <HAL_RCC_ClockConfig+0x1c4>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f003 030f 	and.w	r3, r3, #15
 8002dfc:	683a      	ldr	r2, [r7, #0]
 8002dfe:	429a      	cmp	r2, r3
 8002e00:	d910      	bls.n	8002e24 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e02:	4b67      	ldr	r3, [pc, #412]	@ (8002fa0 <HAL_RCC_ClockConfig+0x1c4>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f023 020f 	bic.w	r2, r3, #15
 8002e0a:	4965      	ldr	r1, [pc, #404]	@ (8002fa0 <HAL_RCC_ClockConfig+0x1c4>)
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	4313      	orrs	r3, r2
 8002e10:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e12:	4b63      	ldr	r3, [pc, #396]	@ (8002fa0 <HAL_RCC_ClockConfig+0x1c4>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f003 030f 	and.w	r3, r3, #15
 8002e1a:	683a      	ldr	r2, [r7, #0]
 8002e1c:	429a      	cmp	r2, r3
 8002e1e:	d001      	beq.n	8002e24 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002e20:	2301      	movs	r3, #1
 8002e22:	e0b8      	b.n	8002f96 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f003 0302 	and.w	r3, r3, #2
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d020      	beq.n	8002e72 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f003 0304 	and.w	r3, r3, #4
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d005      	beq.n	8002e48 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002e3c:	4b59      	ldr	r3, [pc, #356]	@ (8002fa4 <HAL_RCC_ClockConfig+0x1c8>)
 8002e3e:	689b      	ldr	r3, [r3, #8]
 8002e40:	4a58      	ldr	r2, [pc, #352]	@ (8002fa4 <HAL_RCC_ClockConfig+0x1c8>)
 8002e42:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002e46:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f003 0308 	and.w	r3, r3, #8
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d005      	beq.n	8002e60 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002e54:	4b53      	ldr	r3, [pc, #332]	@ (8002fa4 <HAL_RCC_ClockConfig+0x1c8>)
 8002e56:	689b      	ldr	r3, [r3, #8]
 8002e58:	4a52      	ldr	r2, [pc, #328]	@ (8002fa4 <HAL_RCC_ClockConfig+0x1c8>)
 8002e5a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002e5e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e60:	4b50      	ldr	r3, [pc, #320]	@ (8002fa4 <HAL_RCC_ClockConfig+0x1c8>)
 8002e62:	689b      	ldr	r3, [r3, #8]
 8002e64:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	689b      	ldr	r3, [r3, #8]
 8002e6c:	494d      	ldr	r1, [pc, #308]	@ (8002fa4 <HAL_RCC_ClockConfig+0x1c8>)
 8002e6e:	4313      	orrs	r3, r2
 8002e70:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f003 0301 	and.w	r3, r3, #1
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d040      	beq.n	8002f00 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	685b      	ldr	r3, [r3, #4]
 8002e82:	2b01      	cmp	r3, #1
 8002e84:	d107      	bne.n	8002e96 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e86:	4b47      	ldr	r3, [pc, #284]	@ (8002fa4 <HAL_RCC_ClockConfig+0x1c8>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d115      	bne.n	8002ebe <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002e92:	2301      	movs	r3, #1
 8002e94:	e07f      	b.n	8002f96 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	685b      	ldr	r3, [r3, #4]
 8002e9a:	2b02      	cmp	r3, #2
 8002e9c:	d107      	bne.n	8002eae <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e9e:	4b41      	ldr	r3, [pc, #260]	@ (8002fa4 <HAL_RCC_ClockConfig+0x1c8>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d109      	bne.n	8002ebe <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002eaa:	2301      	movs	r3, #1
 8002eac:	e073      	b.n	8002f96 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002eae:	4b3d      	ldr	r3, [pc, #244]	@ (8002fa4 <HAL_RCC_ClockConfig+0x1c8>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f003 0302 	and.w	r3, r3, #2
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d101      	bne.n	8002ebe <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002eba:	2301      	movs	r3, #1
 8002ebc:	e06b      	b.n	8002f96 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002ebe:	4b39      	ldr	r3, [pc, #228]	@ (8002fa4 <HAL_RCC_ClockConfig+0x1c8>)
 8002ec0:	689b      	ldr	r3, [r3, #8]
 8002ec2:	f023 0203 	bic.w	r2, r3, #3
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	685b      	ldr	r3, [r3, #4]
 8002eca:	4936      	ldr	r1, [pc, #216]	@ (8002fa4 <HAL_RCC_ClockConfig+0x1c8>)
 8002ecc:	4313      	orrs	r3, r2
 8002ece:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ed0:	f7fe fc04 	bl	80016dc <HAL_GetTick>
 8002ed4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ed6:	e00a      	b.n	8002eee <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ed8:	f7fe fc00 	bl	80016dc <HAL_GetTick>
 8002edc:	4602      	mov	r2, r0
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	1ad3      	subs	r3, r2, r3
 8002ee2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d901      	bls.n	8002eee <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002eea:	2303      	movs	r3, #3
 8002eec:	e053      	b.n	8002f96 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002eee:	4b2d      	ldr	r3, [pc, #180]	@ (8002fa4 <HAL_RCC_ClockConfig+0x1c8>)
 8002ef0:	689b      	ldr	r3, [r3, #8]
 8002ef2:	f003 020c 	and.w	r2, r3, #12
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	685b      	ldr	r3, [r3, #4]
 8002efa:	009b      	lsls	r3, r3, #2
 8002efc:	429a      	cmp	r2, r3
 8002efe:	d1eb      	bne.n	8002ed8 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002f00:	4b27      	ldr	r3, [pc, #156]	@ (8002fa0 <HAL_RCC_ClockConfig+0x1c4>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f003 030f 	and.w	r3, r3, #15
 8002f08:	683a      	ldr	r2, [r7, #0]
 8002f0a:	429a      	cmp	r2, r3
 8002f0c:	d210      	bcs.n	8002f30 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f0e:	4b24      	ldr	r3, [pc, #144]	@ (8002fa0 <HAL_RCC_ClockConfig+0x1c4>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f023 020f 	bic.w	r2, r3, #15
 8002f16:	4922      	ldr	r1, [pc, #136]	@ (8002fa0 <HAL_RCC_ClockConfig+0x1c4>)
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	4313      	orrs	r3, r2
 8002f1c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f1e:	4b20      	ldr	r3, [pc, #128]	@ (8002fa0 <HAL_RCC_ClockConfig+0x1c4>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f003 030f 	and.w	r3, r3, #15
 8002f26:	683a      	ldr	r2, [r7, #0]
 8002f28:	429a      	cmp	r2, r3
 8002f2a:	d001      	beq.n	8002f30 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002f2c:	2301      	movs	r3, #1
 8002f2e:	e032      	b.n	8002f96 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f003 0304 	and.w	r3, r3, #4
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d008      	beq.n	8002f4e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f3c:	4b19      	ldr	r3, [pc, #100]	@ (8002fa4 <HAL_RCC_ClockConfig+0x1c8>)
 8002f3e:	689b      	ldr	r3, [r3, #8]
 8002f40:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	68db      	ldr	r3, [r3, #12]
 8002f48:	4916      	ldr	r1, [pc, #88]	@ (8002fa4 <HAL_RCC_ClockConfig+0x1c8>)
 8002f4a:	4313      	orrs	r3, r2
 8002f4c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f003 0308 	and.w	r3, r3, #8
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d009      	beq.n	8002f6e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002f5a:	4b12      	ldr	r3, [pc, #72]	@ (8002fa4 <HAL_RCC_ClockConfig+0x1c8>)
 8002f5c:	689b      	ldr	r3, [r3, #8]
 8002f5e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	691b      	ldr	r3, [r3, #16]
 8002f66:	00db      	lsls	r3, r3, #3
 8002f68:	490e      	ldr	r1, [pc, #56]	@ (8002fa4 <HAL_RCC_ClockConfig+0x1c8>)
 8002f6a:	4313      	orrs	r3, r2
 8002f6c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002f6e:	f000 f821 	bl	8002fb4 <HAL_RCC_GetSysClockFreq>
 8002f72:	4602      	mov	r2, r0
 8002f74:	4b0b      	ldr	r3, [pc, #44]	@ (8002fa4 <HAL_RCC_ClockConfig+0x1c8>)
 8002f76:	689b      	ldr	r3, [r3, #8]
 8002f78:	091b      	lsrs	r3, r3, #4
 8002f7a:	f003 030f 	and.w	r3, r3, #15
 8002f7e:	490a      	ldr	r1, [pc, #40]	@ (8002fa8 <HAL_RCC_ClockConfig+0x1cc>)
 8002f80:	5ccb      	ldrb	r3, [r1, r3]
 8002f82:	fa22 f303 	lsr.w	r3, r2, r3
 8002f86:	4a09      	ldr	r2, [pc, #36]	@ (8002fac <HAL_RCC_ClockConfig+0x1d0>)
 8002f88:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002f8a:	4b09      	ldr	r3, [pc, #36]	@ (8002fb0 <HAL_RCC_ClockConfig+0x1d4>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	4618      	mov	r0, r3
 8002f90:	f7fe fb60 	bl	8001654 <HAL_InitTick>

  return HAL_OK;
 8002f94:	2300      	movs	r3, #0
}
 8002f96:	4618      	mov	r0, r3
 8002f98:	3710      	adds	r7, #16
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	bd80      	pop	{r7, pc}
 8002f9e:	bf00      	nop
 8002fa0:	40023c00 	.word	0x40023c00
 8002fa4:	40023800 	.word	0x40023800
 8002fa8:	08005174 	.word	0x08005174
 8002fac:	20000004 	.word	0x20000004
 8002fb0:	2000000c 	.word	0x2000000c

08002fb4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002fb4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002fb8:	b090      	sub	sp, #64	@ 0x40
 8002fba:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	637b      	str	r3, [r7, #52]	@ 0x34
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 8002fc8:	2300      	movs	r3, #0
 8002fca:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002fcc:	4b59      	ldr	r3, [pc, #356]	@ (8003134 <HAL_RCC_GetSysClockFreq+0x180>)
 8002fce:	689b      	ldr	r3, [r3, #8]
 8002fd0:	f003 030c 	and.w	r3, r3, #12
 8002fd4:	2b08      	cmp	r3, #8
 8002fd6:	d00d      	beq.n	8002ff4 <HAL_RCC_GetSysClockFreq+0x40>
 8002fd8:	2b08      	cmp	r3, #8
 8002fda:	f200 80a1 	bhi.w	8003120 <HAL_RCC_GetSysClockFreq+0x16c>
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d002      	beq.n	8002fe8 <HAL_RCC_GetSysClockFreq+0x34>
 8002fe2:	2b04      	cmp	r3, #4
 8002fe4:	d003      	beq.n	8002fee <HAL_RCC_GetSysClockFreq+0x3a>
 8002fe6:	e09b      	b.n	8003120 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002fe8:	4b53      	ldr	r3, [pc, #332]	@ (8003138 <HAL_RCC_GetSysClockFreq+0x184>)
 8002fea:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002fec:	e09b      	b.n	8003126 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002fee:	4b53      	ldr	r3, [pc, #332]	@ (800313c <HAL_RCC_GetSysClockFreq+0x188>)
 8002ff0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002ff2:	e098      	b.n	8003126 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002ff4:	4b4f      	ldr	r3, [pc, #316]	@ (8003134 <HAL_RCC_GetSysClockFreq+0x180>)
 8002ff6:	685b      	ldr	r3, [r3, #4]
 8002ff8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002ffc:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002ffe:	4b4d      	ldr	r3, [pc, #308]	@ (8003134 <HAL_RCC_GetSysClockFreq+0x180>)
 8003000:	685b      	ldr	r3, [r3, #4]
 8003002:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003006:	2b00      	cmp	r3, #0
 8003008:	d028      	beq.n	800305c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800300a:	4b4a      	ldr	r3, [pc, #296]	@ (8003134 <HAL_RCC_GetSysClockFreq+0x180>)
 800300c:	685b      	ldr	r3, [r3, #4]
 800300e:	099b      	lsrs	r3, r3, #6
 8003010:	2200      	movs	r2, #0
 8003012:	623b      	str	r3, [r7, #32]
 8003014:	627a      	str	r2, [r7, #36]	@ 0x24
 8003016:	6a3b      	ldr	r3, [r7, #32]
 8003018:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800301c:	2100      	movs	r1, #0
 800301e:	4b47      	ldr	r3, [pc, #284]	@ (800313c <HAL_RCC_GetSysClockFreq+0x188>)
 8003020:	fb03 f201 	mul.w	r2, r3, r1
 8003024:	2300      	movs	r3, #0
 8003026:	fb00 f303 	mul.w	r3, r0, r3
 800302a:	4413      	add	r3, r2
 800302c:	4a43      	ldr	r2, [pc, #268]	@ (800313c <HAL_RCC_GetSysClockFreq+0x188>)
 800302e:	fba0 1202 	umull	r1, r2, r0, r2
 8003032:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003034:	460a      	mov	r2, r1
 8003036:	62ba      	str	r2, [r7, #40]	@ 0x28
 8003038:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800303a:	4413      	add	r3, r2
 800303c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800303e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003040:	2200      	movs	r2, #0
 8003042:	61bb      	str	r3, [r7, #24]
 8003044:	61fa      	str	r2, [r7, #28]
 8003046:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800304a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800304e:	f7fd f8f3 	bl	8000238 <__aeabi_uldivmod>
 8003052:	4602      	mov	r2, r0
 8003054:	460b      	mov	r3, r1
 8003056:	4613      	mov	r3, r2
 8003058:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800305a:	e053      	b.n	8003104 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800305c:	4b35      	ldr	r3, [pc, #212]	@ (8003134 <HAL_RCC_GetSysClockFreq+0x180>)
 800305e:	685b      	ldr	r3, [r3, #4]
 8003060:	099b      	lsrs	r3, r3, #6
 8003062:	2200      	movs	r2, #0
 8003064:	613b      	str	r3, [r7, #16]
 8003066:	617a      	str	r2, [r7, #20]
 8003068:	693b      	ldr	r3, [r7, #16]
 800306a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800306e:	f04f 0b00 	mov.w	fp, #0
 8003072:	4652      	mov	r2, sl
 8003074:	465b      	mov	r3, fp
 8003076:	f04f 0000 	mov.w	r0, #0
 800307a:	f04f 0100 	mov.w	r1, #0
 800307e:	0159      	lsls	r1, r3, #5
 8003080:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003084:	0150      	lsls	r0, r2, #5
 8003086:	4602      	mov	r2, r0
 8003088:	460b      	mov	r3, r1
 800308a:	ebb2 080a 	subs.w	r8, r2, sl
 800308e:	eb63 090b 	sbc.w	r9, r3, fp
 8003092:	f04f 0200 	mov.w	r2, #0
 8003096:	f04f 0300 	mov.w	r3, #0
 800309a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800309e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80030a2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80030a6:	ebb2 0408 	subs.w	r4, r2, r8
 80030aa:	eb63 0509 	sbc.w	r5, r3, r9
 80030ae:	f04f 0200 	mov.w	r2, #0
 80030b2:	f04f 0300 	mov.w	r3, #0
 80030b6:	00eb      	lsls	r3, r5, #3
 80030b8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80030bc:	00e2      	lsls	r2, r4, #3
 80030be:	4614      	mov	r4, r2
 80030c0:	461d      	mov	r5, r3
 80030c2:	eb14 030a 	adds.w	r3, r4, sl
 80030c6:	603b      	str	r3, [r7, #0]
 80030c8:	eb45 030b 	adc.w	r3, r5, fp
 80030cc:	607b      	str	r3, [r7, #4]
 80030ce:	f04f 0200 	mov.w	r2, #0
 80030d2:	f04f 0300 	mov.w	r3, #0
 80030d6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80030da:	4629      	mov	r1, r5
 80030dc:	028b      	lsls	r3, r1, #10
 80030de:	4621      	mov	r1, r4
 80030e0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80030e4:	4621      	mov	r1, r4
 80030e6:	028a      	lsls	r2, r1, #10
 80030e8:	4610      	mov	r0, r2
 80030ea:	4619      	mov	r1, r3
 80030ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80030ee:	2200      	movs	r2, #0
 80030f0:	60bb      	str	r3, [r7, #8]
 80030f2:	60fa      	str	r2, [r7, #12]
 80030f4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80030f8:	f7fd f89e 	bl	8000238 <__aeabi_uldivmod>
 80030fc:	4602      	mov	r2, r0
 80030fe:	460b      	mov	r3, r1
 8003100:	4613      	mov	r3, r2
 8003102:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003104:	4b0b      	ldr	r3, [pc, #44]	@ (8003134 <HAL_RCC_GetSysClockFreq+0x180>)
 8003106:	685b      	ldr	r3, [r3, #4]
 8003108:	0c1b      	lsrs	r3, r3, #16
 800310a:	f003 0303 	and.w	r3, r3, #3
 800310e:	3301      	adds	r3, #1
 8003110:	005b      	lsls	r3, r3, #1
 8003112:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8003114:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003116:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003118:	fbb2 f3f3 	udiv	r3, r2, r3
 800311c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800311e:	e002      	b.n	8003126 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003120:	4b05      	ldr	r3, [pc, #20]	@ (8003138 <HAL_RCC_GetSysClockFreq+0x184>)
 8003122:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003124:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003126:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8003128:	4618      	mov	r0, r3
 800312a:	3740      	adds	r7, #64	@ 0x40
 800312c:	46bd      	mov	sp, r7
 800312e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003132:	bf00      	nop
 8003134:	40023800 	.word	0x40023800
 8003138:	00f42400 	.word	0x00f42400
 800313c:	017d7840 	.word	0x017d7840

08003140 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b088      	sub	sp, #32
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003148:	2300      	movs	r3, #0
 800314a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800314c:	2300      	movs	r3, #0
 800314e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003150:	2300      	movs	r3, #0
 8003152:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003154:	2300      	movs	r3, #0
 8003156:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003158:	2300      	movs	r3, #0
 800315a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f003 0301 	and.w	r3, r3, #1
 8003164:	2b00      	cmp	r3, #0
 8003166:	d012      	beq.n	800318e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003168:	4b69      	ldr	r3, [pc, #420]	@ (8003310 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800316a:	689b      	ldr	r3, [r3, #8]
 800316c:	4a68      	ldr	r2, [pc, #416]	@ (8003310 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800316e:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8003172:	6093      	str	r3, [r2, #8]
 8003174:	4b66      	ldr	r3, [pc, #408]	@ (8003310 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003176:	689a      	ldr	r2, [r3, #8]
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800317c:	4964      	ldr	r1, [pc, #400]	@ (8003310 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800317e:	4313      	orrs	r3, r2
 8003180:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003186:	2b00      	cmp	r3, #0
 8003188:	d101      	bne.n	800318e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800318a:	2301      	movs	r3, #1
 800318c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003196:	2b00      	cmp	r3, #0
 8003198:	d017      	beq.n	80031ca <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800319a:	4b5d      	ldr	r3, [pc, #372]	@ (8003310 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800319c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80031a0:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031a8:	4959      	ldr	r1, [pc, #356]	@ (8003310 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80031aa:	4313      	orrs	r3, r2
 80031ac:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031b4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80031b8:	d101      	bne.n	80031be <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80031ba:	2301      	movs	r3, #1
 80031bc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d101      	bne.n	80031ca <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80031c6:	2301      	movs	r3, #1
 80031c8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d017      	beq.n	8003206 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80031d6:	4b4e      	ldr	r3, [pc, #312]	@ (8003310 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80031d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80031dc:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031e4:	494a      	ldr	r1, [pc, #296]	@ (8003310 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80031e6:	4313      	orrs	r3, r2
 80031e8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031f0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80031f4:	d101      	bne.n	80031fa <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80031f6:	2301      	movs	r3, #1
 80031f8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d101      	bne.n	8003206 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003202:	2301      	movs	r3, #1
 8003204:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800320e:	2b00      	cmp	r3, #0
 8003210:	d001      	beq.n	8003216 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003212:	2301      	movs	r3, #1
 8003214:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f003 0320 	and.w	r3, r3, #32
 800321e:	2b00      	cmp	r3, #0
 8003220:	f000 808b 	beq.w	800333a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003224:	4b3a      	ldr	r3, [pc, #232]	@ (8003310 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003226:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003228:	4a39      	ldr	r2, [pc, #228]	@ (8003310 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800322a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800322e:	6413      	str	r3, [r2, #64]	@ 0x40
 8003230:	4b37      	ldr	r3, [pc, #220]	@ (8003310 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003232:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003234:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003238:	60bb      	str	r3, [r7, #8]
 800323a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800323c:	4b35      	ldr	r3, [pc, #212]	@ (8003314 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	4a34      	ldr	r2, [pc, #208]	@ (8003314 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003242:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003246:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003248:	f7fe fa48 	bl	80016dc <HAL_GetTick>
 800324c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800324e:	e008      	b.n	8003262 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003250:	f7fe fa44 	bl	80016dc <HAL_GetTick>
 8003254:	4602      	mov	r2, r0
 8003256:	697b      	ldr	r3, [r7, #20]
 8003258:	1ad3      	subs	r3, r2, r3
 800325a:	2b64      	cmp	r3, #100	@ 0x64
 800325c:	d901      	bls.n	8003262 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800325e:	2303      	movs	r3, #3
 8003260:	e38f      	b.n	8003982 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003262:	4b2c      	ldr	r3, [pc, #176]	@ (8003314 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800326a:	2b00      	cmp	r3, #0
 800326c:	d0f0      	beq.n	8003250 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800326e:	4b28      	ldr	r3, [pc, #160]	@ (8003310 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003270:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003272:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003276:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003278:	693b      	ldr	r3, [r7, #16]
 800327a:	2b00      	cmp	r3, #0
 800327c:	d035      	beq.n	80032ea <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003282:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003286:	693a      	ldr	r2, [r7, #16]
 8003288:	429a      	cmp	r2, r3
 800328a:	d02e      	beq.n	80032ea <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800328c:	4b20      	ldr	r3, [pc, #128]	@ (8003310 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800328e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003290:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003294:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003296:	4b1e      	ldr	r3, [pc, #120]	@ (8003310 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003298:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800329a:	4a1d      	ldr	r2, [pc, #116]	@ (8003310 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800329c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80032a0:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80032a2:	4b1b      	ldr	r3, [pc, #108]	@ (8003310 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032a6:	4a1a      	ldr	r2, [pc, #104]	@ (8003310 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032a8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80032ac:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80032ae:	4a18      	ldr	r2, [pc, #96]	@ (8003310 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032b0:	693b      	ldr	r3, [r7, #16]
 80032b2:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80032b4:	4b16      	ldr	r3, [pc, #88]	@ (8003310 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032b8:	f003 0301 	and.w	r3, r3, #1
 80032bc:	2b01      	cmp	r3, #1
 80032be:	d114      	bne.n	80032ea <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032c0:	f7fe fa0c 	bl	80016dc <HAL_GetTick>
 80032c4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032c6:	e00a      	b.n	80032de <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80032c8:	f7fe fa08 	bl	80016dc <HAL_GetTick>
 80032cc:	4602      	mov	r2, r0
 80032ce:	697b      	ldr	r3, [r7, #20]
 80032d0:	1ad3      	subs	r3, r2, r3
 80032d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d901      	bls.n	80032de <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80032da:	2303      	movs	r3, #3
 80032dc:	e351      	b.n	8003982 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032de:	4b0c      	ldr	r3, [pc, #48]	@ (8003310 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032e2:	f003 0302 	and.w	r3, r3, #2
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d0ee      	beq.n	80032c8 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032ee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80032f2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80032f6:	d111      	bne.n	800331c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80032f8:	4b05      	ldr	r3, [pc, #20]	@ (8003310 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032fa:	689b      	ldr	r3, [r3, #8]
 80032fc:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003304:	4b04      	ldr	r3, [pc, #16]	@ (8003318 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003306:	400b      	ands	r3, r1
 8003308:	4901      	ldr	r1, [pc, #4]	@ (8003310 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800330a:	4313      	orrs	r3, r2
 800330c:	608b      	str	r3, [r1, #8]
 800330e:	e00b      	b.n	8003328 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003310:	40023800 	.word	0x40023800
 8003314:	40007000 	.word	0x40007000
 8003318:	0ffffcff 	.word	0x0ffffcff
 800331c:	4bac      	ldr	r3, [pc, #688]	@ (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800331e:	689b      	ldr	r3, [r3, #8]
 8003320:	4aab      	ldr	r2, [pc, #684]	@ (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003322:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8003326:	6093      	str	r3, [r2, #8]
 8003328:	4ba9      	ldr	r3, [pc, #676]	@ (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800332a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003330:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003334:	49a6      	ldr	r1, [pc, #664]	@ (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003336:	4313      	orrs	r3, r2
 8003338:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f003 0310 	and.w	r3, r3, #16
 8003342:	2b00      	cmp	r3, #0
 8003344:	d010      	beq.n	8003368 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003346:	4ba2      	ldr	r3, [pc, #648]	@ (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003348:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800334c:	4aa0      	ldr	r2, [pc, #640]	@ (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800334e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003352:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8003356:	4b9e      	ldr	r3, [pc, #632]	@ (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003358:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003360:	499b      	ldr	r1, [pc, #620]	@ (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003362:	4313      	orrs	r3, r2
 8003364:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003370:	2b00      	cmp	r3, #0
 8003372:	d00a      	beq.n	800338a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003374:	4b96      	ldr	r3, [pc, #600]	@ (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003376:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800337a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003382:	4993      	ldr	r1, [pc, #588]	@ (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003384:	4313      	orrs	r3, r2
 8003386:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003392:	2b00      	cmp	r3, #0
 8003394:	d00a      	beq.n	80033ac <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003396:	4b8e      	ldr	r3, [pc, #568]	@ (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003398:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800339c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80033a4:	498a      	ldr	r1, [pc, #552]	@ (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80033a6:	4313      	orrs	r3, r2
 80033a8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d00a      	beq.n	80033ce <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80033b8:	4b85      	ldr	r3, [pc, #532]	@ (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80033ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033be:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80033c6:	4982      	ldr	r1, [pc, #520]	@ (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80033c8:	4313      	orrs	r3, r2
 80033ca:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d00a      	beq.n	80033f0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80033da:	4b7d      	ldr	r3, [pc, #500]	@ (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80033dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033e0:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033e8:	4979      	ldr	r1, [pc, #484]	@ (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80033ea:	4313      	orrs	r3, r2
 80033ec:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d00a      	beq.n	8003412 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80033fc:	4b74      	ldr	r3, [pc, #464]	@ (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80033fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003402:	f023 0203 	bic.w	r2, r3, #3
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800340a:	4971      	ldr	r1, [pc, #452]	@ (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800340c:	4313      	orrs	r3, r2
 800340e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800341a:	2b00      	cmp	r3, #0
 800341c:	d00a      	beq.n	8003434 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800341e:	4b6c      	ldr	r3, [pc, #432]	@ (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003420:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003424:	f023 020c 	bic.w	r2, r3, #12
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800342c:	4968      	ldr	r1, [pc, #416]	@ (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800342e:	4313      	orrs	r3, r2
 8003430:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800343c:	2b00      	cmp	r3, #0
 800343e:	d00a      	beq.n	8003456 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003440:	4b63      	ldr	r3, [pc, #396]	@ (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003442:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003446:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800344e:	4960      	ldr	r1, [pc, #384]	@ (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003450:	4313      	orrs	r3, r2
 8003452:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800345e:	2b00      	cmp	r3, #0
 8003460:	d00a      	beq.n	8003478 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003462:	4b5b      	ldr	r3, [pc, #364]	@ (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003464:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003468:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003470:	4957      	ldr	r1, [pc, #348]	@ (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003472:	4313      	orrs	r3, r2
 8003474:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003480:	2b00      	cmp	r3, #0
 8003482:	d00a      	beq.n	800349a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003484:	4b52      	ldr	r3, [pc, #328]	@ (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003486:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800348a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003492:	494f      	ldr	r1, [pc, #316]	@ (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003494:	4313      	orrs	r3, r2
 8003496:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d00a      	beq.n	80034bc <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80034a6:	4b4a      	ldr	r3, [pc, #296]	@ (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80034a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034ac:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034b4:	4946      	ldr	r1, [pc, #280]	@ (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80034b6:	4313      	orrs	r3, r2
 80034b8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d00a      	beq.n	80034de <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80034c8:	4b41      	ldr	r3, [pc, #260]	@ (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80034ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034ce:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034d6:	493e      	ldr	r1, [pc, #248]	@ (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80034d8:	4313      	orrs	r3, r2
 80034da:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d00a      	beq.n	8003500 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80034ea:	4b39      	ldr	r3, [pc, #228]	@ (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80034ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034f0:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80034f8:	4935      	ldr	r1, [pc, #212]	@ (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80034fa:	4313      	orrs	r3, r2
 80034fc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003508:	2b00      	cmp	r3, #0
 800350a:	d00a      	beq.n	8003522 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800350c:	4b30      	ldr	r3, [pc, #192]	@ (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800350e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003512:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800351a:	492d      	ldr	r1, [pc, #180]	@ (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800351c:	4313      	orrs	r3, r2
 800351e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800352a:	2b00      	cmp	r3, #0
 800352c:	d011      	beq.n	8003552 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800352e:	4b28      	ldr	r3, [pc, #160]	@ (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003530:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003534:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800353c:	4924      	ldr	r1, [pc, #144]	@ (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800353e:	4313      	orrs	r3, r2
 8003540:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003548:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800354c:	d101      	bne.n	8003552 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800354e:	2301      	movs	r3, #1
 8003550:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f003 0308 	and.w	r3, r3, #8
 800355a:	2b00      	cmp	r3, #0
 800355c:	d001      	beq.n	8003562 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800355e:	2301      	movs	r3, #1
 8003560:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800356a:	2b00      	cmp	r3, #0
 800356c:	d00a      	beq.n	8003584 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800356e:	4b18      	ldr	r3, [pc, #96]	@ (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003570:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003574:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800357c:	4914      	ldr	r1, [pc, #80]	@ (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800357e:	4313      	orrs	r3, r2
 8003580:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800358c:	2b00      	cmp	r3, #0
 800358e:	d00b      	beq.n	80035a8 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003590:	4b0f      	ldr	r3, [pc, #60]	@ (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003592:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003596:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80035a0:	490b      	ldr	r1, [pc, #44]	@ (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80035a2:	4313      	orrs	r3, r2
 80035a4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d00f      	beq.n	80035d4 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80035b4:	4b06      	ldr	r3, [pc, #24]	@ (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80035b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035ba:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80035c4:	4902      	ldr	r1, [pc, #8]	@ (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80035c6:	4313      	orrs	r3, r2
 80035c8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80035cc:	e002      	b.n	80035d4 <HAL_RCCEx_PeriphCLKConfig+0x494>
 80035ce:	bf00      	nop
 80035d0:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d00b      	beq.n	80035f8 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80035e0:	4b8a      	ldr	r3, [pc, #552]	@ (800380c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80035e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80035e6:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035f0:	4986      	ldr	r1, [pc, #536]	@ (800380c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80035f2:	4313      	orrs	r3, r2
 80035f4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003600:	2b00      	cmp	r3, #0
 8003602:	d00b      	beq.n	800361c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003604:	4b81      	ldr	r3, [pc, #516]	@ (800380c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003606:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800360a:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003614:	497d      	ldr	r1, [pc, #500]	@ (800380c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003616:	4313      	orrs	r3, r2
 8003618:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800361c:	69fb      	ldr	r3, [r7, #28]
 800361e:	2b01      	cmp	r3, #1
 8003620:	d006      	beq.n	8003630 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800362a:	2b00      	cmp	r3, #0
 800362c:	f000 80d6 	beq.w	80037dc <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003630:	4b76      	ldr	r3, [pc, #472]	@ (800380c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	4a75      	ldr	r2, [pc, #468]	@ (800380c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003636:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800363a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800363c:	f7fe f84e 	bl	80016dc <HAL_GetTick>
 8003640:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003642:	e008      	b.n	8003656 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003644:	f7fe f84a 	bl	80016dc <HAL_GetTick>
 8003648:	4602      	mov	r2, r0
 800364a:	697b      	ldr	r3, [r7, #20]
 800364c:	1ad3      	subs	r3, r2, r3
 800364e:	2b64      	cmp	r3, #100	@ 0x64
 8003650:	d901      	bls.n	8003656 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003652:	2303      	movs	r3, #3
 8003654:	e195      	b.n	8003982 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003656:	4b6d      	ldr	r3, [pc, #436]	@ (800380c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800365e:	2b00      	cmp	r3, #0
 8003660:	d1f0      	bne.n	8003644 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f003 0301 	and.w	r3, r3, #1
 800366a:	2b00      	cmp	r3, #0
 800366c:	d021      	beq.n	80036b2 <HAL_RCCEx_PeriphCLKConfig+0x572>
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003672:	2b00      	cmp	r3, #0
 8003674:	d11d      	bne.n	80036b2 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003676:	4b65      	ldr	r3, [pc, #404]	@ (800380c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003678:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800367c:	0c1b      	lsrs	r3, r3, #16
 800367e:	f003 0303 	and.w	r3, r3, #3
 8003682:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003684:	4b61      	ldr	r3, [pc, #388]	@ (800380c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003686:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800368a:	0e1b      	lsrs	r3, r3, #24
 800368c:	f003 030f 	and.w	r3, r3, #15
 8003690:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	685b      	ldr	r3, [r3, #4]
 8003696:	019a      	lsls	r2, r3, #6
 8003698:	693b      	ldr	r3, [r7, #16]
 800369a:	041b      	lsls	r3, r3, #16
 800369c:	431a      	orrs	r2, r3
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	061b      	lsls	r3, r3, #24
 80036a2:	431a      	orrs	r2, r3
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	689b      	ldr	r3, [r3, #8]
 80036a8:	071b      	lsls	r3, r3, #28
 80036aa:	4958      	ldr	r1, [pc, #352]	@ (800380c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80036ac:	4313      	orrs	r3, r2
 80036ae:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d004      	beq.n	80036c8 <HAL_RCCEx_PeriphCLKConfig+0x588>
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036c2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80036c6:	d00a      	beq.n	80036de <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d02e      	beq.n	8003732 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036d8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80036dc:	d129      	bne.n	8003732 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80036de:	4b4b      	ldr	r3, [pc, #300]	@ (800380c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80036e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80036e4:	0c1b      	lsrs	r3, r3, #16
 80036e6:	f003 0303 	and.w	r3, r3, #3
 80036ea:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80036ec:	4b47      	ldr	r3, [pc, #284]	@ (800380c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80036ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80036f2:	0f1b      	lsrs	r3, r3, #28
 80036f4:	f003 0307 	and.w	r3, r3, #7
 80036f8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	685b      	ldr	r3, [r3, #4]
 80036fe:	019a      	lsls	r2, r3, #6
 8003700:	693b      	ldr	r3, [r7, #16]
 8003702:	041b      	lsls	r3, r3, #16
 8003704:	431a      	orrs	r2, r3
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	68db      	ldr	r3, [r3, #12]
 800370a:	061b      	lsls	r3, r3, #24
 800370c:	431a      	orrs	r2, r3
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	071b      	lsls	r3, r3, #28
 8003712:	493e      	ldr	r1, [pc, #248]	@ (800380c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003714:	4313      	orrs	r3, r2
 8003716:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800371a:	4b3c      	ldr	r3, [pc, #240]	@ (800380c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800371c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003720:	f023 021f 	bic.w	r2, r3, #31
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003728:	3b01      	subs	r3, #1
 800372a:	4938      	ldr	r1, [pc, #224]	@ (800380c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800372c:	4313      	orrs	r3, r2
 800372e:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800373a:	2b00      	cmp	r3, #0
 800373c:	d01d      	beq.n	800377a <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800373e:	4b33      	ldr	r3, [pc, #204]	@ (800380c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003740:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003744:	0e1b      	lsrs	r3, r3, #24
 8003746:	f003 030f 	and.w	r3, r3, #15
 800374a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800374c:	4b2f      	ldr	r3, [pc, #188]	@ (800380c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800374e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003752:	0f1b      	lsrs	r3, r3, #28
 8003754:	f003 0307 	and.w	r3, r3, #7
 8003758:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	685b      	ldr	r3, [r3, #4]
 800375e:	019a      	lsls	r2, r3, #6
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	691b      	ldr	r3, [r3, #16]
 8003764:	041b      	lsls	r3, r3, #16
 8003766:	431a      	orrs	r2, r3
 8003768:	693b      	ldr	r3, [r7, #16]
 800376a:	061b      	lsls	r3, r3, #24
 800376c:	431a      	orrs	r2, r3
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	071b      	lsls	r3, r3, #28
 8003772:	4926      	ldr	r1, [pc, #152]	@ (800380c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003774:	4313      	orrs	r3, r2
 8003776:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003782:	2b00      	cmp	r3, #0
 8003784:	d011      	beq.n	80037aa <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	685b      	ldr	r3, [r3, #4]
 800378a:	019a      	lsls	r2, r3, #6
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	691b      	ldr	r3, [r3, #16]
 8003790:	041b      	lsls	r3, r3, #16
 8003792:	431a      	orrs	r2, r3
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	68db      	ldr	r3, [r3, #12]
 8003798:	061b      	lsls	r3, r3, #24
 800379a:	431a      	orrs	r2, r3
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	689b      	ldr	r3, [r3, #8]
 80037a0:	071b      	lsls	r3, r3, #28
 80037a2:	491a      	ldr	r1, [pc, #104]	@ (800380c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80037a4:	4313      	orrs	r3, r2
 80037a6:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80037aa:	4b18      	ldr	r3, [pc, #96]	@ (800380c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	4a17      	ldr	r2, [pc, #92]	@ (800380c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80037b0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80037b4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80037b6:	f7fd ff91 	bl	80016dc <HAL_GetTick>
 80037ba:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80037bc:	e008      	b.n	80037d0 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80037be:	f7fd ff8d 	bl	80016dc <HAL_GetTick>
 80037c2:	4602      	mov	r2, r0
 80037c4:	697b      	ldr	r3, [r7, #20]
 80037c6:	1ad3      	subs	r3, r2, r3
 80037c8:	2b64      	cmp	r3, #100	@ 0x64
 80037ca:	d901      	bls.n	80037d0 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80037cc:	2303      	movs	r3, #3
 80037ce:	e0d8      	b.n	8003982 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80037d0:	4b0e      	ldr	r3, [pc, #56]	@ (800380c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d0f0      	beq.n	80037be <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80037dc:	69bb      	ldr	r3, [r7, #24]
 80037de:	2b01      	cmp	r3, #1
 80037e0:	f040 80ce 	bne.w	8003980 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80037e4:	4b09      	ldr	r3, [pc, #36]	@ (800380c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	4a08      	ldr	r2, [pc, #32]	@ (800380c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80037ea:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80037ee:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80037f0:	f7fd ff74 	bl	80016dc <HAL_GetTick>
 80037f4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80037f6:	e00b      	b.n	8003810 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80037f8:	f7fd ff70 	bl	80016dc <HAL_GetTick>
 80037fc:	4602      	mov	r2, r0
 80037fe:	697b      	ldr	r3, [r7, #20]
 8003800:	1ad3      	subs	r3, r2, r3
 8003802:	2b64      	cmp	r3, #100	@ 0x64
 8003804:	d904      	bls.n	8003810 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003806:	2303      	movs	r3, #3
 8003808:	e0bb      	b.n	8003982 <HAL_RCCEx_PeriphCLKConfig+0x842>
 800380a:	bf00      	nop
 800380c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003810:	4b5e      	ldr	r3, [pc, #376]	@ (800398c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003818:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800381c:	d0ec      	beq.n	80037f8 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003826:	2b00      	cmp	r3, #0
 8003828:	d003      	beq.n	8003832 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800382e:	2b00      	cmp	r3, #0
 8003830:	d009      	beq.n	8003846 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800383a:	2b00      	cmp	r3, #0
 800383c:	d02e      	beq.n	800389c <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003842:	2b00      	cmp	r3, #0
 8003844:	d12a      	bne.n	800389c <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003846:	4b51      	ldr	r3, [pc, #324]	@ (800398c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003848:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800384c:	0c1b      	lsrs	r3, r3, #16
 800384e:	f003 0303 	and.w	r3, r3, #3
 8003852:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003854:	4b4d      	ldr	r3, [pc, #308]	@ (800398c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003856:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800385a:	0f1b      	lsrs	r3, r3, #28
 800385c:	f003 0307 	and.w	r3, r3, #7
 8003860:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	695b      	ldr	r3, [r3, #20]
 8003866:	019a      	lsls	r2, r3, #6
 8003868:	693b      	ldr	r3, [r7, #16]
 800386a:	041b      	lsls	r3, r3, #16
 800386c:	431a      	orrs	r2, r3
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	699b      	ldr	r3, [r3, #24]
 8003872:	061b      	lsls	r3, r3, #24
 8003874:	431a      	orrs	r2, r3
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	071b      	lsls	r3, r3, #28
 800387a:	4944      	ldr	r1, [pc, #272]	@ (800398c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800387c:	4313      	orrs	r3, r2
 800387e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003882:	4b42      	ldr	r3, [pc, #264]	@ (800398c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003884:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003888:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003890:	3b01      	subs	r3, #1
 8003892:	021b      	lsls	r3, r3, #8
 8003894:	493d      	ldr	r1, [pc, #244]	@ (800398c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003896:	4313      	orrs	r3, r2
 8003898:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d022      	beq.n	80038ee <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80038ac:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80038b0:	d11d      	bne.n	80038ee <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80038b2:	4b36      	ldr	r3, [pc, #216]	@ (800398c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80038b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038b8:	0e1b      	lsrs	r3, r3, #24
 80038ba:	f003 030f 	and.w	r3, r3, #15
 80038be:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80038c0:	4b32      	ldr	r3, [pc, #200]	@ (800398c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80038c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038c6:	0f1b      	lsrs	r3, r3, #28
 80038c8:	f003 0307 	and.w	r3, r3, #7
 80038cc:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	695b      	ldr	r3, [r3, #20]
 80038d2:	019a      	lsls	r2, r3, #6
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6a1b      	ldr	r3, [r3, #32]
 80038d8:	041b      	lsls	r3, r3, #16
 80038da:	431a      	orrs	r2, r3
 80038dc:	693b      	ldr	r3, [r7, #16]
 80038de:	061b      	lsls	r3, r3, #24
 80038e0:	431a      	orrs	r2, r3
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	071b      	lsls	r3, r3, #28
 80038e6:	4929      	ldr	r1, [pc, #164]	@ (800398c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80038e8:	4313      	orrs	r3, r2
 80038ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f003 0308 	and.w	r3, r3, #8
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d028      	beq.n	800394c <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80038fa:	4b24      	ldr	r3, [pc, #144]	@ (800398c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80038fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003900:	0e1b      	lsrs	r3, r3, #24
 8003902:	f003 030f 	and.w	r3, r3, #15
 8003906:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003908:	4b20      	ldr	r3, [pc, #128]	@ (800398c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800390a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800390e:	0c1b      	lsrs	r3, r3, #16
 8003910:	f003 0303 	and.w	r3, r3, #3
 8003914:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	695b      	ldr	r3, [r3, #20]
 800391a:	019a      	lsls	r2, r3, #6
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	041b      	lsls	r3, r3, #16
 8003920:	431a      	orrs	r2, r3
 8003922:	693b      	ldr	r3, [r7, #16]
 8003924:	061b      	lsls	r3, r3, #24
 8003926:	431a      	orrs	r2, r3
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	69db      	ldr	r3, [r3, #28]
 800392c:	071b      	lsls	r3, r3, #28
 800392e:	4917      	ldr	r1, [pc, #92]	@ (800398c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003930:	4313      	orrs	r3, r2
 8003932:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003936:	4b15      	ldr	r3, [pc, #84]	@ (800398c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003938:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800393c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003944:	4911      	ldr	r1, [pc, #68]	@ (800398c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003946:	4313      	orrs	r3, r2
 8003948:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800394c:	4b0f      	ldr	r3, [pc, #60]	@ (800398c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	4a0e      	ldr	r2, [pc, #56]	@ (800398c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003952:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003956:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003958:	f7fd fec0 	bl	80016dc <HAL_GetTick>
 800395c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800395e:	e008      	b.n	8003972 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003960:	f7fd febc 	bl	80016dc <HAL_GetTick>
 8003964:	4602      	mov	r2, r0
 8003966:	697b      	ldr	r3, [r7, #20]
 8003968:	1ad3      	subs	r3, r2, r3
 800396a:	2b64      	cmp	r3, #100	@ 0x64
 800396c:	d901      	bls.n	8003972 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800396e:	2303      	movs	r3, #3
 8003970:	e007      	b.n	8003982 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003972:	4b06      	ldr	r3, [pc, #24]	@ (800398c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800397a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800397e:	d1ef      	bne.n	8003960 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8003980:	2300      	movs	r3, #0
}
 8003982:	4618      	mov	r0, r3
 8003984:	3720      	adds	r7, #32
 8003986:	46bd      	mov	sp, r7
 8003988:	bd80      	pop	{r7, pc}
 800398a:	bf00      	nop
 800398c:	40023800 	.word	0x40023800

08003990 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8003990:	b580      	push	{r7, lr}
 8003992:	b082      	sub	sp, #8
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2b00      	cmp	r3, #0
 800399c:	d101      	bne.n	80039a2 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 800399e:	2301      	movs	r3, #1
 80039a0:	e01c      	b.n	80039dc <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	795b      	ldrb	r3, [r3, #5]
 80039a6:	b2db      	uxtb	r3, r3
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d105      	bne.n	80039b8 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2200      	movs	r2, #0
 80039b0:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 80039b2:	6878      	ldr	r0, [r7, #4]
 80039b4:	f7fd f9f8 	bl	8000da8 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2202      	movs	r2, #2
 80039bc:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	681a      	ldr	r2, [r3, #0]
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f042 0204 	orr.w	r2, r2, #4
 80039cc:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	2201      	movs	r2, #1
 80039d2:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2200      	movs	r2, #0
 80039d8:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 80039da:	2300      	movs	r3, #0
}
 80039dc:	4618      	mov	r0, r3
 80039de:	3708      	adds	r7, #8
 80039e0:	46bd      	mov	sp, r7
 80039e2:	bd80      	pop	{r7, pc}

080039e4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b084      	sub	sp, #16
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d101      	bne.n	80039f6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80039f2:	2301      	movs	r3, #1
 80039f4:	e09d      	b.n	8003b32 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d108      	bne.n	8003a10 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	685b      	ldr	r3, [r3, #4]
 8003a02:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003a06:	d009      	beq.n	8003a1c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	61da      	str	r2, [r3, #28]
 8003a0e:	e005      	b.n	8003a1c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2200      	movs	r2, #0
 8003a14:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	2200      	movs	r2, #0
 8003a1a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2200      	movs	r2, #0
 8003a20:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003a28:	b2db      	uxtb	r3, r3
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d106      	bne.n	8003a3c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	2200      	movs	r2, #0
 8003a32:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003a36:	6878      	ldr	r0, [r7, #4]
 8003a38:	f7fd f9ea 	bl	8000e10 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2202      	movs	r2, #2
 8003a40:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	681a      	ldr	r2, [r3, #0]
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003a52:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	68db      	ldr	r3, [r3, #12]
 8003a58:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003a5c:	d902      	bls.n	8003a64 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003a5e:	2300      	movs	r3, #0
 8003a60:	60fb      	str	r3, [r7, #12]
 8003a62:	e002      	b.n	8003a6a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003a64:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003a68:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	68db      	ldr	r3, [r3, #12]
 8003a6e:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8003a72:	d007      	beq.n	8003a84 <HAL_SPI_Init+0xa0>
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	68db      	ldr	r3, [r3, #12]
 8003a78:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003a7c:	d002      	beq.n	8003a84 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2200      	movs	r2, #0
 8003a82:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	685b      	ldr	r3, [r3, #4]
 8003a88:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	689b      	ldr	r3, [r3, #8]
 8003a90:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003a94:	431a      	orrs	r2, r3
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	691b      	ldr	r3, [r3, #16]
 8003a9a:	f003 0302 	and.w	r3, r3, #2
 8003a9e:	431a      	orrs	r2, r3
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	695b      	ldr	r3, [r3, #20]
 8003aa4:	f003 0301 	and.w	r3, r3, #1
 8003aa8:	431a      	orrs	r2, r3
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	699b      	ldr	r3, [r3, #24]
 8003aae:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003ab2:	431a      	orrs	r2, r3
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	69db      	ldr	r3, [r3, #28]
 8003ab8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003abc:	431a      	orrs	r2, r3
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6a1b      	ldr	r3, [r3, #32]
 8003ac2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ac6:	ea42 0103 	orr.w	r1, r2, r3
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ace:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	430a      	orrs	r2, r1
 8003ad8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	699b      	ldr	r3, [r3, #24]
 8003ade:	0c1b      	lsrs	r3, r3, #16
 8003ae0:	f003 0204 	and.w	r2, r3, #4
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ae8:	f003 0310 	and.w	r3, r3, #16
 8003aec:	431a      	orrs	r2, r3
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003af2:	f003 0308 	and.w	r3, r3, #8
 8003af6:	431a      	orrs	r2, r3
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	68db      	ldr	r3, [r3, #12]
 8003afc:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8003b00:	ea42 0103 	orr.w	r1, r2, r3
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	430a      	orrs	r2, r1
 8003b10:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	69da      	ldr	r2, [r3, #28]
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003b20:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	2200      	movs	r2, #0
 8003b26:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2201      	movs	r2, #1
 8003b2c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8003b30:	2300      	movs	r3, #0
}
 8003b32:	4618      	mov	r0, r3
 8003b34:	3710      	adds	r7, #16
 8003b36:	46bd      	mov	sp, r7
 8003b38:	bd80      	pop	{r7, pc}

08003b3a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b3a:	b580      	push	{r7, lr}
 8003b3c:	b088      	sub	sp, #32
 8003b3e:	af00      	add	r7, sp, #0
 8003b40:	60f8      	str	r0, [r7, #12]
 8003b42:	60b9      	str	r1, [r7, #8]
 8003b44:	603b      	str	r3, [r7, #0]
 8003b46:	4613      	mov	r3, r2
 8003b48:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003b54:	2b01      	cmp	r3, #1
 8003b56:	d101      	bne.n	8003b5c <HAL_SPI_Transmit+0x22>
 8003b58:	2302      	movs	r3, #2
 8003b5a:	e15f      	b.n	8003e1c <HAL_SPI_Transmit+0x2e2>
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	2201      	movs	r2, #1
 8003b60:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003b64:	f7fd fdba 	bl	80016dc <HAL_GetTick>
 8003b68:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003b6a:	88fb      	ldrh	r3, [r7, #6]
 8003b6c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003b74:	b2db      	uxtb	r3, r3
 8003b76:	2b01      	cmp	r3, #1
 8003b78:	d002      	beq.n	8003b80 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003b7a:	2302      	movs	r3, #2
 8003b7c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003b7e:	e148      	b.n	8003e12 <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8003b80:	68bb      	ldr	r3, [r7, #8]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d002      	beq.n	8003b8c <HAL_SPI_Transmit+0x52>
 8003b86:	88fb      	ldrh	r3, [r7, #6]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d102      	bne.n	8003b92 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003b8c:	2301      	movs	r3, #1
 8003b8e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003b90:	e13f      	b.n	8003e12 <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	2203      	movs	r2, #3
 8003b96:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	68ba      	ldr	r2, [r7, #8]
 8003ba4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	88fa      	ldrh	r2, [r7, #6]
 8003baa:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	88fa      	ldrh	r2, [r7, #6]
 8003bb0:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	2200      	movs	r2, #0
 8003bbc:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	2200      	movs	r2, #0
 8003bcc:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	689b      	ldr	r3, [r3, #8]
 8003bd8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003bdc:	d10f      	bne.n	8003bfe <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	681a      	ldr	r2, [r3, #0]
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003bec:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	681a      	ldr	r2, [r3, #0]
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003bfc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c08:	2b40      	cmp	r3, #64	@ 0x40
 8003c0a:	d007      	beq.n	8003c1c <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	681a      	ldr	r2, [r3, #0]
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003c1a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	68db      	ldr	r3, [r3, #12]
 8003c20:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003c24:	d94f      	bls.n	8003cc6 <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	685b      	ldr	r3, [r3, #4]
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d002      	beq.n	8003c34 <HAL_SPI_Transmit+0xfa>
 8003c2e:	8afb      	ldrh	r3, [r7, #22]
 8003c30:	2b01      	cmp	r3, #1
 8003c32:	d142      	bne.n	8003cba <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c38:	881a      	ldrh	r2, [r3, #0]
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c44:	1c9a      	adds	r2, r3, #2
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003c4e:	b29b      	uxth	r3, r3
 8003c50:	3b01      	subs	r3, #1
 8003c52:	b29a      	uxth	r2, r3
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003c58:	e02f      	b.n	8003cba <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	689b      	ldr	r3, [r3, #8]
 8003c60:	f003 0302 	and.w	r3, r3, #2
 8003c64:	2b02      	cmp	r3, #2
 8003c66:	d112      	bne.n	8003c8e <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c6c:	881a      	ldrh	r2, [r3, #0]
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c78:	1c9a      	adds	r2, r3, #2
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003c82:	b29b      	uxth	r3, r3
 8003c84:	3b01      	subs	r3, #1
 8003c86:	b29a      	uxth	r2, r3
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003c8c:	e015      	b.n	8003cba <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003c8e:	f7fd fd25 	bl	80016dc <HAL_GetTick>
 8003c92:	4602      	mov	r2, r0
 8003c94:	69bb      	ldr	r3, [r7, #24]
 8003c96:	1ad3      	subs	r3, r2, r3
 8003c98:	683a      	ldr	r2, [r7, #0]
 8003c9a:	429a      	cmp	r2, r3
 8003c9c:	d803      	bhi.n	8003ca6 <HAL_SPI_Transmit+0x16c>
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ca4:	d102      	bne.n	8003cac <HAL_SPI_Transmit+0x172>
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d106      	bne.n	8003cba <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8003cac:	2303      	movs	r3, #3
 8003cae:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	2201      	movs	r2, #1
 8003cb4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8003cb8:	e0ab      	b.n	8003e12 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003cbe:	b29b      	uxth	r3, r3
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d1ca      	bne.n	8003c5a <HAL_SPI_Transmit+0x120>
 8003cc4:	e080      	b.n	8003dc8 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	685b      	ldr	r3, [r3, #4]
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d002      	beq.n	8003cd4 <HAL_SPI_Transmit+0x19a>
 8003cce:	8afb      	ldrh	r3, [r7, #22]
 8003cd0:	2b01      	cmp	r3, #1
 8003cd2:	d174      	bne.n	8003dbe <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003cd8:	b29b      	uxth	r3, r3
 8003cda:	2b01      	cmp	r3, #1
 8003cdc:	d912      	bls.n	8003d04 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ce2:	881a      	ldrh	r2, [r3, #0]
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cee:	1c9a      	adds	r2, r3, #2
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003cf8:	b29b      	uxth	r3, r3
 8003cfa:	3b02      	subs	r3, #2
 8003cfc:	b29a      	uxth	r2, r3
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003d02:	e05c      	b.n	8003dbe <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	330c      	adds	r3, #12
 8003d0e:	7812      	ldrb	r2, [r2, #0]
 8003d10:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d16:	1c5a      	adds	r2, r3, #1
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003d20:	b29b      	uxth	r3, r3
 8003d22:	3b01      	subs	r3, #1
 8003d24:	b29a      	uxth	r2, r3
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8003d2a:	e048      	b.n	8003dbe <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	689b      	ldr	r3, [r3, #8]
 8003d32:	f003 0302 	and.w	r3, r3, #2
 8003d36:	2b02      	cmp	r3, #2
 8003d38:	d12b      	bne.n	8003d92 <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003d3e:	b29b      	uxth	r3, r3
 8003d40:	2b01      	cmp	r3, #1
 8003d42:	d912      	bls.n	8003d6a <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d48:	881a      	ldrh	r2, [r3, #0]
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d54:	1c9a      	adds	r2, r3, #2
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003d5e:	b29b      	uxth	r3, r3
 8003d60:	3b02      	subs	r3, #2
 8003d62:	b29a      	uxth	r2, r3
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003d68:	e029      	b.n	8003dbe <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	330c      	adds	r3, #12
 8003d74:	7812      	ldrb	r2, [r2, #0]
 8003d76:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d7c:	1c5a      	adds	r2, r3, #1
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003d86:	b29b      	uxth	r3, r3
 8003d88:	3b01      	subs	r3, #1
 8003d8a:	b29a      	uxth	r2, r3
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003d90:	e015      	b.n	8003dbe <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003d92:	f7fd fca3 	bl	80016dc <HAL_GetTick>
 8003d96:	4602      	mov	r2, r0
 8003d98:	69bb      	ldr	r3, [r7, #24]
 8003d9a:	1ad3      	subs	r3, r2, r3
 8003d9c:	683a      	ldr	r2, [r7, #0]
 8003d9e:	429a      	cmp	r2, r3
 8003da0:	d803      	bhi.n	8003daa <HAL_SPI_Transmit+0x270>
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003da8:	d102      	bne.n	8003db0 <HAL_SPI_Transmit+0x276>
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d106      	bne.n	8003dbe <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8003db0:	2303      	movs	r3, #3
 8003db2:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	2201      	movs	r2, #1
 8003db8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8003dbc:	e029      	b.n	8003e12 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003dc2:	b29b      	uxth	r3, r3
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d1b1      	bne.n	8003d2c <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003dc8:	69ba      	ldr	r2, [r7, #24]
 8003dca:	6839      	ldr	r1, [r7, #0]
 8003dcc:	68f8      	ldr	r0, [r7, #12]
 8003dce:	f000 f947 	bl	8004060 <SPI_EndRxTxTransaction>
 8003dd2:	4603      	mov	r3, r0
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d002      	beq.n	8003dde <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	2220      	movs	r2, #32
 8003ddc:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	689b      	ldr	r3, [r3, #8]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d10a      	bne.n	8003dfc <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003de6:	2300      	movs	r3, #0
 8003de8:	613b      	str	r3, [r7, #16]
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	68db      	ldr	r3, [r3, #12]
 8003df0:	613b      	str	r3, [r7, #16]
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	689b      	ldr	r3, [r3, #8]
 8003df8:	613b      	str	r3, [r7, #16]
 8003dfa:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d002      	beq.n	8003e0a <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8003e04:	2301      	movs	r3, #1
 8003e06:	77fb      	strb	r3, [r7, #31]
 8003e08:	e003      	b.n	8003e12 <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	2201      	movs	r2, #1
 8003e0e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	2200      	movs	r2, #0
 8003e16:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8003e1a:	7ffb      	ldrb	r3, [r7, #31]
}
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	3720      	adds	r7, #32
 8003e20:	46bd      	mov	sp, r7
 8003e22:	bd80      	pop	{r7, pc}

08003e24 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003e24:	b580      	push	{r7, lr}
 8003e26:	b088      	sub	sp, #32
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	60f8      	str	r0, [r7, #12]
 8003e2c:	60b9      	str	r1, [r7, #8]
 8003e2e:	603b      	str	r3, [r7, #0]
 8003e30:	4613      	mov	r3, r2
 8003e32:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003e34:	f7fd fc52 	bl	80016dc <HAL_GetTick>
 8003e38:	4602      	mov	r2, r0
 8003e3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e3c:	1a9b      	subs	r3, r3, r2
 8003e3e:	683a      	ldr	r2, [r7, #0]
 8003e40:	4413      	add	r3, r2
 8003e42:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003e44:	f7fd fc4a 	bl	80016dc <HAL_GetTick>
 8003e48:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003e4a:	4b39      	ldr	r3, [pc, #228]	@ (8003f30 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	015b      	lsls	r3, r3, #5
 8003e50:	0d1b      	lsrs	r3, r3, #20
 8003e52:	69fa      	ldr	r2, [r7, #28]
 8003e54:	fb02 f303 	mul.w	r3, r2, r3
 8003e58:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003e5a:	e054      	b.n	8003f06 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e62:	d050      	beq.n	8003f06 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003e64:	f7fd fc3a 	bl	80016dc <HAL_GetTick>
 8003e68:	4602      	mov	r2, r0
 8003e6a:	69bb      	ldr	r3, [r7, #24]
 8003e6c:	1ad3      	subs	r3, r2, r3
 8003e6e:	69fa      	ldr	r2, [r7, #28]
 8003e70:	429a      	cmp	r2, r3
 8003e72:	d902      	bls.n	8003e7a <SPI_WaitFlagStateUntilTimeout+0x56>
 8003e74:	69fb      	ldr	r3, [r7, #28]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d13d      	bne.n	8003ef6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	685a      	ldr	r2, [r3, #4]
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003e88:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	685b      	ldr	r3, [r3, #4]
 8003e8e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003e92:	d111      	bne.n	8003eb8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	689b      	ldr	r3, [r3, #8]
 8003e98:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003e9c:	d004      	beq.n	8003ea8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	689b      	ldr	r3, [r3, #8]
 8003ea2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003ea6:	d107      	bne.n	8003eb8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	681a      	ldr	r2, [r3, #0]
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003eb6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ebc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003ec0:	d10f      	bne.n	8003ee2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	681a      	ldr	r2, [r3, #0]
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003ed0:	601a      	str	r2, [r3, #0]
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	681a      	ldr	r2, [r3, #0]
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003ee0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	2201      	movs	r2, #1
 8003ee6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	2200      	movs	r2, #0
 8003eee:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8003ef2:	2303      	movs	r3, #3
 8003ef4:	e017      	b.n	8003f26 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003ef6:	697b      	ldr	r3, [r7, #20]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d101      	bne.n	8003f00 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003efc:	2300      	movs	r3, #0
 8003efe:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003f00:	697b      	ldr	r3, [r7, #20]
 8003f02:	3b01      	subs	r3, #1
 8003f04:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	689a      	ldr	r2, [r3, #8]
 8003f0c:	68bb      	ldr	r3, [r7, #8]
 8003f0e:	4013      	ands	r3, r2
 8003f10:	68ba      	ldr	r2, [r7, #8]
 8003f12:	429a      	cmp	r2, r3
 8003f14:	bf0c      	ite	eq
 8003f16:	2301      	moveq	r3, #1
 8003f18:	2300      	movne	r3, #0
 8003f1a:	b2db      	uxtb	r3, r3
 8003f1c:	461a      	mov	r2, r3
 8003f1e:	79fb      	ldrb	r3, [r7, #7]
 8003f20:	429a      	cmp	r2, r3
 8003f22:	d19b      	bne.n	8003e5c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003f24:	2300      	movs	r3, #0
}
 8003f26:	4618      	mov	r0, r3
 8003f28:	3720      	adds	r7, #32
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	bd80      	pop	{r7, pc}
 8003f2e:	bf00      	nop
 8003f30:	20000004 	.word	0x20000004

08003f34 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b08a      	sub	sp, #40	@ 0x28
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	60f8      	str	r0, [r7, #12]
 8003f3c:	60b9      	str	r1, [r7, #8]
 8003f3e:	607a      	str	r2, [r7, #4]
 8003f40:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003f42:	2300      	movs	r3, #0
 8003f44:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003f46:	f7fd fbc9 	bl	80016dc <HAL_GetTick>
 8003f4a:	4602      	mov	r2, r0
 8003f4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f4e:	1a9b      	subs	r3, r3, r2
 8003f50:	683a      	ldr	r2, [r7, #0]
 8003f52:	4413      	add	r3, r2
 8003f54:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8003f56:	f7fd fbc1 	bl	80016dc <HAL_GetTick>
 8003f5a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	330c      	adds	r3, #12
 8003f62:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003f64:	4b3d      	ldr	r3, [pc, #244]	@ (800405c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8003f66:	681a      	ldr	r2, [r3, #0]
 8003f68:	4613      	mov	r3, r2
 8003f6a:	009b      	lsls	r3, r3, #2
 8003f6c:	4413      	add	r3, r2
 8003f6e:	00da      	lsls	r2, r3, #3
 8003f70:	1ad3      	subs	r3, r2, r3
 8003f72:	0d1b      	lsrs	r3, r3, #20
 8003f74:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f76:	fb02 f303 	mul.w	r3, r2, r3
 8003f7a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003f7c:	e060      	b.n	8004040 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003f7e:	68bb      	ldr	r3, [r7, #8]
 8003f80:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8003f84:	d107      	bne.n	8003f96 <SPI_WaitFifoStateUntilTimeout+0x62>
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d104      	bne.n	8003f96 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003f8c:	69fb      	ldr	r3, [r7, #28]
 8003f8e:	781b      	ldrb	r3, [r3, #0]
 8003f90:	b2db      	uxtb	r3, r3
 8003f92:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003f94:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f9c:	d050      	beq.n	8004040 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003f9e:	f7fd fb9d 	bl	80016dc <HAL_GetTick>
 8003fa2:	4602      	mov	r2, r0
 8003fa4:	6a3b      	ldr	r3, [r7, #32]
 8003fa6:	1ad3      	subs	r3, r2, r3
 8003fa8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003faa:	429a      	cmp	r2, r3
 8003fac:	d902      	bls.n	8003fb4 <SPI_WaitFifoStateUntilTimeout+0x80>
 8003fae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d13d      	bne.n	8004030 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	685a      	ldr	r2, [r3, #4]
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003fc2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	685b      	ldr	r3, [r3, #4]
 8003fc8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003fcc:	d111      	bne.n	8003ff2 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	689b      	ldr	r3, [r3, #8]
 8003fd2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003fd6:	d004      	beq.n	8003fe2 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	689b      	ldr	r3, [r3, #8]
 8003fdc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003fe0:	d107      	bne.n	8003ff2 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	681a      	ldr	r2, [r3, #0]
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003ff0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ff6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003ffa:	d10f      	bne.n	800401c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	681a      	ldr	r2, [r3, #0]
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800400a:	601a      	str	r2, [r3, #0]
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	681a      	ldr	r2, [r3, #0]
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800401a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	2201      	movs	r2, #1
 8004020:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	2200      	movs	r2, #0
 8004028:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800402c:	2303      	movs	r3, #3
 800402e:	e010      	b.n	8004052 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004030:	69bb      	ldr	r3, [r7, #24]
 8004032:	2b00      	cmp	r3, #0
 8004034:	d101      	bne.n	800403a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8004036:	2300      	movs	r3, #0
 8004038:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800403a:	69bb      	ldr	r3, [r7, #24]
 800403c:	3b01      	subs	r3, #1
 800403e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	689a      	ldr	r2, [r3, #8]
 8004046:	68bb      	ldr	r3, [r7, #8]
 8004048:	4013      	ands	r3, r2
 800404a:	687a      	ldr	r2, [r7, #4]
 800404c:	429a      	cmp	r2, r3
 800404e:	d196      	bne.n	8003f7e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8004050:	2300      	movs	r3, #0
}
 8004052:	4618      	mov	r0, r3
 8004054:	3728      	adds	r7, #40	@ 0x28
 8004056:	46bd      	mov	sp, r7
 8004058:	bd80      	pop	{r7, pc}
 800405a:	bf00      	nop
 800405c:	20000004 	.word	0x20000004

08004060 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004060:	b580      	push	{r7, lr}
 8004062:	b088      	sub	sp, #32
 8004064:	af02      	add	r7, sp, #8
 8004066:	60f8      	str	r0, [r7, #12]
 8004068:	60b9      	str	r1, [r7, #8]
 800406a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	9300      	str	r3, [sp, #0]
 8004070:	68bb      	ldr	r3, [r7, #8]
 8004072:	2200      	movs	r2, #0
 8004074:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8004078:	68f8      	ldr	r0, [r7, #12]
 800407a:	f7ff ff5b 	bl	8003f34 <SPI_WaitFifoStateUntilTimeout>
 800407e:	4603      	mov	r3, r0
 8004080:	2b00      	cmp	r3, #0
 8004082:	d007      	beq.n	8004094 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004088:	f043 0220 	orr.w	r2, r3, #32
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004090:	2303      	movs	r3, #3
 8004092:	e046      	b.n	8004122 <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004094:	4b25      	ldr	r3, [pc, #148]	@ (800412c <SPI_EndRxTxTransaction+0xcc>)
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	4a25      	ldr	r2, [pc, #148]	@ (8004130 <SPI_EndRxTxTransaction+0xd0>)
 800409a:	fba2 2303 	umull	r2, r3, r2, r3
 800409e:	0d5b      	lsrs	r3, r3, #21
 80040a0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80040a4:	fb02 f303 	mul.w	r3, r2, r3
 80040a8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	685b      	ldr	r3, [r3, #4]
 80040ae:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80040b2:	d112      	bne.n	80040da <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	9300      	str	r3, [sp, #0]
 80040b8:	68bb      	ldr	r3, [r7, #8]
 80040ba:	2200      	movs	r2, #0
 80040bc:	2180      	movs	r1, #128	@ 0x80
 80040be:	68f8      	ldr	r0, [r7, #12]
 80040c0:	f7ff feb0 	bl	8003e24 <SPI_WaitFlagStateUntilTimeout>
 80040c4:	4603      	mov	r3, r0
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d016      	beq.n	80040f8 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80040ce:	f043 0220 	orr.w	r2, r3, #32
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 80040d6:	2303      	movs	r3, #3
 80040d8:	e023      	b.n	8004122 <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80040da:	697b      	ldr	r3, [r7, #20]
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d00a      	beq.n	80040f6 <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 80040e0:	697b      	ldr	r3, [r7, #20]
 80040e2:	3b01      	subs	r3, #1
 80040e4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	689b      	ldr	r3, [r3, #8]
 80040ec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040f0:	2b80      	cmp	r3, #128	@ 0x80
 80040f2:	d0f2      	beq.n	80040da <SPI_EndRxTxTransaction+0x7a>
 80040f4:	e000      	b.n	80040f8 <SPI_EndRxTxTransaction+0x98>
        break;
 80040f6:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	9300      	str	r3, [sp, #0]
 80040fc:	68bb      	ldr	r3, [r7, #8]
 80040fe:	2200      	movs	r2, #0
 8004100:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8004104:	68f8      	ldr	r0, [r7, #12]
 8004106:	f7ff ff15 	bl	8003f34 <SPI_WaitFifoStateUntilTimeout>
 800410a:	4603      	mov	r3, r0
 800410c:	2b00      	cmp	r3, #0
 800410e:	d007      	beq.n	8004120 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004114:	f043 0220 	orr.w	r2, r3, #32
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800411c:	2303      	movs	r3, #3
 800411e:	e000      	b.n	8004122 <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 8004120:	2300      	movs	r3, #0
}
 8004122:	4618      	mov	r0, r3
 8004124:	3718      	adds	r7, #24
 8004126:	46bd      	mov	sp, r7
 8004128:	bd80      	pop	{r7, pc}
 800412a:	bf00      	nop
 800412c:	20000004 	.word	0x20000004
 8004130:	165e9f81 	.word	0x165e9f81

08004134 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004134:	b580      	push	{r7, lr}
 8004136:	b082      	sub	sp, #8
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2b00      	cmp	r3, #0
 8004140:	d101      	bne.n	8004146 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004142:	2301      	movs	r3, #1
 8004144:	e049      	b.n	80041da <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800414c:	b2db      	uxtb	r3, r3
 800414e:	2b00      	cmp	r3, #0
 8004150:	d106      	bne.n	8004160 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	2200      	movs	r2, #0
 8004156:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800415a:	6878      	ldr	r0, [r7, #4]
 800415c:	f7fc fe9c 	bl	8000e98 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2202      	movs	r2, #2
 8004164:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681a      	ldr	r2, [r3, #0]
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	3304      	adds	r3, #4
 8004170:	4619      	mov	r1, r3
 8004172:	4610      	mov	r0, r2
 8004174:	f000 fb6e 	bl	8004854 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2201      	movs	r2, #1
 800417c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2201      	movs	r2, #1
 8004184:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	2201      	movs	r2, #1
 800418c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2201      	movs	r2, #1
 8004194:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2201      	movs	r2, #1
 800419c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2201      	movs	r2, #1
 80041a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2201      	movs	r2, #1
 80041ac:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2201      	movs	r2, #1
 80041b4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2201      	movs	r2, #1
 80041bc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2201      	movs	r2, #1
 80041c4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2201      	movs	r2, #1
 80041cc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2201      	movs	r2, #1
 80041d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80041d8:	2300      	movs	r3, #0
}
 80041da:	4618      	mov	r0, r3
 80041dc:	3708      	adds	r7, #8
 80041de:	46bd      	mov	sp, r7
 80041e0:	bd80      	pop	{r7, pc}

080041e2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80041e2:	b580      	push	{r7, lr}
 80041e4:	b082      	sub	sp, #8
 80041e6:	af00      	add	r7, sp, #0
 80041e8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d101      	bne.n	80041f4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80041f0:	2301      	movs	r3, #1
 80041f2:	e049      	b.n	8004288 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80041fa:	b2db      	uxtb	r3, r3
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d106      	bne.n	800420e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2200      	movs	r2, #0
 8004204:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004208:	6878      	ldr	r0, [r7, #4]
 800420a:	f000 f841 	bl	8004290 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	2202      	movs	r2, #2
 8004212:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681a      	ldr	r2, [r3, #0]
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	3304      	adds	r3, #4
 800421e:	4619      	mov	r1, r3
 8004220:	4610      	mov	r0, r2
 8004222:	f000 fb17 	bl	8004854 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	2201      	movs	r2, #1
 800422a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	2201      	movs	r2, #1
 8004232:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	2201      	movs	r2, #1
 800423a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	2201      	movs	r2, #1
 8004242:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	2201      	movs	r2, #1
 800424a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	2201      	movs	r2, #1
 8004252:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	2201      	movs	r2, #1
 800425a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	2201      	movs	r2, #1
 8004262:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	2201      	movs	r2, #1
 800426a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	2201      	movs	r2, #1
 8004272:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	2201      	movs	r2, #1
 800427a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	2201      	movs	r2, #1
 8004282:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004286:	2300      	movs	r3, #0
}
 8004288:	4618      	mov	r0, r3
 800428a:	3708      	adds	r7, #8
 800428c:	46bd      	mov	sp, r7
 800428e:	bd80      	pop	{r7, pc}

08004290 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004290:	b480      	push	{r7}
 8004292:	b083      	sub	sp, #12
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004298:	bf00      	nop
 800429a:	370c      	adds	r7, #12
 800429c:	46bd      	mov	sp, r7
 800429e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a2:	4770      	bx	lr

080042a4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80042a4:	b580      	push	{r7, lr}
 80042a6:	b084      	sub	sp, #16
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
 80042ac:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d109      	bne.n	80042c8 <HAL_TIM_PWM_Start+0x24>
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80042ba:	b2db      	uxtb	r3, r3
 80042bc:	2b01      	cmp	r3, #1
 80042be:	bf14      	ite	ne
 80042c0:	2301      	movne	r3, #1
 80042c2:	2300      	moveq	r3, #0
 80042c4:	b2db      	uxtb	r3, r3
 80042c6:	e03c      	b.n	8004342 <HAL_TIM_PWM_Start+0x9e>
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	2b04      	cmp	r3, #4
 80042cc:	d109      	bne.n	80042e2 <HAL_TIM_PWM_Start+0x3e>
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80042d4:	b2db      	uxtb	r3, r3
 80042d6:	2b01      	cmp	r3, #1
 80042d8:	bf14      	ite	ne
 80042da:	2301      	movne	r3, #1
 80042dc:	2300      	moveq	r3, #0
 80042de:	b2db      	uxtb	r3, r3
 80042e0:	e02f      	b.n	8004342 <HAL_TIM_PWM_Start+0x9e>
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	2b08      	cmp	r3, #8
 80042e6:	d109      	bne.n	80042fc <HAL_TIM_PWM_Start+0x58>
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80042ee:	b2db      	uxtb	r3, r3
 80042f0:	2b01      	cmp	r3, #1
 80042f2:	bf14      	ite	ne
 80042f4:	2301      	movne	r3, #1
 80042f6:	2300      	moveq	r3, #0
 80042f8:	b2db      	uxtb	r3, r3
 80042fa:	e022      	b.n	8004342 <HAL_TIM_PWM_Start+0x9e>
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	2b0c      	cmp	r3, #12
 8004300:	d109      	bne.n	8004316 <HAL_TIM_PWM_Start+0x72>
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004308:	b2db      	uxtb	r3, r3
 800430a:	2b01      	cmp	r3, #1
 800430c:	bf14      	ite	ne
 800430e:	2301      	movne	r3, #1
 8004310:	2300      	moveq	r3, #0
 8004312:	b2db      	uxtb	r3, r3
 8004314:	e015      	b.n	8004342 <HAL_TIM_PWM_Start+0x9e>
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	2b10      	cmp	r3, #16
 800431a:	d109      	bne.n	8004330 <HAL_TIM_PWM_Start+0x8c>
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004322:	b2db      	uxtb	r3, r3
 8004324:	2b01      	cmp	r3, #1
 8004326:	bf14      	ite	ne
 8004328:	2301      	movne	r3, #1
 800432a:	2300      	moveq	r3, #0
 800432c:	b2db      	uxtb	r3, r3
 800432e:	e008      	b.n	8004342 <HAL_TIM_PWM_Start+0x9e>
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8004336:	b2db      	uxtb	r3, r3
 8004338:	2b01      	cmp	r3, #1
 800433a:	bf14      	ite	ne
 800433c:	2301      	movne	r3, #1
 800433e:	2300      	moveq	r3, #0
 8004340:	b2db      	uxtb	r3, r3
 8004342:	2b00      	cmp	r3, #0
 8004344:	d001      	beq.n	800434a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004346:	2301      	movs	r3, #1
 8004348:	e092      	b.n	8004470 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800434a:	683b      	ldr	r3, [r7, #0]
 800434c:	2b00      	cmp	r3, #0
 800434e:	d104      	bne.n	800435a <HAL_TIM_PWM_Start+0xb6>
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2202      	movs	r2, #2
 8004354:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004358:	e023      	b.n	80043a2 <HAL_TIM_PWM_Start+0xfe>
 800435a:	683b      	ldr	r3, [r7, #0]
 800435c:	2b04      	cmp	r3, #4
 800435e:	d104      	bne.n	800436a <HAL_TIM_PWM_Start+0xc6>
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2202      	movs	r2, #2
 8004364:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004368:	e01b      	b.n	80043a2 <HAL_TIM_PWM_Start+0xfe>
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	2b08      	cmp	r3, #8
 800436e:	d104      	bne.n	800437a <HAL_TIM_PWM_Start+0xd6>
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2202      	movs	r2, #2
 8004374:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004378:	e013      	b.n	80043a2 <HAL_TIM_PWM_Start+0xfe>
 800437a:	683b      	ldr	r3, [r7, #0]
 800437c:	2b0c      	cmp	r3, #12
 800437e:	d104      	bne.n	800438a <HAL_TIM_PWM_Start+0xe6>
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2202      	movs	r2, #2
 8004384:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004388:	e00b      	b.n	80043a2 <HAL_TIM_PWM_Start+0xfe>
 800438a:	683b      	ldr	r3, [r7, #0]
 800438c:	2b10      	cmp	r3, #16
 800438e:	d104      	bne.n	800439a <HAL_TIM_PWM_Start+0xf6>
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2202      	movs	r2, #2
 8004394:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004398:	e003      	b.n	80043a2 <HAL_TIM_PWM_Start+0xfe>
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	2202      	movs	r2, #2
 800439e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	2201      	movs	r2, #1
 80043a8:	6839      	ldr	r1, [r7, #0]
 80043aa:	4618      	mov	r0, r3
 80043ac:	f000 fdf6 	bl	8004f9c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	4a30      	ldr	r2, [pc, #192]	@ (8004478 <HAL_TIM_PWM_Start+0x1d4>)
 80043b6:	4293      	cmp	r3, r2
 80043b8:	d004      	beq.n	80043c4 <HAL_TIM_PWM_Start+0x120>
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	4a2f      	ldr	r2, [pc, #188]	@ (800447c <HAL_TIM_PWM_Start+0x1d8>)
 80043c0:	4293      	cmp	r3, r2
 80043c2:	d101      	bne.n	80043c8 <HAL_TIM_PWM_Start+0x124>
 80043c4:	2301      	movs	r3, #1
 80043c6:	e000      	b.n	80043ca <HAL_TIM_PWM_Start+0x126>
 80043c8:	2300      	movs	r3, #0
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d007      	beq.n	80043de <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80043dc:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	4a25      	ldr	r2, [pc, #148]	@ (8004478 <HAL_TIM_PWM_Start+0x1d4>)
 80043e4:	4293      	cmp	r3, r2
 80043e6:	d022      	beq.n	800442e <HAL_TIM_PWM_Start+0x18a>
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80043f0:	d01d      	beq.n	800442e <HAL_TIM_PWM_Start+0x18a>
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	4a22      	ldr	r2, [pc, #136]	@ (8004480 <HAL_TIM_PWM_Start+0x1dc>)
 80043f8:	4293      	cmp	r3, r2
 80043fa:	d018      	beq.n	800442e <HAL_TIM_PWM_Start+0x18a>
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	4a20      	ldr	r2, [pc, #128]	@ (8004484 <HAL_TIM_PWM_Start+0x1e0>)
 8004402:	4293      	cmp	r3, r2
 8004404:	d013      	beq.n	800442e <HAL_TIM_PWM_Start+0x18a>
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	4a1f      	ldr	r2, [pc, #124]	@ (8004488 <HAL_TIM_PWM_Start+0x1e4>)
 800440c:	4293      	cmp	r3, r2
 800440e:	d00e      	beq.n	800442e <HAL_TIM_PWM_Start+0x18a>
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	4a19      	ldr	r2, [pc, #100]	@ (800447c <HAL_TIM_PWM_Start+0x1d8>)
 8004416:	4293      	cmp	r3, r2
 8004418:	d009      	beq.n	800442e <HAL_TIM_PWM_Start+0x18a>
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	4a1b      	ldr	r2, [pc, #108]	@ (800448c <HAL_TIM_PWM_Start+0x1e8>)
 8004420:	4293      	cmp	r3, r2
 8004422:	d004      	beq.n	800442e <HAL_TIM_PWM_Start+0x18a>
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	4a19      	ldr	r2, [pc, #100]	@ (8004490 <HAL_TIM_PWM_Start+0x1ec>)
 800442a:	4293      	cmp	r3, r2
 800442c:	d115      	bne.n	800445a <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	689a      	ldr	r2, [r3, #8]
 8004434:	4b17      	ldr	r3, [pc, #92]	@ (8004494 <HAL_TIM_PWM_Start+0x1f0>)
 8004436:	4013      	ands	r3, r2
 8004438:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	2b06      	cmp	r3, #6
 800443e:	d015      	beq.n	800446c <HAL_TIM_PWM_Start+0x1c8>
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004446:	d011      	beq.n	800446c <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	681a      	ldr	r2, [r3, #0]
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f042 0201 	orr.w	r2, r2, #1
 8004456:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004458:	e008      	b.n	800446c <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	681a      	ldr	r2, [r3, #0]
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f042 0201 	orr.w	r2, r2, #1
 8004468:	601a      	str	r2, [r3, #0]
 800446a:	e000      	b.n	800446e <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800446c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800446e:	2300      	movs	r3, #0
}
 8004470:	4618      	mov	r0, r3
 8004472:	3710      	adds	r7, #16
 8004474:	46bd      	mov	sp, r7
 8004476:	bd80      	pop	{r7, pc}
 8004478:	40010000 	.word	0x40010000
 800447c:	40010400 	.word	0x40010400
 8004480:	40000400 	.word	0x40000400
 8004484:	40000800 	.word	0x40000800
 8004488:	40000c00 	.word	0x40000c00
 800448c:	40014000 	.word	0x40014000
 8004490:	40001800 	.word	0x40001800
 8004494:	00010007 	.word	0x00010007

08004498 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004498:	b580      	push	{r7, lr}
 800449a:	b086      	sub	sp, #24
 800449c:	af00      	add	r7, sp, #0
 800449e:	60f8      	str	r0, [r7, #12]
 80044a0:	60b9      	str	r1, [r7, #8]
 80044a2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80044a4:	2300      	movs	r3, #0
 80044a6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80044ae:	2b01      	cmp	r3, #1
 80044b0:	d101      	bne.n	80044b6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80044b2:	2302      	movs	r3, #2
 80044b4:	e0ff      	b.n	80046b6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	2201      	movs	r2, #1
 80044ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	2b14      	cmp	r3, #20
 80044c2:	f200 80f0 	bhi.w	80046a6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80044c6:	a201      	add	r2, pc, #4	@ (adr r2, 80044cc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80044c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044cc:	08004521 	.word	0x08004521
 80044d0:	080046a7 	.word	0x080046a7
 80044d4:	080046a7 	.word	0x080046a7
 80044d8:	080046a7 	.word	0x080046a7
 80044dc:	08004561 	.word	0x08004561
 80044e0:	080046a7 	.word	0x080046a7
 80044e4:	080046a7 	.word	0x080046a7
 80044e8:	080046a7 	.word	0x080046a7
 80044ec:	080045a3 	.word	0x080045a3
 80044f0:	080046a7 	.word	0x080046a7
 80044f4:	080046a7 	.word	0x080046a7
 80044f8:	080046a7 	.word	0x080046a7
 80044fc:	080045e3 	.word	0x080045e3
 8004500:	080046a7 	.word	0x080046a7
 8004504:	080046a7 	.word	0x080046a7
 8004508:	080046a7 	.word	0x080046a7
 800450c:	08004625 	.word	0x08004625
 8004510:	080046a7 	.word	0x080046a7
 8004514:	080046a7 	.word	0x080046a7
 8004518:	080046a7 	.word	0x080046a7
 800451c:	08004665 	.word	0x08004665
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	68b9      	ldr	r1, [r7, #8]
 8004526:	4618      	mov	r0, r3
 8004528:	f000 fa40 	bl	80049ac <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	699a      	ldr	r2, [r3, #24]
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f042 0208 	orr.w	r2, r2, #8
 800453a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	699a      	ldr	r2, [r3, #24]
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f022 0204 	bic.w	r2, r2, #4
 800454a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	6999      	ldr	r1, [r3, #24]
 8004552:	68bb      	ldr	r3, [r7, #8]
 8004554:	691a      	ldr	r2, [r3, #16]
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	430a      	orrs	r2, r1
 800455c:	619a      	str	r2, [r3, #24]
      break;
 800455e:	e0a5      	b.n	80046ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	68b9      	ldr	r1, [r7, #8]
 8004566:	4618      	mov	r0, r3
 8004568:	f000 fa92 	bl	8004a90 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	699a      	ldr	r2, [r3, #24]
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800457a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	699a      	ldr	r2, [r3, #24]
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800458a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	6999      	ldr	r1, [r3, #24]
 8004592:	68bb      	ldr	r3, [r7, #8]
 8004594:	691b      	ldr	r3, [r3, #16]
 8004596:	021a      	lsls	r2, r3, #8
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	430a      	orrs	r2, r1
 800459e:	619a      	str	r2, [r3, #24]
      break;
 80045a0:	e084      	b.n	80046ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	68b9      	ldr	r1, [r7, #8]
 80045a8:	4618      	mov	r0, r3
 80045aa:	f000 fae9 	bl	8004b80 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	69da      	ldr	r2, [r3, #28]
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f042 0208 	orr.w	r2, r2, #8
 80045bc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	69da      	ldr	r2, [r3, #28]
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f022 0204 	bic.w	r2, r2, #4
 80045cc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	69d9      	ldr	r1, [r3, #28]
 80045d4:	68bb      	ldr	r3, [r7, #8]
 80045d6:	691a      	ldr	r2, [r3, #16]
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	430a      	orrs	r2, r1
 80045de:	61da      	str	r2, [r3, #28]
      break;
 80045e0:	e064      	b.n	80046ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	68b9      	ldr	r1, [r7, #8]
 80045e8:	4618      	mov	r0, r3
 80045ea:	f000 fb3f 	bl	8004c6c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	69da      	ldr	r2, [r3, #28]
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80045fc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	69da      	ldr	r2, [r3, #28]
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800460c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	69d9      	ldr	r1, [r3, #28]
 8004614:	68bb      	ldr	r3, [r7, #8]
 8004616:	691b      	ldr	r3, [r3, #16]
 8004618:	021a      	lsls	r2, r3, #8
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	430a      	orrs	r2, r1
 8004620:	61da      	str	r2, [r3, #28]
      break;
 8004622:	e043      	b.n	80046ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	68b9      	ldr	r1, [r7, #8]
 800462a:	4618      	mov	r0, r3
 800462c:	f000 fb76 	bl	8004d1c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f042 0208 	orr.w	r2, r2, #8
 800463e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f022 0204 	bic.w	r2, r2, #4
 800464e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8004656:	68bb      	ldr	r3, [r7, #8]
 8004658:	691a      	ldr	r2, [r3, #16]
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	430a      	orrs	r2, r1
 8004660:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8004662:	e023      	b.n	80046ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	68b9      	ldr	r1, [r7, #8]
 800466a:	4618      	mov	r0, r3
 800466c:	f000 fba8 	bl	8004dc0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800467e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800468e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8004696:	68bb      	ldr	r3, [r7, #8]
 8004698:	691b      	ldr	r3, [r3, #16]
 800469a:	021a      	lsls	r2, r3, #8
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	430a      	orrs	r2, r1
 80046a2:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80046a4:	e002      	b.n	80046ac <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80046a6:	2301      	movs	r3, #1
 80046a8:	75fb      	strb	r3, [r7, #23]
      break;
 80046aa:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	2200      	movs	r2, #0
 80046b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80046b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80046b6:	4618      	mov	r0, r3
 80046b8:	3718      	adds	r7, #24
 80046ba:	46bd      	mov	sp, r7
 80046bc:	bd80      	pop	{r7, pc}
 80046be:	bf00      	nop

080046c0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b084      	sub	sp, #16
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
 80046c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80046ca:	2300      	movs	r3, #0
 80046cc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80046d4:	2b01      	cmp	r3, #1
 80046d6:	d101      	bne.n	80046dc <HAL_TIM_ConfigClockSource+0x1c>
 80046d8:	2302      	movs	r3, #2
 80046da:	e0b4      	b.n	8004846 <HAL_TIM_ConfigClockSource+0x186>
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2201      	movs	r2, #1
 80046e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2202      	movs	r2, #2
 80046e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	689b      	ldr	r3, [r3, #8]
 80046f2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80046f4:	68ba      	ldr	r2, [r7, #8]
 80046f6:	4b56      	ldr	r3, [pc, #344]	@ (8004850 <HAL_TIM_ConfigClockSource+0x190>)
 80046f8:	4013      	ands	r3, r2
 80046fa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80046fc:	68bb      	ldr	r3, [r7, #8]
 80046fe:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004702:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	68ba      	ldr	r2, [r7, #8]
 800470a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800470c:	683b      	ldr	r3, [r7, #0]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004714:	d03e      	beq.n	8004794 <HAL_TIM_ConfigClockSource+0xd4>
 8004716:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800471a:	f200 8087 	bhi.w	800482c <HAL_TIM_ConfigClockSource+0x16c>
 800471e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004722:	f000 8086 	beq.w	8004832 <HAL_TIM_ConfigClockSource+0x172>
 8004726:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800472a:	d87f      	bhi.n	800482c <HAL_TIM_ConfigClockSource+0x16c>
 800472c:	2b70      	cmp	r3, #112	@ 0x70
 800472e:	d01a      	beq.n	8004766 <HAL_TIM_ConfigClockSource+0xa6>
 8004730:	2b70      	cmp	r3, #112	@ 0x70
 8004732:	d87b      	bhi.n	800482c <HAL_TIM_ConfigClockSource+0x16c>
 8004734:	2b60      	cmp	r3, #96	@ 0x60
 8004736:	d050      	beq.n	80047da <HAL_TIM_ConfigClockSource+0x11a>
 8004738:	2b60      	cmp	r3, #96	@ 0x60
 800473a:	d877      	bhi.n	800482c <HAL_TIM_ConfigClockSource+0x16c>
 800473c:	2b50      	cmp	r3, #80	@ 0x50
 800473e:	d03c      	beq.n	80047ba <HAL_TIM_ConfigClockSource+0xfa>
 8004740:	2b50      	cmp	r3, #80	@ 0x50
 8004742:	d873      	bhi.n	800482c <HAL_TIM_ConfigClockSource+0x16c>
 8004744:	2b40      	cmp	r3, #64	@ 0x40
 8004746:	d058      	beq.n	80047fa <HAL_TIM_ConfigClockSource+0x13a>
 8004748:	2b40      	cmp	r3, #64	@ 0x40
 800474a:	d86f      	bhi.n	800482c <HAL_TIM_ConfigClockSource+0x16c>
 800474c:	2b30      	cmp	r3, #48	@ 0x30
 800474e:	d064      	beq.n	800481a <HAL_TIM_ConfigClockSource+0x15a>
 8004750:	2b30      	cmp	r3, #48	@ 0x30
 8004752:	d86b      	bhi.n	800482c <HAL_TIM_ConfigClockSource+0x16c>
 8004754:	2b20      	cmp	r3, #32
 8004756:	d060      	beq.n	800481a <HAL_TIM_ConfigClockSource+0x15a>
 8004758:	2b20      	cmp	r3, #32
 800475a:	d867      	bhi.n	800482c <HAL_TIM_ConfigClockSource+0x16c>
 800475c:	2b00      	cmp	r3, #0
 800475e:	d05c      	beq.n	800481a <HAL_TIM_ConfigClockSource+0x15a>
 8004760:	2b10      	cmp	r3, #16
 8004762:	d05a      	beq.n	800481a <HAL_TIM_ConfigClockSource+0x15a>
 8004764:	e062      	b.n	800482c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800476a:	683b      	ldr	r3, [r7, #0]
 800476c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004772:	683b      	ldr	r3, [r7, #0]
 8004774:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004776:	f000 fbf1 	bl	8004f5c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	689b      	ldr	r3, [r3, #8]
 8004780:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004782:	68bb      	ldr	r3, [r7, #8]
 8004784:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004788:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	68ba      	ldr	r2, [r7, #8]
 8004790:	609a      	str	r2, [r3, #8]
      break;
 8004792:	e04f      	b.n	8004834 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80047a4:	f000 fbda 	bl	8004f5c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	689a      	ldr	r2, [r3, #8]
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80047b6:	609a      	str	r2, [r3, #8]
      break;
 80047b8:	e03c      	b.n	8004834 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80047be:	683b      	ldr	r3, [r7, #0]
 80047c0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80047c6:	461a      	mov	r2, r3
 80047c8:	f000 fb4e 	bl	8004e68 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	2150      	movs	r1, #80	@ 0x50
 80047d2:	4618      	mov	r0, r3
 80047d4:	f000 fba7 	bl	8004f26 <TIM_ITRx_SetConfig>
      break;
 80047d8:	e02c      	b.n	8004834 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80047e2:	683b      	ldr	r3, [r7, #0]
 80047e4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80047e6:	461a      	mov	r2, r3
 80047e8:	f000 fb6d 	bl	8004ec6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	2160      	movs	r1, #96	@ 0x60
 80047f2:	4618      	mov	r0, r3
 80047f4:	f000 fb97 	bl	8004f26 <TIM_ITRx_SetConfig>
      break;
 80047f8:	e01c      	b.n	8004834 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80047fe:	683b      	ldr	r3, [r7, #0]
 8004800:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004806:	461a      	mov	r2, r3
 8004808:	f000 fb2e 	bl	8004e68 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	2140      	movs	r1, #64	@ 0x40
 8004812:	4618      	mov	r0, r3
 8004814:	f000 fb87 	bl	8004f26 <TIM_ITRx_SetConfig>
      break;
 8004818:	e00c      	b.n	8004834 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681a      	ldr	r2, [r3, #0]
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	4619      	mov	r1, r3
 8004824:	4610      	mov	r0, r2
 8004826:	f000 fb7e 	bl	8004f26 <TIM_ITRx_SetConfig>
      break;
 800482a:	e003      	b.n	8004834 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800482c:	2301      	movs	r3, #1
 800482e:	73fb      	strb	r3, [r7, #15]
      break;
 8004830:	e000      	b.n	8004834 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004832:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2201      	movs	r2, #1
 8004838:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2200      	movs	r2, #0
 8004840:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004844:	7bfb      	ldrb	r3, [r7, #15]
}
 8004846:	4618      	mov	r0, r3
 8004848:	3710      	adds	r7, #16
 800484a:	46bd      	mov	sp, r7
 800484c:	bd80      	pop	{r7, pc}
 800484e:	bf00      	nop
 8004850:	fffeff88 	.word	0xfffeff88

08004854 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004854:	b480      	push	{r7}
 8004856:	b085      	sub	sp, #20
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
 800485c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	4a46      	ldr	r2, [pc, #280]	@ (8004980 <TIM_Base_SetConfig+0x12c>)
 8004868:	4293      	cmp	r3, r2
 800486a:	d013      	beq.n	8004894 <TIM_Base_SetConfig+0x40>
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004872:	d00f      	beq.n	8004894 <TIM_Base_SetConfig+0x40>
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	4a43      	ldr	r2, [pc, #268]	@ (8004984 <TIM_Base_SetConfig+0x130>)
 8004878:	4293      	cmp	r3, r2
 800487a:	d00b      	beq.n	8004894 <TIM_Base_SetConfig+0x40>
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	4a42      	ldr	r2, [pc, #264]	@ (8004988 <TIM_Base_SetConfig+0x134>)
 8004880:	4293      	cmp	r3, r2
 8004882:	d007      	beq.n	8004894 <TIM_Base_SetConfig+0x40>
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	4a41      	ldr	r2, [pc, #260]	@ (800498c <TIM_Base_SetConfig+0x138>)
 8004888:	4293      	cmp	r3, r2
 800488a:	d003      	beq.n	8004894 <TIM_Base_SetConfig+0x40>
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	4a40      	ldr	r2, [pc, #256]	@ (8004990 <TIM_Base_SetConfig+0x13c>)
 8004890:	4293      	cmp	r3, r2
 8004892:	d108      	bne.n	80048a6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800489a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	685b      	ldr	r3, [r3, #4]
 80048a0:	68fa      	ldr	r2, [r7, #12]
 80048a2:	4313      	orrs	r3, r2
 80048a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	4a35      	ldr	r2, [pc, #212]	@ (8004980 <TIM_Base_SetConfig+0x12c>)
 80048aa:	4293      	cmp	r3, r2
 80048ac:	d02b      	beq.n	8004906 <TIM_Base_SetConfig+0xb2>
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80048b4:	d027      	beq.n	8004906 <TIM_Base_SetConfig+0xb2>
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	4a32      	ldr	r2, [pc, #200]	@ (8004984 <TIM_Base_SetConfig+0x130>)
 80048ba:	4293      	cmp	r3, r2
 80048bc:	d023      	beq.n	8004906 <TIM_Base_SetConfig+0xb2>
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	4a31      	ldr	r2, [pc, #196]	@ (8004988 <TIM_Base_SetConfig+0x134>)
 80048c2:	4293      	cmp	r3, r2
 80048c4:	d01f      	beq.n	8004906 <TIM_Base_SetConfig+0xb2>
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	4a30      	ldr	r2, [pc, #192]	@ (800498c <TIM_Base_SetConfig+0x138>)
 80048ca:	4293      	cmp	r3, r2
 80048cc:	d01b      	beq.n	8004906 <TIM_Base_SetConfig+0xb2>
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	4a2f      	ldr	r2, [pc, #188]	@ (8004990 <TIM_Base_SetConfig+0x13c>)
 80048d2:	4293      	cmp	r3, r2
 80048d4:	d017      	beq.n	8004906 <TIM_Base_SetConfig+0xb2>
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	4a2e      	ldr	r2, [pc, #184]	@ (8004994 <TIM_Base_SetConfig+0x140>)
 80048da:	4293      	cmp	r3, r2
 80048dc:	d013      	beq.n	8004906 <TIM_Base_SetConfig+0xb2>
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	4a2d      	ldr	r2, [pc, #180]	@ (8004998 <TIM_Base_SetConfig+0x144>)
 80048e2:	4293      	cmp	r3, r2
 80048e4:	d00f      	beq.n	8004906 <TIM_Base_SetConfig+0xb2>
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	4a2c      	ldr	r2, [pc, #176]	@ (800499c <TIM_Base_SetConfig+0x148>)
 80048ea:	4293      	cmp	r3, r2
 80048ec:	d00b      	beq.n	8004906 <TIM_Base_SetConfig+0xb2>
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	4a2b      	ldr	r2, [pc, #172]	@ (80049a0 <TIM_Base_SetConfig+0x14c>)
 80048f2:	4293      	cmp	r3, r2
 80048f4:	d007      	beq.n	8004906 <TIM_Base_SetConfig+0xb2>
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	4a2a      	ldr	r2, [pc, #168]	@ (80049a4 <TIM_Base_SetConfig+0x150>)
 80048fa:	4293      	cmp	r3, r2
 80048fc:	d003      	beq.n	8004906 <TIM_Base_SetConfig+0xb2>
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	4a29      	ldr	r2, [pc, #164]	@ (80049a8 <TIM_Base_SetConfig+0x154>)
 8004902:	4293      	cmp	r3, r2
 8004904:	d108      	bne.n	8004918 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800490c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800490e:	683b      	ldr	r3, [r7, #0]
 8004910:	68db      	ldr	r3, [r3, #12]
 8004912:	68fa      	ldr	r2, [r7, #12]
 8004914:	4313      	orrs	r3, r2
 8004916:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800491e:	683b      	ldr	r3, [r7, #0]
 8004920:	695b      	ldr	r3, [r3, #20]
 8004922:	4313      	orrs	r3, r2
 8004924:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	68fa      	ldr	r2, [r7, #12]
 800492a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	689a      	ldr	r2, [r3, #8]
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004934:	683b      	ldr	r3, [r7, #0]
 8004936:	681a      	ldr	r2, [r3, #0]
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	4a10      	ldr	r2, [pc, #64]	@ (8004980 <TIM_Base_SetConfig+0x12c>)
 8004940:	4293      	cmp	r3, r2
 8004942:	d003      	beq.n	800494c <TIM_Base_SetConfig+0xf8>
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	4a12      	ldr	r2, [pc, #72]	@ (8004990 <TIM_Base_SetConfig+0x13c>)
 8004948:	4293      	cmp	r3, r2
 800494a:	d103      	bne.n	8004954 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800494c:	683b      	ldr	r3, [r7, #0]
 800494e:	691a      	ldr	r2, [r3, #16]
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2201      	movs	r2, #1
 8004958:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	691b      	ldr	r3, [r3, #16]
 800495e:	f003 0301 	and.w	r3, r3, #1
 8004962:	2b01      	cmp	r3, #1
 8004964:	d105      	bne.n	8004972 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	691b      	ldr	r3, [r3, #16]
 800496a:	f023 0201 	bic.w	r2, r3, #1
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	611a      	str	r2, [r3, #16]
  }
}
 8004972:	bf00      	nop
 8004974:	3714      	adds	r7, #20
 8004976:	46bd      	mov	sp, r7
 8004978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497c:	4770      	bx	lr
 800497e:	bf00      	nop
 8004980:	40010000 	.word	0x40010000
 8004984:	40000400 	.word	0x40000400
 8004988:	40000800 	.word	0x40000800
 800498c:	40000c00 	.word	0x40000c00
 8004990:	40010400 	.word	0x40010400
 8004994:	40014000 	.word	0x40014000
 8004998:	40014400 	.word	0x40014400
 800499c:	40014800 	.word	0x40014800
 80049a0:	40001800 	.word	0x40001800
 80049a4:	40001c00 	.word	0x40001c00
 80049a8:	40002000 	.word	0x40002000

080049ac <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80049ac:	b480      	push	{r7}
 80049ae:	b087      	sub	sp, #28
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	6078      	str	r0, [r7, #4]
 80049b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6a1b      	ldr	r3, [r3, #32]
 80049ba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	6a1b      	ldr	r3, [r3, #32]
 80049c0:	f023 0201 	bic.w	r2, r3, #1
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	685b      	ldr	r3, [r3, #4]
 80049cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	699b      	ldr	r3, [r3, #24]
 80049d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80049d4:	68fa      	ldr	r2, [r7, #12]
 80049d6:	4b2b      	ldr	r3, [pc, #172]	@ (8004a84 <TIM_OC1_SetConfig+0xd8>)
 80049d8:	4013      	ands	r3, r2
 80049da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	f023 0303 	bic.w	r3, r3, #3
 80049e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80049e4:	683b      	ldr	r3, [r7, #0]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	68fa      	ldr	r2, [r7, #12]
 80049ea:	4313      	orrs	r3, r2
 80049ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80049ee:	697b      	ldr	r3, [r7, #20]
 80049f0:	f023 0302 	bic.w	r3, r3, #2
 80049f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80049f6:	683b      	ldr	r3, [r7, #0]
 80049f8:	689b      	ldr	r3, [r3, #8]
 80049fa:	697a      	ldr	r2, [r7, #20]
 80049fc:	4313      	orrs	r3, r2
 80049fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	4a21      	ldr	r2, [pc, #132]	@ (8004a88 <TIM_OC1_SetConfig+0xdc>)
 8004a04:	4293      	cmp	r3, r2
 8004a06:	d003      	beq.n	8004a10 <TIM_OC1_SetConfig+0x64>
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	4a20      	ldr	r2, [pc, #128]	@ (8004a8c <TIM_OC1_SetConfig+0xe0>)
 8004a0c:	4293      	cmp	r3, r2
 8004a0e:	d10c      	bne.n	8004a2a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004a10:	697b      	ldr	r3, [r7, #20]
 8004a12:	f023 0308 	bic.w	r3, r3, #8
 8004a16:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	68db      	ldr	r3, [r3, #12]
 8004a1c:	697a      	ldr	r2, [r7, #20]
 8004a1e:	4313      	orrs	r3, r2
 8004a20:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004a22:	697b      	ldr	r3, [r7, #20]
 8004a24:	f023 0304 	bic.w	r3, r3, #4
 8004a28:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	4a16      	ldr	r2, [pc, #88]	@ (8004a88 <TIM_OC1_SetConfig+0xdc>)
 8004a2e:	4293      	cmp	r3, r2
 8004a30:	d003      	beq.n	8004a3a <TIM_OC1_SetConfig+0x8e>
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	4a15      	ldr	r2, [pc, #84]	@ (8004a8c <TIM_OC1_SetConfig+0xe0>)
 8004a36:	4293      	cmp	r3, r2
 8004a38:	d111      	bne.n	8004a5e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004a3a:	693b      	ldr	r3, [r7, #16]
 8004a3c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004a40:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004a42:	693b      	ldr	r3, [r7, #16]
 8004a44:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004a48:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004a4a:	683b      	ldr	r3, [r7, #0]
 8004a4c:	695b      	ldr	r3, [r3, #20]
 8004a4e:	693a      	ldr	r2, [r7, #16]
 8004a50:	4313      	orrs	r3, r2
 8004a52:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	699b      	ldr	r3, [r3, #24]
 8004a58:	693a      	ldr	r2, [r7, #16]
 8004a5a:	4313      	orrs	r3, r2
 8004a5c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	693a      	ldr	r2, [r7, #16]
 8004a62:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	68fa      	ldr	r2, [r7, #12]
 8004a68:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004a6a:	683b      	ldr	r3, [r7, #0]
 8004a6c:	685a      	ldr	r2, [r3, #4]
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	697a      	ldr	r2, [r7, #20]
 8004a76:	621a      	str	r2, [r3, #32]
}
 8004a78:	bf00      	nop
 8004a7a:	371c      	adds	r7, #28
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a82:	4770      	bx	lr
 8004a84:	fffeff8f 	.word	0xfffeff8f
 8004a88:	40010000 	.word	0x40010000
 8004a8c:	40010400 	.word	0x40010400

08004a90 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004a90:	b480      	push	{r7}
 8004a92:	b087      	sub	sp, #28
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]
 8004a98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6a1b      	ldr	r3, [r3, #32]
 8004a9e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	6a1b      	ldr	r3, [r3, #32]
 8004aa4:	f023 0210 	bic.w	r2, r3, #16
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	685b      	ldr	r3, [r3, #4]
 8004ab0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	699b      	ldr	r3, [r3, #24]
 8004ab6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004ab8:	68fa      	ldr	r2, [r7, #12]
 8004aba:	4b2e      	ldr	r3, [pc, #184]	@ (8004b74 <TIM_OC2_SetConfig+0xe4>)
 8004abc:	4013      	ands	r3, r2
 8004abe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004ac6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	021b      	lsls	r3, r3, #8
 8004ace:	68fa      	ldr	r2, [r7, #12]
 8004ad0:	4313      	orrs	r3, r2
 8004ad2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004ad4:	697b      	ldr	r3, [r7, #20]
 8004ad6:	f023 0320 	bic.w	r3, r3, #32
 8004ada:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004adc:	683b      	ldr	r3, [r7, #0]
 8004ade:	689b      	ldr	r3, [r3, #8]
 8004ae0:	011b      	lsls	r3, r3, #4
 8004ae2:	697a      	ldr	r2, [r7, #20]
 8004ae4:	4313      	orrs	r3, r2
 8004ae6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	4a23      	ldr	r2, [pc, #140]	@ (8004b78 <TIM_OC2_SetConfig+0xe8>)
 8004aec:	4293      	cmp	r3, r2
 8004aee:	d003      	beq.n	8004af8 <TIM_OC2_SetConfig+0x68>
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	4a22      	ldr	r2, [pc, #136]	@ (8004b7c <TIM_OC2_SetConfig+0xec>)
 8004af4:	4293      	cmp	r3, r2
 8004af6:	d10d      	bne.n	8004b14 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004af8:	697b      	ldr	r3, [r7, #20]
 8004afa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004afe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004b00:	683b      	ldr	r3, [r7, #0]
 8004b02:	68db      	ldr	r3, [r3, #12]
 8004b04:	011b      	lsls	r3, r3, #4
 8004b06:	697a      	ldr	r2, [r7, #20]
 8004b08:	4313      	orrs	r3, r2
 8004b0a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004b0c:	697b      	ldr	r3, [r7, #20]
 8004b0e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004b12:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	4a18      	ldr	r2, [pc, #96]	@ (8004b78 <TIM_OC2_SetConfig+0xe8>)
 8004b18:	4293      	cmp	r3, r2
 8004b1a:	d003      	beq.n	8004b24 <TIM_OC2_SetConfig+0x94>
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	4a17      	ldr	r2, [pc, #92]	@ (8004b7c <TIM_OC2_SetConfig+0xec>)
 8004b20:	4293      	cmp	r3, r2
 8004b22:	d113      	bne.n	8004b4c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004b24:	693b      	ldr	r3, [r7, #16]
 8004b26:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004b2a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004b2c:	693b      	ldr	r3, [r7, #16]
 8004b2e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004b32:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004b34:	683b      	ldr	r3, [r7, #0]
 8004b36:	695b      	ldr	r3, [r3, #20]
 8004b38:	009b      	lsls	r3, r3, #2
 8004b3a:	693a      	ldr	r2, [r7, #16]
 8004b3c:	4313      	orrs	r3, r2
 8004b3e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004b40:	683b      	ldr	r3, [r7, #0]
 8004b42:	699b      	ldr	r3, [r3, #24]
 8004b44:	009b      	lsls	r3, r3, #2
 8004b46:	693a      	ldr	r2, [r7, #16]
 8004b48:	4313      	orrs	r3, r2
 8004b4a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	693a      	ldr	r2, [r7, #16]
 8004b50:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	68fa      	ldr	r2, [r7, #12]
 8004b56:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	685a      	ldr	r2, [r3, #4]
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	697a      	ldr	r2, [r7, #20]
 8004b64:	621a      	str	r2, [r3, #32]
}
 8004b66:	bf00      	nop
 8004b68:	371c      	adds	r7, #28
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b70:	4770      	bx	lr
 8004b72:	bf00      	nop
 8004b74:	feff8fff 	.word	0xfeff8fff
 8004b78:	40010000 	.word	0x40010000
 8004b7c:	40010400 	.word	0x40010400

08004b80 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004b80:	b480      	push	{r7}
 8004b82:	b087      	sub	sp, #28
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
 8004b88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	6a1b      	ldr	r3, [r3, #32]
 8004b8e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	6a1b      	ldr	r3, [r3, #32]
 8004b94:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	685b      	ldr	r3, [r3, #4]
 8004ba0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	69db      	ldr	r3, [r3, #28]
 8004ba6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004ba8:	68fa      	ldr	r2, [r7, #12]
 8004baa:	4b2d      	ldr	r3, [pc, #180]	@ (8004c60 <TIM_OC3_SetConfig+0xe0>)
 8004bac:	4013      	ands	r3, r2
 8004bae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	f023 0303 	bic.w	r3, r3, #3
 8004bb6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	68fa      	ldr	r2, [r7, #12]
 8004bbe:	4313      	orrs	r3, r2
 8004bc0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004bc2:	697b      	ldr	r3, [r7, #20]
 8004bc4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004bc8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004bca:	683b      	ldr	r3, [r7, #0]
 8004bcc:	689b      	ldr	r3, [r3, #8]
 8004bce:	021b      	lsls	r3, r3, #8
 8004bd0:	697a      	ldr	r2, [r7, #20]
 8004bd2:	4313      	orrs	r3, r2
 8004bd4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	4a22      	ldr	r2, [pc, #136]	@ (8004c64 <TIM_OC3_SetConfig+0xe4>)
 8004bda:	4293      	cmp	r3, r2
 8004bdc:	d003      	beq.n	8004be6 <TIM_OC3_SetConfig+0x66>
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	4a21      	ldr	r2, [pc, #132]	@ (8004c68 <TIM_OC3_SetConfig+0xe8>)
 8004be2:	4293      	cmp	r3, r2
 8004be4:	d10d      	bne.n	8004c02 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004be6:	697b      	ldr	r3, [r7, #20]
 8004be8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004bec:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004bee:	683b      	ldr	r3, [r7, #0]
 8004bf0:	68db      	ldr	r3, [r3, #12]
 8004bf2:	021b      	lsls	r3, r3, #8
 8004bf4:	697a      	ldr	r2, [r7, #20]
 8004bf6:	4313      	orrs	r3, r2
 8004bf8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004bfa:	697b      	ldr	r3, [r7, #20]
 8004bfc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004c00:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	4a17      	ldr	r2, [pc, #92]	@ (8004c64 <TIM_OC3_SetConfig+0xe4>)
 8004c06:	4293      	cmp	r3, r2
 8004c08:	d003      	beq.n	8004c12 <TIM_OC3_SetConfig+0x92>
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	4a16      	ldr	r2, [pc, #88]	@ (8004c68 <TIM_OC3_SetConfig+0xe8>)
 8004c0e:	4293      	cmp	r3, r2
 8004c10:	d113      	bne.n	8004c3a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004c12:	693b      	ldr	r3, [r7, #16]
 8004c14:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004c18:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004c1a:	693b      	ldr	r3, [r7, #16]
 8004c1c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004c20:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004c22:	683b      	ldr	r3, [r7, #0]
 8004c24:	695b      	ldr	r3, [r3, #20]
 8004c26:	011b      	lsls	r3, r3, #4
 8004c28:	693a      	ldr	r2, [r7, #16]
 8004c2a:	4313      	orrs	r3, r2
 8004c2c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004c2e:	683b      	ldr	r3, [r7, #0]
 8004c30:	699b      	ldr	r3, [r3, #24]
 8004c32:	011b      	lsls	r3, r3, #4
 8004c34:	693a      	ldr	r2, [r7, #16]
 8004c36:	4313      	orrs	r3, r2
 8004c38:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	693a      	ldr	r2, [r7, #16]
 8004c3e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	68fa      	ldr	r2, [r7, #12]
 8004c44:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004c46:	683b      	ldr	r3, [r7, #0]
 8004c48:	685a      	ldr	r2, [r3, #4]
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	697a      	ldr	r2, [r7, #20]
 8004c52:	621a      	str	r2, [r3, #32]
}
 8004c54:	bf00      	nop
 8004c56:	371c      	adds	r7, #28
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5e:	4770      	bx	lr
 8004c60:	fffeff8f 	.word	0xfffeff8f
 8004c64:	40010000 	.word	0x40010000
 8004c68:	40010400 	.word	0x40010400

08004c6c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004c6c:	b480      	push	{r7}
 8004c6e:	b087      	sub	sp, #28
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]
 8004c74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6a1b      	ldr	r3, [r3, #32]
 8004c7a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	6a1b      	ldr	r3, [r3, #32]
 8004c80:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	685b      	ldr	r3, [r3, #4]
 8004c8c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	69db      	ldr	r3, [r3, #28]
 8004c92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004c94:	68fa      	ldr	r2, [r7, #12]
 8004c96:	4b1e      	ldr	r3, [pc, #120]	@ (8004d10 <TIM_OC4_SetConfig+0xa4>)
 8004c98:	4013      	ands	r3, r2
 8004c9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004ca2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004ca4:	683b      	ldr	r3, [r7, #0]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	021b      	lsls	r3, r3, #8
 8004caa:	68fa      	ldr	r2, [r7, #12]
 8004cac:	4313      	orrs	r3, r2
 8004cae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004cb0:	693b      	ldr	r3, [r7, #16]
 8004cb2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004cb6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004cb8:	683b      	ldr	r3, [r7, #0]
 8004cba:	689b      	ldr	r3, [r3, #8]
 8004cbc:	031b      	lsls	r3, r3, #12
 8004cbe:	693a      	ldr	r2, [r7, #16]
 8004cc0:	4313      	orrs	r3, r2
 8004cc2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	4a13      	ldr	r2, [pc, #76]	@ (8004d14 <TIM_OC4_SetConfig+0xa8>)
 8004cc8:	4293      	cmp	r3, r2
 8004cca:	d003      	beq.n	8004cd4 <TIM_OC4_SetConfig+0x68>
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	4a12      	ldr	r2, [pc, #72]	@ (8004d18 <TIM_OC4_SetConfig+0xac>)
 8004cd0:	4293      	cmp	r3, r2
 8004cd2:	d109      	bne.n	8004ce8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004cd4:	697b      	ldr	r3, [r7, #20]
 8004cd6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004cda:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004cdc:	683b      	ldr	r3, [r7, #0]
 8004cde:	695b      	ldr	r3, [r3, #20]
 8004ce0:	019b      	lsls	r3, r3, #6
 8004ce2:	697a      	ldr	r2, [r7, #20]
 8004ce4:	4313      	orrs	r3, r2
 8004ce6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	697a      	ldr	r2, [r7, #20]
 8004cec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	68fa      	ldr	r2, [r7, #12]
 8004cf2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004cf4:	683b      	ldr	r3, [r7, #0]
 8004cf6:	685a      	ldr	r2, [r3, #4]
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	693a      	ldr	r2, [r7, #16]
 8004d00:	621a      	str	r2, [r3, #32]
}
 8004d02:	bf00      	nop
 8004d04:	371c      	adds	r7, #28
 8004d06:	46bd      	mov	sp, r7
 8004d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0c:	4770      	bx	lr
 8004d0e:	bf00      	nop
 8004d10:	feff8fff 	.word	0xfeff8fff
 8004d14:	40010000 	.word	0x40010000
 8004d18:	40010400 	.word	0x40010400

08004d1c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004d1c:	b480      	push	{r7}
 8004d1e:	b087      	sub	sp, #28
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	6078      	str	r0, [r7, #4]
 8004d24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	6a1b      	ldr	r3, [r3, #32]
 8004d2a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	6a1b      	ldr	r3, [r3, #32]
 8004d30:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	685b      	ldr	r3, [r3, #4]
 8004d3c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004d44:	68fa      	ldr	r2, [r7, #12]
 8004d46:	4b1b      	ldr	r3, [pc, #108]	@ (8004db4 <TIM_OC5_SetConfig+0x98>)
 8004d48:	4013      	ands	r3, r2
 8004d4a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004d4c:	683b      	ldr	r3, [r7, #0]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	68fa      	ldr	r2, [r7, #12]
 8004d52:	4313      	orrs	r3, r2
 8004d54:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004d56:	693b      	ldr	r3, [r7, #16]
 8004d58:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8004d5c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004d5e:	683b      	ldr	r3, [r7, #0]
 8004d60:	689b      	ldr	r3, [r3, #8]
 8004d62:	041b      	lsls	r3, r3, #16
 8004d64:	693a      	ldr	r2, [r7, #16]
 8004d66:	4313      	orrs	r3, r2
 8004d68:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	4a12      	ldr	r2, [pc, #72]	@ (8004db8 <TIM_OC5_SetConfig+0x9c>)
 8004d6e:	4293      	cmp	r3, r2
 8004d70:	d003      	beq.n	8004d7a <TIM_OC5_SetConfig+0x5e>
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	4a11      	ldr	r2, [pc, #68]	@ (8004dbc <TIM_OC5_SetConfig+0xa0>)
 8004d76:	4293      	cmp	r3, r2
 8004d78:	d109      	bne.n	8004d8e <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004d7a:	697b      	ldr	r3, [r7, #20]
 8004d7c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004d80:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004d82:	683b      	ldr	r3, [r7, #0]
 8004d84:	695b      	ldr	r3, [r3, #20]
 8004d86:	021b      	lsls	r3, r3, #8
 8004d88:	697a      	ldr	r2, [r7, #20]
 8004d8a:	4313      	orrs	r3, r2
 8004d8c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	697a      	ldr	r2, [r7, #20]
 8004d92:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	68fa      	ldr	r2, [r7, #12]
 8004d98:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004d9a:	683b      	ldr	r3, [r7, #0]
 8004d9c:	685a      	ldr	r2, [r3, #4]
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	693a      	ldr	r2, [r7, #16]
 8004da6:	621a      	str	r2, [r3, #32]
}
 8004da8:	bf00      	nop
 8004daa:	371c      	adds	r7, #28
 8004dac:	46bd      	mov	sp, r7
 8004dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db2:	4770      	bx	lr
 8004db4:	fffeff8f 	.word	0xfffeff8f
 8004db8:	40010000 	.word	0x40010000
 8004dbc:	40010400 	.word	0x40010400

08004dc0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004dc0:	b480      	push	{r7}
 8004dc2:	b087      	sub	sp, #28
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]
 8004dc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6a1b      	ldr	r3, [r3, #32]
 8004dce:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	6a1b      	ldr	r3, [r3, #32]
 8004dd4:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	685b      	ldr	r3, [r3, #4]
 8004de0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004de6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004de8:	68fa      	ldr	r2, [r7, #12]
 8004dea:	4b1c      	ldr	r3, [pc, #112]	@ (8004e5c <TIM_OC6_SetConfig+0x9c>)
 8004dec:	4013      	ands	r3, r2
 8004dee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	021b      	lsls	r3, r3, #8
 8004df6:	68fa      	ldr	r2, [r7, #12]
 8004df8:	4313      	orrs	r3, r2
 8004dfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004dfc:	693b      	ldr	r3, [r7, #16]
 8004dfe:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004e02:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004e04:	683b      	ldr	r3, [r7, #0]
 8004e06:	689b      	ldr	r3, [r3, #8]
 8004e08:	051b      	lsls	r3, r3, #20
 8004e0a:	693a      	ldr	r2, [r7, #16]
 8004e0c:	4313      	orrs	r3, r2
 8004e0e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	4a13      	ldr	r2, [pc, #76]	@ (8004e60 <TIM_OC6_SetConfig+0xa0>)
 8004e14:	4293      	cmp	r3, r2
 8004e16:	d003      	beq.n	8004e20 <TIM_OC6_SetConfig+0x60>
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	4a12      	ldr	r2, [pc, #72]	@ (8004e64 <TIM_OC6_SetConfig+0xa4>)
 8004e1c:	4293      	cmp	r3, r2
 8004e1e:	d109      	bne.n	8004e34 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004e20:	697b      	ldr	r3, [r7, #20]
 8004e22:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004e26:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004e28:	683b      	ldr	r3, [r7, #0]
 8004e2a:	695b      	ldr	r3, [r3, #20]
 8004e2c:	029b      	lsls	r3, r3, #10
 8004e2e:	697a      	ldr	r2, [r7, #20]
 8004e30:	4313      	orrs	r3, r2
 8004e32:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	697a      	ldr	r2, [r7, #20]
 8004e38:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	68fa      	ldr	r2, [r7, #12]
 8004e3e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	685a      	ldr	r2, [r3, #4]
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	693a      	ldr	r2, [r7, #16]
 8004e4c:	621a      	str	r2, [r3, #32]
}
 8004e4e:	bf00      	nop
 8004e50:	371c      	adds	r7, #28
 8004e52:	46bd      	mov	sp, r7
 8004e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e58:	4770      	bx	lr
 8004e5a:	bf00      	nop
 8004e5c:	feff8fff 	.word	0xfeff8fff
 8004e60:	40010000 	.word	0x40010000
 8004e64:	40010400 	.word	0x40010400

08004e68 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004e68:	b480      	push	{r7}
 8004e6a:	b087      	sub	sp, #28
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	60f8      	str	r0, [r7, #12]
 8004e70:	60b9      	str	r1, [r7, #8]
 8004e72:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	6a1b      	ldr	r3, [r3, #32]
 8004e78:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	6a1b      	ldr	r3, [r3, #32]
 8004e7e:	f023 0201 	bic.w	r2, r3, #1
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	699b      	ldr	r3, [r3, #24]
 8004e8a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004e8c:	693b      	ldr	r3, [r7, #16]
 8004e8e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004e92:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	011b      	lsls	r3, r3, #4
 8004e98:	693a      	ldr	r2, [r7, #16]
 8004e9a:	4313      	orrs	r3, r2
 8004e9c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004e9e:	697b      	ldr	r3, [r7, #20]
 8004ea0:	f023 030a 	bic.w	r3, r3, #10
 8004ea4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004ea6:	697a      	ldr	r2, [r7, #20]
 8004ea8:	68bb      	ldr	r3, [r7, #8]
 8004eaa:	4313      	orrs	r3, r2
 8004eac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	693a      	ldr	r2, [r7, #16]
 8004eb2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	697a      	ldr	r2, [r7, #20]
 8004eb8:	621a      	str	r2, [r3, #32]
}
 8004eba:	bf00      	nop
 8004ebc:	371c      	adds	r7, #28
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec4:	4770      	bx	lr

08004ec6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004ec6:	b480      	push	{r7}
 8004ec8:	b087      	sub	sp, #28
 8004eca:	af00      	add	r7, sp, #0
 8004ecc:	60f8      	str	r0, [r7, #12]
 8004ece:	60b9      	str	r1, [r7, #8]
 8004ed0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	6a1b      	ldr	r3, [r3, #32]
 8004ed6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	6a1b      	ldr	r3, [r3, #32]
 8004edc:	f023 0210 	bic.w	r2, r3, #16
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	699b      	ldr	r3, [r3, #24]
 8004ee8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004eea:	693b      	ldr	r3, [r7, #16]
 8004eec:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004ef0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	031b      	lsls	r3, r3, #12
 8004ef6:	693a      	ldr	r2, [r7, #16]
 8004ef8:	4313      	orrs	r3, r2
 8004efa:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004efc:	697b      	ldr	r3, [r7, #20]
 8004efe:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004f02:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004f04:	68bb      	ldr	r3, [r7, #8]
 8004f06:	011b      	lsls	r3, r3, #4
 8004f08:	697a      	ldr	r2, [r7, #20]
 8004f0a:	4313      	orrs	r3, r2
 8004f0c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	693a      	ldr	r2, [r7, #16]
 8004f12:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	697a      	ldr	r2, [r7, #20]
 8004f18:	621a      	str	r2, [r3, #32]
}
 8004f1a:	bf00      	nop
 8004f1c:	371c      	adds	r7, #28
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f24:	4770      	bx	lr

08004f26 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004f26:	b480      	push	{r7}
 8004f28:	b085      	sub	sp, #20
 8004f2a:	af00      	add	r7, sp, #0
 8004f2c:	6078      	str	r0, [r7, #4]
 8004f2e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	689b      	ldr	r3, [r3, #8]
 8004f34:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f3c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004f3e:	683a      	ldr	r2, [r7, #0]
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	4313      	orrs	r3, r2
 8004f44:	f043 0307 	orr.w	r3, r3, #7
 8004f48:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	68fa      	ldr	r2, [r7, #12]
 8004f4e:	609a      	str	r2, [r3, #8]
}
 8004f50:	bf00      	nop
 8004f52:	3714      	adds	r7, #20
 8004f54:	46bd      	mov	sp, r7
 8004f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5a:	4770      	bx	lr

08004f5c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004f5c:	b480      	push	{r7}
 8004f5e:	b087      	sub	sp, #28
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	60f8      	str	r0, [r7, #12]
 8004f64:	60b9      	str	r1, [r7, #8]
 8004f66:	607a      	str	r2, [r7, #4]
 8004f68:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	689b      	ldr	r3, [r3, #8]
 8004f6e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004f70:	697b      	ldr	r3, [r7, #20]
 8004f72:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004f76:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004f78:	683b      	ldr	r3, [r7, #0]
 8004f7a:	021a      	lsls	r2, r3, #8
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	431a      	orrs	r2, r3
 8004f80:	68bb      	ldr	r3, [r7, #8]
 8004f82:	4313      	orrs	r3, r2
 8004f84:	697a      	ldr	r2, [r7, #20]
 8004f86:	4313      	orrs	r3, r2
 8004f88:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	697a      	ldr	r2, [r7, #20]
 8004f8e:	609a      	str	r2, [r3, #8]
}
 8004f90:	bf00      	nop
 8004f92:	371c      	adds	r7, #28
 8004f94:	46bd      	mov	sp, r7
 8004f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9a:	4770      	bx	lr

08004f9c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004f9c:	b480      	push	{r7}
 8004f9e:	b087      	sub	sp, #28
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	60f8      	str	r0, [r7, #12]
 8004fa4:	60b9      	str	r1, [r7, #8]
 8004fa6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004fa8:	68bb      	ldr	r3, [r7, #8]
 8004faa:	f003 031f 	and.w	r3, r3, #31
 8004fae:	2201      	movs	r2, #1
 8004fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8004fb4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	6a1a      	ldr	r2, [r3, #32]
 8004fba:	697b      	ldr	r3, [r7, #20]
 8004fbc:	43db      	mvns	r3, r3
 8004fbe:	401a      	ands	r2, r3
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	6a1a      	ldr	r2, [r3, #32]
 8004fc8:	68bb      	ldr	r3, [r7, #8]
 8004fca:	f003 031f 	and.w	r3, r3, #31
 8004fce:	6879      	ldr	r1, [r7, #4]
 8004fd0:	fa01 f303 	lsl.w	r3, r1, r3
 8004fd4:	431a      	orrs	r2, r3
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	621a      	str	r2, [r3, #32]
}
 8004fda:	bf00      	nop
 8004fdc:	371c      	adds	r7, #28
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe4:	4770      	bx	lr
	...

08004fe8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004fe8:	b480      	push	{r7}
 8004fea:	b085      	sub	sp, #20
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	6078      	str	r0, [r7, #4]
 8004ff0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004ff8:	2b01      	cmp	r3, #1
 8004ffa:	d101      	bne.n	8005000 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004ffc:	2302      	movs	r3, #2
 8004ffe:	e06d      	b.n	80050dc <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2201      	movs	r2, #1
 8005004:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2202      	movs	r2, #2
 800500c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	685b      	ldr	r3, [r3, #4]
 8005016:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	689b      	ldr	r3, [r3, #8]
 800501e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	4a30      	ldr	r2, [pc, #192]	@ (80050e8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005026:	4293      	cmp	r3, r2
 8005028:	d004      	beq.n	8005034 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	4a2f      	ldr	r2, [pc, #188]	@ (80050ec <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005030:	4293      	cmp	r3, r2
 8005032:	d108      	bne.n	8005046 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800503a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800503c:	683b      	ldr	r3, [r7, #0]
 800503e:	685b      	ldr	r3, [r3, #4]
 8005040:	68fa      	ldr	r2, [r7, #12]
 8005042:	4313      	orrs	r3, r2
 8005044:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800504c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800504e:	683b      	ldr	r3, [r7, #0]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	68fa      	ldr	r2, [r7, #12]
 8005054:	4313      	orrs	r3, r2
 8005056:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	68fa      	ldr	r2, [r7, #12]
 800505e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	4a20      	ldr	r2, [pc, #128]	@ (80050e8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005066:	4293      	cmp	r3, r2
 8005068:	d022      	beq.n	80050b0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005072:	d01d      	beq.n	80050b0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	4a1d      	ldr	r2, [pc, #116]	@ (80050f0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800507a:	4293      	cmp	r3, r2
 800507c:	d018      	beq.n	80050b0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	4a1c      	ldr	r2, [pc, #112]	@ (80050f4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005084:	4293      	cmp	r3, r2
 8005086:	d013      	beq.n	80050b0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	4a1a      	ldr	r2, [pc, #104]	@ (80050f8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800508e:	4293      	cmp	r3, r2
 8005090:	d00e      	beq.n	80050b0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	4a15      	ldr	r2, [pc, #84]	@ (80050ec <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005098:	4293      	cmp	r3, r2
 800509a:	d009      	beq.n	80050b0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	4a16      	ldr	r2, [pc, #88]	@ (80050fc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80050a2:	4293      	cmp	r3, r2
 80050a4:	d004      	beq.n	80050b0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	4a15      	ldr	r2, [pc, #84]	@ (8005100 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80050ac:	4293      	cmp	r3, r2
 80050ae:	d10c      	bne.n	80050ca <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80050b0:	68bb      	ldr	r3, [r7, #8]
 80050b2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80050b6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80050b8:	683b      	ldr	r3, [r7, #0]
 80050ba:	689b      	ldr	r3, [r3, #8]
 80050bc:	68ba      	ldr	r2, [r7, #8]
 80050be:	4313      	orrs	r3, r2
 80050c0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	68ba      	ldr	r2, [r7, #8]
 80050c8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	2201      	movs	r2, #1
 80050ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	2200      	movs	r2, #0
 80050d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80050da:	2300      	movs	r3, #0
}
 80050dc:	4618      	mov	r0, r3
 80050de:	3714      	adds	r7, #20
 80050e0:	46bd      	mov	sp, r7
 80050e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e6:	4770      	bx	lr
 80050e8:	40010000 	.word	0x40010000
 80050ec:	40010400 	.word	0x40010400
 80050f0:	40000400 	.word	0x40000400
 80050f4:	40000800 	.word	0x40000800
 80050f8:	40000c00 	.word	0x40000c00
 80050fc:	40014000 	.word	0x40014000
 8005100:	40001800 	.word	0x40001800

08005104 <memset>:
 8005104:	4402      	add	r2, r0
 8005106:	4603      	mov	r3, r0
 8005108:	4293      	cmp	r3, r2
 800510a:	d100      	bne.n	800510e <memset+0xa>
 800510c:	4770      	bx	lr
 800510e:	f803 1b01 	strb.w	r1, [r3], #1
 8005112:	e7f9      	b.n	8005108 <memset+0x4>

08005114 <__libc_init_array>:
 8005114:	b570      	push	{r4, r5, r6, lr}
 8005116:	4d0d      	ldr	r5, [pc, #52]	@ (800514c <__libc_init_array+0x38>)
 8005118:	4c0d      	ldr	r4, [pc, #52]	@ (8005150 <__libc_init_array+0x3c>)
 800511a:	1b64      	subs	r4, r4, r5
 800511c:	10a4      	asrs	r4, r4, #2
 800511e:	2600      	movs	r6, #0
 8005120:	42a6      	cmp	r6, r4
 8005122:	d109      	bne.n	8005138 <__libc_init_array+0x24>
 8005124:	4d0b      	ldr	r5, [pc, #44]	@ (8005154 <__libc_init_array+0x40>)
 8005126:	4c0c      	ldr	r4, [pc, #48]	@ (8005158 <__libc_init_array+0x44>)
 8005128:	f000 f818 	bl	800515c <_init>
 800512c:	1b64      	subs	r4, r4, r5
 800512e:	10a4      	asrs	r4, r4, #2
 8005130:	2600      	movs	r6, #0
 8005132:	42a6      	cmp	r6, r4
 8005134:	d105      	bne.n	8005142 <__libc_init_array+0x2e>
 8005136:	bd70      	pop	{r4, r5, r6, pc}
 8005138:	f855 3b04 	ldr.w	r3, [r5], #4
 800513c:	4798      	blx	r3
 800513e:	3601      	adds	r6, #1
 8005140:	e7ee      	b.n	8005120 <__libc_init_array+0xc>
 8005142:	f855 3b04 	ldr.w	r3, [r5], #4
 8005146:	4798      	blx	r3
 8005148:	3601      	adds	r6, #1
 800514a:	e7f2      	b.n	8005132 <__libc_init_array+0x1e>
 800514c:	0800518c 	.word	0x0800518c
 8005150:	0800518c 	.word	0x0800518c
 8005154:	0800518c 	.word	0x0800518c
 8005158:	08005190 	.word	0x08005190

0800515c <_init>:
 800515c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800515e:	bf00      	nop
 8005160:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005162:	bc08      	pop	{r3}
 8005164:	469e      	mov	lr, r3
 8005166:	4770      	bx	lr

08005168 <_fini>:
 8005168:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800516a:	bf00      	nop
 800516c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800516e:	bc08      	pop	{r3}
 8005170:	469e      	mov	lr, r3
 8005172:	4770      	bx	lr
