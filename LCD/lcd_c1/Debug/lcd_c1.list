
lcd_c1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005b98  08000200  08000200  00001200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000288  08005d98  08005d98  00006d98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006020  08006020  00008068  2**0
                  CONTENTS
  4 .ARM          00000008  08006020  08006020  00007020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006028  08006028  00008068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006028  08006028  00007028  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800602c  0800602c  0000702c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08006030  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002f8  20000068  08006098  00008068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000360  08006098  00008360  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00008068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f84e  00000000  00000000  00008096  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000025d9  00000000  00000000  000178e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f28  00000000  00000000  00019ec0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000bb4  00000000  00000000  0001ade8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028dc2  00000000  00000000  0001b99c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012a9f  00000000  00000000  0004475e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fea30  00000000  00000000  000571fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00155c2d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004478  00000000  00000000  00155c70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000046  00000000  00000000  0015a0e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	@ (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	@ (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	@ (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000068 	.word	0x20000068
 800021c:	00000000 	.word	0x00000000
 8000220:	08005d80 	.word	0x08005d80

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	@ (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	@ (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	@ (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	2000006c 	.word	0x2000006c
 800023c:	08005d80 	.word	0x08005d80

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b96a 	b.w	80005cc <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	460c      	mov	r4, r1
 8000318:	2b00      	cmp	r3, #0
 800031a:	d14e      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031c:	4694      	mov	ip, r2
 800031e:	458c      	cmp	ip, r1
 8000320:	4686      	mov	lr, r0
 8000322:	fab2 f282 	clz	r2, r2
 8000326:	d962      	bls.n	80003ee <__udivmoddi4+0xde>
 8000328:	b14a      	cbz	r2, 800033e <__udivmoddi4+0x2e>
 800032a:	f1c2 0320 	rsb	r3, r2, #32
 800032e:	4091      	lsls	r1, r2
 8000330:	fa20 f303 	lsr.w	r3, r0, r3
 8000334:	fa0c fc02 	lsl.w	ip, ip, r2
 8000338:	4319      	orrs	r1, r3
 800033a:	fa00 fe02 	lsl.w	lr, r0, r2
 800033e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000342:	fa1f f68c 	uxth.w	r6, ip
 8000346:	fbb1 f4f7 	udiv	r4, r1, r7
 800034a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800034e:	fb07 1114 	mls	r1, r7, r4, r1
 8000352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000356:	fb04 f106 	mul.w	r1, r4, r6
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f104 30ff 	add.w	r0, r4, #4294967295
 8000366:	f080 8112 	bcs.w	800058e <__udivmoddi4+0x27e>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 810f 	bls.w	800058e <__udivmoddi4+0x27e>
 8000370:	3c02      	subs	r4, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a59      	subs	r1, r3, r1
 8000376:	fa1f f38e 	uxth.w	r3, lr
 800037a:	fbb1 f0f7 	udiv	r0, r1, r7
 800037e:	fb07 1110 	mls	r1, r7, r0, r1
 8000382:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000386:	fb00 f606 	mul.w	r6, r0, r6
 800038a:	429e      	cmp	r6, r3
 800038c:	d90a      	bls.n	80003a4 <__udivmoddi4+0x94>
 800038e:	eb1c 0303 	adds.w	r3, ip, r3
 8000392:	f100 31ff 	add.w	r1, r0, #4294967295
 8000396:	f080 80fc 	bcs.w	8000592 <__udivmoddi4+0x282>
 800039a:	429e      	cmp	r6, r3
 800039c:	f240 80f9 	bls.w	8000592 <__udivmoddi4+0x282>
 80003a0:	4463      	add	r3, ip
 80003a2:	3802      	subs	r0, #2
 80003a4:	1b9b      	subs	r3, r3, r6
 80003a6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003aa:	2100      	movs	r1, #0
 80003ac:	b11d      	cbz	r5, 80003b6 <__udivmoddi4+0xa6>
 80003ae:	40d3      	lsrs	r3, r2
 80003b0:	2200      	movs	r2, #0
 80003b2:	e9c5 3200 	strd	r3, r2, [r5]
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d905      	bls.n	80003ca <__udivmoddi4+0xba>
 80003be:	b10d      	cbz	r5, 80003c4 <__udivmoddi4+0xb4>
 80003c0:	e9c5 0100 	strd	r0, r1, [r5]
 80003c4:	2100      	movs	r1, #0
 80003c6:	4608      	mov	r0, r1
 80003c8:	e7f5      	b.n	80003b6 <__udivmoddi4+0xa6>
 80003ca:	fab3 f183 	clz	r1, r3
 80003ce:	2900      	cmp	r1, #0
 80003d0:	d146      	bne.n	8000460 <__udivmoddi4+0x150>
 80003d2:	42a3      	cmp	r3, r4
 80003d4:	d302      	bcc.n	80003dc <__udivmoddi4+0xcc>
 80003d6:	4290      	cmp	r0, r2
 80003d8:	f0c0 80f0 	bcc.w	80005bc <__udivmoddi4+0x2ac>
 80003dc:	1a86      	subs	r6, r0, r2
 80003de:	eb64 0303 	sbc.w	r3, r4, r3
 80003e2:	2001      	movs	r0, #1
 80003e4:	2d00      	cmp	r5, #0
 80003e6:	d0e6      	beq.n	80003b6 <__udivmoddi4+0xa6>
 80003e8:	e9c5 6300 	strd	r6, r3, [r5]
 80003ec:	e7e3      	b.n	80003b6 <__udivmoddi4+0xa6>
 80003ee:	2a00      	cmp	r2, #0
 80003f0:	f040 8090 	bne.w	8000514 <__udivmoddi4+0x204>
 80003f4:	eba1 040c 	sub.w	r4, r1, ip
 80003f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003fc:	fa1f f78c 	uxth.w	r7, ip
 8000400:	2101      	movs	r1, #1
 8000402:	fbb4 f6f8 	udiv	r6, r4, r8
 8000406:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800040a:	fb08 4416 	mls	r4, r8, r6, r4
 800040e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000412:	fb07 f006 	mul.w	r0, r7, r6
 8000416:	4298      	cmp	r0, r3
 8000418:	d908      	bls.n	800042c <__udivmoddi4+0x11c>
 800041a:	eb1c 0303 	adds.w	r3, ip, r3
 800041e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x11a>
 8000424:	4298      	cmp	r0, r3
 8000426:	f200 80cd 	bhi.w	80005c4 <__udivmoddi4+0x2b4>
 800042a:	4626      	mov	r6, r4
 800042c:	1a1c      	subs	r4, r3, r0
 800042e:	fa1f f38e 	uxth.w	r3, lr
 8000432:	fbb4 f0f8 	udiv	r0, r4, r8
 8000436:	fb08 4410 	mls	r4, r8, r0, r4
 800043a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800043e:	fb00 f707 	mul.w	r7, r0, r7
 8000442:	429f      	cmp	r7, r3
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x148>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 34ff 	add.w	r4, r0, #4294967295
 800044e:	d202      	bcs.n	8000456 <__udivmoddi4+0x146>
 8000450:	429f      	cmp	r7, r3
 8000452:	f200 80b0 	bhi.w	80005b6 <__udivmoddi4+0x2a6>
 8000456:	4620      	mov	r0, r4
 8000458:	1bdb      	subs	r3, r3, r7
 800045a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800045e:	e7a5      	b.n	80003ac <__udivmoddi4+0x9c>
 8000460:	f1c1 0620 	rsb	r6, r1, #32
 8000464:	408b      	lsls	r3, r1
 8000466:	fa22 f706 	lsr.w	r7, r2, r6
 800046a:	431f      	orrs	r7, r3
 800046c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000470:	fa04 f301 	lsl.w	r3, r4, r1
 8000474:	ea43 030c 	orr.w	r3, r3, ip
 8000478:	40f4      	lsrs	r4, r6
 800047a:	fa00 f801 	lsl.w	r8, r0, r1
 800047e:	0c38      	lsrs	r0, r7, #16
 8000480:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000484:	fbb4 fef0 	udiv	lr, r4, r0
 8000488:	fa1f fc87 	uxth.w	ip, r7
 800048c:	fb00 441e 	mls	r4, r0, lr, r4
 8000490:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000494:	fb0e f90c 	mul.w	r9, lr, ip
 8000498:	45a1      	cmp	r9, r4
 800049a:	fa02 f201 	lsl.w	r2, r2, r1
 800049e:	d90a      	bls.n	80004b6 <__udivmoddi4+0x1a6>
 80004a0:	193c      	adds	r4, r7, r4
 80004a2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004a6:	f080 8084 	bcs.w	80005b2 <__udivmoddi4+0x2a2>
 80004aa:	45a1      	cmp	r9, r4
 80004ac:	f240 8081 	bls.w	80005b2 <__udivmoddi4+0x2a2>
 80004b0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004b4:	443c      	add	r4, r7
 80004b6:	eba4 0409 	sub.w	r4, r4, r9
 80004ba:	fa1f f983 	uxth.w	r9, r3
 80004be:	fbb4 f3f0 	udiv	r3, r4, r0
 80004c2:	fb00 4413 	mls	r4, r0, r3, r4
 80004c6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004ca:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ce:	45a4      	cmp	ip, r4
 80004d0:	d907      	bls.n	80004e2 <__udivmoddi4+0x1d2>
 80004d2:	193c      	adds	r4, r7, r4
 80004d4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004d8:	d267      	bcs.n	80005aa <__udivmoddi4+0x29a>
 80004da:	45a4      	cmp	ip, r4
 80004dc:	d965      	bls.n	80005aa <__udivmoddi4+0x29a>
 80004de:	3b02      	subs	r3, #2
 80004e0:	443c      	add	r4, r7
 80004e2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004e6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ea:	eba4 040c 	sub.w	r4, r4, ip
 80004ee:	429c      	cmp	r4, r3
 80004f0:	46ce      	mov	lr, r9
 80004f2:	469c      	mov	ip, r3
 80004f4:	d351      	bcc.n	800059a <__udivmoddi4+0x28a>
 80004f6:	d04e      	beq.n	8000596 <__udivmoddi4+0x286>
 80004f8:	b155      	cbz	r5, 8000510 <__udivmoddi4+0x200>
 80004fa:	ebb8 030e 	subs.w	r3, r8, lr
 80004fe:	eb64 040c 	sbc.w	r4, r4, ip
 8000502:	fa04 f606 	lsl.w	r6, r4, r6
 8000506:	40cb      	lsrs	r3, r1
 8000508:	431e      	orrs	r6, r3
 800050a:	40cc      	lsrs	r4, r1
 800050c:	e9c5 6400 	strd	r6, r4, [r5]
 8000510:	2100      	movs	r1, #0
 8000512:	e750      	b.n	80003b6 <__udivmoddi4+0xa6>
 8000514:	f1c2 0320 	rsb	r3, r2, #32
 8000518:	fa20 f103 	lsr.w	r1, r0, r3
 800051c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000520:	fa24 f303 	lsr.w	r3, r4, r3
 8000524:	4094      	lsls	r4, r2
 8000526:	430c      	orrs	r4, r1
 8000528:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800052c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000530:	fa1f f78c 	uxth.w	r7, ip
 8000534:	fbb3 f0f8 	udiv	r0, r3, r8
 8000538:	fb08 3110 	mls	r1, r8, r0, r3
 800053c:	0c23      	lsrs	r3, r4, #16
 800053e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000542:	fb00 f107 	mul.w	r1, r0, r7
 8000546:	4299      	cmp	r1, r3
 8000548:	d908      	bls.n	800055c <__udivmoddi4+0x24c>
 800054a:	eb1c 0303 	adds.w	r3, ip, r3
 800054e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000552:	d22c      	bcs.n	80005ae <__udivmoddi4+0x29e>
 8000554:	4299      	cmp	r1, r3
 8000556:	d92a      	bls.n	80005ae <__udivmoddi4+0x29e>
 8000558:	3802      	subs	r0, #2
 800055a:	4463      	add	r3, ip
 800055c:	1a5b      	subs	r3, r3, r1
 800055e:	b2a4      	uxth	r4, r4
 8000560:	fbb3 f1f8 	udiv	r1, r3, r8
 8000564:	fb08 3311 	mls	r3, r8, r1, r3
 8000568:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800056c:	fb01 f307 	mul.w	r3, r1, r7
 8000570:	42a3      	cmp	r3, r4
 8000572:	d908      	bls.n	8000586 <__udivmoddi4+0x276>
 8000574:	eb1c 0404 	adds.w	r4, ip, r4
 8000578:	f101 36ff 	add.w	r6, r1, #4294967295
 800057c:	d213      	bcs.n	80005a6 <__udivmoddi4+0x296>
 800057e:	42a3      	cmp	r3, r4
 8000580:	d911      	bls.n	80005a6 <__udivmoddi4+0x296>
 8000582:	3902      	subs	r1, #2
 8000584:	4464      	add	r4, ip
 8000586:	1ae4      	subs	r4, r4, r3
 8000588:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800058c:	e739      	b.n	8000402 <__udivmoddi4+0xf2>
 800058e:	4604      	mov	r4, r0
 8000590:	e6f0      	b.n	8000374 <__udivmoddi4+0x64>
 8000592:	4608      	mov	r0, r1
 8000594:	e706      	b.n	80003a4 <__udivmoddi4+0x94>
 8000596:	45c8      	cmp	r8, r9
 8000598:	d2ae      	bcs.n	80004f8 <__udivmoddi4+0x1e8>
 800059a:	ebb9 0e02 	subs.w	lr, r9, r2
 800059e:	eb63 0c07 	sbc.w	ip, r3, r7
 80005a2:	3801      	subs	r0, #1
 80005a4:	e7a8      	b.n	80004f8 <__udivmoddi4+0x1e8>
 80005a6:	4631      	mov	r1, r6
 80005a8:	e7ed      	b.n	8000586 <__udivmoddi4+0x276>
 80005aa:	4603      	mov	r3, r0
 80005ac:	e799      	b.n	80004e2 <__udivmoddi4+0x1d2>
 80005ae:	4630      	mov	r0, r6
 80005b0:	e7d4      	b.n	800055c <__udivmoddi4+0x24c>
 80005b2:	46d6      	mov	lr, sl
 80005b4:	e77f      	b.n	80004b6 <__udivmoddi4+0x1a6>
 80005b6:	4463      	add	r3, ip
 80005b8:	3802      	subs	r0, #2
 80005ba:	e74d      	b.n	8000458 <__udivmoddi4+0x148>
 80005bc:	4606      	mov	r6, r0
 80005be:	4623      	mov	r3, r4
 80005c0:	4608      	mov	r0, r1
 80005c2:	e70f      	b.n	80003e4 <__udivmoddi4+0xd4>
 80005c4:	3e02      	subs	r6, #2
 80005c6:	4463      	add	r3, ip
 80005c8:	e730      	b.n	800042c <__udivmoddi4+0x11c>
 80005ca:	bf00      	nop

080005cc <__aeabi_idiv0>:
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop

080005d0 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 80005d0:	b480      	push	{r7}
 80005d2:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80005d4:	f3bf 8f4f 	dsb	sy
}
 80005d8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80005da:	f3bf 8f6f 	isb	sy
}
 80005de:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80005e0:	4b0d      	ldr	r3, [pc, #52]	@ (8000618 <SCB_EnableICache+0x48>)
 80005e2:	2200      	movs	r2, #0
 80005e4:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80005e8:	f3bf 8f4f 	dsb	sy
}
 80005ec:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80005ee:	f3bf 8f6f 	isb	sy
}
 80005f2:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80005f4:	4b08      	ldr	r3, [pc, #32]	@ (8000618 <SCB_EnableICache+0x48>)
 80005f6:	695b      	ldr	r3, [r3, #20]
 80005f8:	4a07      	ldr	r2, [pc, #28]	@ (8000618 <SCB_EnableICache+0x48>)
 80005fa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80005fe:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000600:	f3bf 8f4f 	dsb	sy
}
 8000604:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000606:	f3bf 8f6f 	isb	sy
}
 800060a:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 800060c:	bf00      	nop
 800060e:	46bd      	mov	sp, r7
 8000610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000614:	4770      	bx	lr
 8000616:	bf00      	nop
 8000618:	e000ed00 	.word	0xe000ed00

0800061c <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 800061c:	b480      	push	{r7}
 800061e:	b085      	sub	sp, #20
 8000620:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8000622:	4b1f      	ldr	r3, [pc, #124]	@ (80006a0 <SCB_EnableDCache+0x84>)
 8000624:	2200      	movs	r2, #0
 8000626:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800062a:	f3bf 8f4f 	dsb	sy
}
 800062e:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000630:	4b1b      	ldr	r3, [pc, #108]	@ (80006a0 <SCB_EnableDCache+0x84>)
 8000632:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000636:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	0b5b      	lsrs	r3, r3, #13
 800063c:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000640:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	08db      	lsrs	r3, r3, #3
 8000646:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800064a:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800064c:	68fb      	ldr	r3, [r7, #12]
 800064e:	015a      	lsls	r2, r3, #5
 8000650:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 8000654:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000656:	68ba      	ldr	r2, [r7, #8]
 8000658:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800065a:	4911      	ldr	r1, [pc, #68]	@ (80006a0 <SCB_EnableDCache+0x84>)
 800065c:	4313      	orrs	r3, r2
 800065e:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000662:	68bb      	ldr	r3, [r7, #8]
 8000664:	1e5a      	subs	r2, r3, #1
 8000666:	60ba      	str	r2, [r7, #8]
 8000668:	2b00      	cmp	r3, #0
 800066a:	d1ef      	bne.n	800064c <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 800066c:	68fb      	ldr	r3, [r7, #12]
 800066e:	1e5a      	subs	r2, r3, #1
 8000670:	60fa      	str	r2, [r7, #12]
 8000672:	2b00      	cmp	r3, #0
 8000674:	d1e5      	bne.n	8000642 <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 8000676:	f3bf 8f4f 	dsb	sy
}
 800067a:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 800067c:	4b08      	ldr	r3, [pc, #32]	@ (80006a0 <SCB_EnableDCache+0x84>)
 800067e:	695b      	ldr	r3, [r3, #20]
 8000680:	4a07      	ldr	r2, [pc, #28]	@ (80006a0 <SCB_EnableDCache+0x84>)
 8000682:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000686:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000688:	f3bf 8f4f 	dsb	sy
}
 800068c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800068e:	f3bf 8f6f 	isb	sy
}
 8000692:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8000694:	bf00      	nop
 8000696:	3714      	adds	r7, #20
 8000698:	46bd      	mov	sp, r7
 800069a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069e:	4770      	bx	lr
 80006a0:	e000ed00 	.word	0xe000ed00

080006a4 <PWM_SetDutyCycle.0>:
  */
int main(void)
{

  /* USER CODE BEGIN 1 */
	void PWM_SetDutyCycle(uint8_t duty) {
 80006a4:	b480      	push	{r7}
 80006a6:	b085      	sub	sp, #20
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	4603      	mov	r3, r0
 80006ac:	71fb      	strb	r3, [r7, #7]
 80006ae:	f8c7 c000 	str.w	ip, [r7]
		uint32_t pulse = (duty * (__HAL_TIM_GET_AUTORELOAD(&htim2))) / 100;
 80006b2:	79fb      	ldrb	r3, [r7, #7]
 80006b4:	4a09      	ldr	r2, [pc, #36]	@ (80006dc <PWM_SetDutyCycle.0+0x38>)
 80006b6:	6812      	ldr	r2, [r2, #0]
 80006b8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80006ba:	fb02 f303 	mul.w	r3, r2, r3
 80006be:	4a08      	ldr	r2, [pc, #32]	@ (80006e0 <PWM_SetDutyCycle.0+0x3c>)
 80006c0:	fba2 2303 	umull	r2, r3, r2, r3
 80006c4:	095b      	lsrs	r3, r3, #5
 80006c6:	60fb      	str	r3, [r7, #12]
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, pulse);
 80006c8:	4b04      	ldr	r3, [pc, #16]	@ (80006dc <PWM_SetDutyCycle.0+0x38>)
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	68fa      	ldr	r2, [r7, #12]
 80006ce:	635a      	str	r2, [r3, #52]	@ 0x34
	}
 80006d0:	bf00      	nop
 80006d2:	3714      	adds	r7, #20
 80006d4:	46bd      	mov	sp, r7
 80006d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006da:	4770      	bx	lr
 80006dc:	200001c4 	.word	0x200001c4
 80006e0:	51eb851f 	.word	0x51eb851f

080006e4 <main>:
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b086      	sub	sp, #24
 80006e8:	af02      	add	r7, sp, #8
int main(void)
 80006ea:	f107 0318 	add.w	r3, r7, #24
 80006ee:	603b      	str	r3, [r7, #0]
  /* USER CODE END 1 */

  /* Enable the CPU Cache */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 80006f0:	f7ff ff6e 	bl	80005d0 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 80006f4:	f7ff ff92 	bl	800061c <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006f8:	f001 fac6 	bl	8001c88 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006fc:	f000 f908 	bl	8000910 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000700:	f000 fae2 	bl	8000cc8 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000704:	f000 f972 	bl	80009ec <MX_ADC1_Init>
  MX_RNG_Init();
 8000708:	f000 f9c2 	bl	8000a90 <MX_RNG_Init>
  MX_SPI5_Init();
 800070c:	f000 f9d4 	bl	8000ab8 <MX_SPI5_Init>
  MX_TIM1_Init();
 8000710:	f000 fa10 	bl	8000b34 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000714:	f000 fa62 	bl	8000bdc <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  ILI9341_Init();
 8000718:	f000 ffae 	bl	8001678 <ILI9341_Init>
  ILI9341_Set_Rotation(SCREEN_HORIZONTAL_1);  // หมุนหน้าจอเป็นแนวนอน
 800071c:	2001      	movs	r0, #1
 800071e:	f000 ff4d 	bl	80015bc <ILI9341_Set_Rotation>
  ILI9341_Fill_Screen(GREEN);
 8000722:	f44f 60fc 	mov.w	r0, #2016	@ 0x7e0
 8000726:	f001 f953 	bl	80019d0 <ILI9341_Fill_Screen>

  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 800072a:	2100      	movs	r1, #0
 800072c:	486e      	ldr	r0, [pc, #440]	@ (80008e8 <main+0x204>)
 800072e:	f003 ff43 	bl	80045b8 <HAL_TIM_PWM_Start>
  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, DutyCycle);
 8000732:	4b6e      	ldr	r3, [pc, #440]	@ (80008ec <main+0x208>)
 8000734:	681a      	ldr	r2, [r3, #0]
 8000736:	4b6c      	ldr	r3, [pc, #432]	@ (80008e8 <main+0x204>)
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	635a      	str	r2, [r3, #52]	@ 0x34

  HAL_ADC_Start(&hadc1);
 800073c:	486c      	ldr	r0, [pc, #432]	@ (80008f0 <main+0x20c>)
 800073e:	f001 fb77 	bl	8001e30 <HAL_ADC_Start>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  while (HAL_ADC_PollForConversion(&hadc1, 1000) != HAL_OK){}
 8000742:	bf00      	nop
 8000744:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000748:	4869      	ldr	r0, [pc, #420]	@ (80008f0 <main+0x20c>)
 800074a:	f001 fc3f 	bl	8001fcc <HAL_ADC_PollForConversion>
 800074e:	4603      	mov	r3, r0
 8000750:	2b00      	cmp	r3, #0
 8000752:	d1f7      	bne.n	8000744 <main+0x60>
	 	  int adc_value = HAL_ADC_GetValue(&hadc1);
 8000754:	4866      	ldr	r0, [pc, #408]	@ (80008f0 <main+0x20c>)
 8000756:	f001 fcc4 	bl	80020e2 <HAL_ADC_GetValue>
 800075a:	4603      	mov	r3, r0
 800075c:	60bb      	str	r3, [r7, #8]

	 	  // แปลงค่า ADC (0-4095) เป็น Duty Cycle (25% - 80%)
	 	  uint8_t duty = 25 + ((adc_value * 55) / 4095);
 800075e:	68ba      	ldr	r2, [r7, #8]
 8000760:	4613      	mov	r3, r2
 8000762:	00db      	lsls	r3, r3, #3
 8000764:	1a9b      	subs	r3, r3, r2
 8000766:	00db      	lsls	r3, r3, #3
 8000768:	1a9b      	subs	r3, r3, r2
 800076a:	4a62      	ldr	r2, [pc, #392]	@ (80008f4 <main+0x210>)
 800076c:	fb82 1203 	smull	r1, r2, r2, r3
 8000770:	441a      	add	r2, r3
 8000772:	12d2      	asrs	r2, r2, #11
 8000774:	17db      	asrs	r3, r3, #31
 8000776:	1ad3      	subs	r3, r2, r3
 8000778:	b2db      	uxtb	r3, r3
 800077a:	3319      	adds	r3, #25
 800077c:	71fb      	strb	r3, [r7, #7]

	 	  // ปรับค่าเป็นขั้นละ 5% (เช่น 25%, 30%, 35%, ..., 80%) ((duty + 2) / 5) * 5
	 	  // ปรับค่าเป็นขั้นละ 10% (เช่น 25%, 30%, 35%, ..., 80%) ((duty + 5) / 10) * 10
	 	  duty = ((duty + 2) / 5) * 5;
 800077e:	79fb      	ldrb	r3, [r7, #7]
 8000780:	3302      	adds	r3, #2
 8000782:	4a5d      	ldr	r2, [pc, #372]	@ (80008f8 <main+0x214>)
 8000784:	fb82 1203 	smull	r1, r2, r2, r3
 8000788:	1052      	asrs	r2, r2, #1
 800078a:	17db      	asrs	r3, r3, #31
 800078c:	1ad3      	subs	r3, r2, r3
 800078e:	b2db      	uxtb	r3, r3
 8000790:	461a      	mov	r2, r3
 8000792:	0092      	lsls	r2, r2, #2
 8000794:	4413      	add	r3, r2
 8000796:	71fb      	strb	r3, [r7, #7]

	 	  PWM_SetDutyCycle(duty);
 8000798:	79fb      	ldrb	r3, [r7, #7]
 800079a:	463a      	mov	r2, r7
 800079c:	4694      	mov	ip, r2
 800079e:	4618      	mov	r0, r3
 80007a0:	f7ff ff80 	bl	80006a4 <PWM_SetDutyCycle.0>

	 	 // อัปเดตหน้าจอเมื่อค่าเปลี่ยนแปลงเท่านั้น
	 	        uint16_t new_color;
	 	        if (duty > 25 && duty <= 45) {
 80007a4:	79fb      	ldrb	r3, [r7, #7]
 80007a6:	2b19      	cmp	r3, #25
 80007a8:	d906      	bls.n	80007b8 <main+0xd4>
 80007aa:	79fb      	ldrb	r3, [r7, #7]
 80007ac:	2b2d      	cmp	r3, #45	@ 0x2d
 80007ae:	d803      	bhi.n	80007b8 <main+0xd4>
	 	            new_color = GREEN;
 80007b0:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 80007b4:	81fb      	strh	r3, [r7, #14]
 80007b6:	e011      	b.n	80007dc <main+0xf8>
	 	        } else if (duty > 45 && duty <= 65) {
 80007b8:	79fb      	ldrb	r3, [r7, #7]
 80007ba:	2b2d      	cmp	r3, #45	@ 0x2d
 80007bc:	d906      	bls.n	80007cc <main+0xe8>
 80007be:	79fb      	ldrb	r3, [r7, #7]
 80007c0:	2b41      	cmp	r3, #65	@ 0x41
 80007c2:	d803      	bhi.n	80007cc <main+0xe8>
	 	            new_color = RED;
 80007c4:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80007c8:	81fb      	strh	r3, [r7, #14]
 80007ca:	e007      	b.n	80007dc <main+0xf8>
	 	        } else if (duty > 65 && duty <= 80) {
 80007cc:	79fb      	ldrb	r3, [r7, #7]
 80007ce:	2b41      	cmp	r3, #65	@ 0x41
 80007d0:	d904      	bls.n	80007dc <main+0xf8>
 80007d2:	79fb      	ldrb	r3, [r7, #7]
 80007d4:	2b50      	cmp	r3, #80	@ 0x50
 80007d6:	d801      	bhi.n	80007dc <main+0xf8>
	 	            new_color = BLUE;
 80007d8:	231f      	movs	r3, #31
 80007da:	81fb      	strh	r3, [r7, #14]
	 	        }

	 	        if (new_color != last_color) {
 80007dc:	4b47      	ldr	r3, [pc, #284]	@ (80008fc <main+0x218>)
 80007de:	881b      	ldrh	r3, [r3, #0]
 80007e0:	89fa      	ldrh	r2, [r7, #14]
 80007e2:	429a      	cmp	r2, r3
 80007e4:	d007      	beq.n	80007f6 <main+0x112>
	 	            last_color = new_color;
 80007e6:	4a45      	ldr	r2, [pc, #276]	@ (80008fc <main+0x218>)
 80007e8:	89fb      	ldrh	r3, [r7, #14]
 80007ea:	8013      	strh	r3, [r2, #0]
	 	            ILI9341_Fill_Screen(last_color);
 80007ec:	4b43      	ldr	r3, [pc, #268]	@ (80008fc <main+0x218>)
 80007ee:	881b      	ldrh	r3, [r3, #0]
 80007f0:	4618      	mov	r0, r3
 80007f2:	f001 f8ed 	bl	80019d0 <ILI9341_Fill_Screen>
	 	        }

	 	        if (duty != last_duty || duty > 65 && duty <= 80) {
 80007f6:	4b42      	ldr	r3, [pc, #264]	@ (8000900 <main+0x21c>)
 80007f8:	781b      	ldrb	r3, [r3, #0]
 80007fa:	79fa      	ldrb	r2, [r7, #7]
 80007fc:	429a      	cmp	r2, r3
 80007fe:	d105      	bne.n	800080c <main+0x128>
 8000800:	79fb      	ldrb	r3, [r7, #7]
 8000802:	2b41      	cmp	r3, #65	@ 0x41
 8000804:	d96c      	bls.n	80008e0 <main+0x1fc>
 8000806:	79fb      	ldrb	r3, [r7, #7]
 8000808:	2b50      	cmp	r3, #80	@ 0x50
 800080a:	d869      	bhi.n	80008e0 <main+0x1fc>
	 	            last_duty = duty;
 800080c:	4a3c      	ldr	r2, [pc, #240]	@ (8000900 <main+0x21c>)
 800080e:	79fb      	ldrb	r3, [r7, #7]
 8000810:	7013      	strb	r3, [r2, #0]
	 	            snprintf(show, sizeof(show), "%d", duty);
 8000812:	79fb      	ldrb	r3, [r7, #7]
 8000814:	4a3b      	ldr	r2, [pc, #236]	@ (8000904 <main+0x220>)
 8000816:	2132      	movs	r1, #50	@ 0x32
 8000818:	483b      	ldr	r0, [pc, #236]	@ (8000908 <main+0x224>)
 800081a:	f004 fdfd 	bl	8005418 <sniprintf>
	 	            ILI9341_Draw_Filled_Rectangle_Coord(140, 100, 100, 40, last_color); // เคลียร์ตัวเลขเก่า
 800081e:	4b37      	ldr	r3, [pc, #220]	@ (80008fc <main+0x218>)
 8000820:	881b      	ldrh	r3, [r3, #0]
 8000822:	9300      	str	r3, [sp, #0]
 8000824:	2328      	movs	r3, #40	@ 0x28
 8000826:	2264      	movs	r2, #100	@ 0x64
 8000828:	2164      	movs	r1, #100	@ 0x64
 800082a:	208c      	movs	r0, #140	@ 0x8c
 800082c:	f000 fcd1 	bl	80011d2 <ILI9341_Draw_Filled_Rectangle_Coord>
	 	            ILI9341_Draw_Text(show, 140, 100, YELLOW, 5, last_color);
 8000830:	4b32      	ldr	r3, [pc, #200]	@ (80008fc <main+0x218>)
 8000832:	881b      	ldrh	r3, [r3, #0]
 8000834:	9301      	str	r3, [sp, #4]
 8000836:	2305      	movs	r3, #5
 8000838:	9300      	str	r3, [sp, #0]
 800083a:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 800083e:	2264      	movs	r2, #100	@ 0x64
 8000840:	218c      	movs	r1, #140	@ 0x8c
 8000842:	4831      	ldr	r0, [pc, #196]	@ (8000908 <main+0x224>)
 8000844:	f000 fdbe 	bl	80013c4 <ILI9341_Draw_Text>
	 	           // กระพริบตัวหนังสือเมื่ออยู่ในช่วง 65-80%
	 	           if (duty > 65 && duty <= 80) {
 8000848:	79fb      	ldrb	r3, [r7, #7]
 800084a:	2b41      	cmp	r3, #65	@ 0x41
 800084c:	d924      	bls.n	8000898 <main+0x1b4>
 800084e:	79fb      	ldrb	r3, [r7, #7]
 8000850:	2b50      	cmp	r3, #80	@ 0x50
 8000852:	d821      	bhi.n	8000898 <main+0x1b4>
	 	                           blink_state = !blink_state;
 8000854:	4b2d      	ldr	r3, [pc, #180]	@ (800090c <main+0x228>)
 8000856:	781b      	ldrb	r3, [r3, #0]
 8000858:	2b00      	cmp	r3, #0
 800085a:	bf0c      	ite	eq
 800085c:	2301      	moveq	r3, #1
 800085e:	2300      	movne	r3, #0
 8000860:	b2db      	uxtb	r3, r3
 8000862:	461a      	mov	r2, r3
 8000864:	4b29      	ldr	r3, [pc, #164]	@ (800090c <main+0x228>)
 8000866:	701a      	strb	r2, [r3, #0]
	 	                           ILI9341_Draw_Text(show, 140, 100, blink_state ? CYAN : last_color, 5, last_color);
 8000868:	4b28      	ldr	r3, [pc, #160]	@ (800090c <main+0x228>)
 800086a:	781b      	ldrb	r3, [r3, #0]
 800086c:	2b00      	cmp	r3, #0
 800086e:	d102      	bne.n	8000876 <main+0x192>
 8000870:	4b22      	ldr	r3, [pc, #136]	@ (80008fc <main+0x218>)
 8000872:	881b      	ldrh	r3, [r3, #0]
 8000874:	e001      	b.n	800087a <main+0x196>
 8000876:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 800087a:	4a20      	ldr	r2, [pc, #128]	@ (80008fc <main+0x218>)
 800087c:	8812      	ldrh	r2, [r2, #0]
 800087e:	9201      	str	r2, [sp, #4]
 8000880:	2205      	movs	r2, #5
 8000882:	9200      	str	r2, [sp, #0]
 8000884:	2264      	movs	r2, #100	@ 0x64
 8000886:	218c      	movs	r1, #140	@ 0x8c
 8000888:	481f      	ldr	r0, [pc, #124]	@ (8000908 <main+0x224>)
 800088a:	f000 fd9b 	bl	80013c4 <ILI9341_Draw_Text>
	 	                           HAL_Delay(500);
 800088e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000892:	f001 fa65 	bl	8001d60 <HAL_Delay>
 8000896:	e023      	b.n	80008e0 <main+0x1fc>
	 	                      } else if(duty > 25 && duty <= 45){
 8000898:	79fb      	ldrb	r3, [r7, #7]
 800089a:	2b19      	cmp	r3, #25
 800089c:	d90f      	bls.n	80008be <main+0x1da>
 800089e:	79fb      	ldrb	r3, [r7, #7]
 80008a0:	2b2d      	cmp	r3, #45	@ 0x2d
 80008a2:	d80c      	bhi.n	80008be <main+0x1da>
	 	                          ILI9341_Draw_Text(show, 140, 100, YELLOW, 5, last_color);
 80008a4:	4b15      	ldr	r3, [pc, #84]	@ (80008fc <main+0x218>)
 80008a6:	881b      	ldrh	r3, [r3, #0]
 80008a8:	9301      	str	r3, [sp, #4]
 80008aa:	2305      	movs	r3, #5
 80008ac:	9300      	str	r3, [sp, #0]
 80008ae:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 80008b2:	2264      	movs	r2, #100	@ 0x64
 80008b4:	218c      	movs	r1, #140	@ 0x8c
 80008b6:	4814      	ldr	r0, [pc, #80]	@ (8000908 <main+0x224>)
 80008b8:	f000 fd84 	bl	80013c4 <ILI9341_Draw_Text>
 80008bc:	e010      	b.n	80008e0 <main+0x1fc>
	 	                      } else if(duty > 45 && duty <= 65){
 80008be:	79fb      	ldrb	r3, [r7, #7]
 80008c0:	2b2d      	cmp	r3, #45	@ 0x2d
 80008c2:	d90d      	bls.n	80008e0 <main+0x1fc>
 80008c4:	79fb      	ldrb	r3, [r7, #7]
 80008c6:	2b41      	cmp	r3, #65	@ 0x41
 80008c8:	d80a      	bhi.n	80008e0 <main+0x1fc>
	 	       	 	              ILI9341_Draw_Text(show, 140, 100, BLUE, 5, last_color);
 80008ca:	4b0c      	ldr	r3, [pc, #48]	@ (80008fc <main+0x218>)
 80008cc:	881b      	ldrh	r3, [r3, #0]
 80008ce:	9301      	str	r3, [sp, #4]
 80008d0:	2305      	movs	r3, #5
 80008d2:	9300      	str	r3, [sp, #0]
 80008d4:	231f      	movs	r3, #31
 80008d6:	2264      	movs	r2, #100	@ 0x64
 80008d8:	218c      	movs	r1, #140	@ 0x8c
 80008da:	480b      	ldr	r0, [pc, #44]	@ (8000908 <main+0x224>)
 80008dc:	f000 fd72 	bl	80013c4 <ILI9341_Draw_Text>
	 	       	 	          }

	 	        }
	 	        HAL_Delay(100);
 80008e0:	2064      	movs	r0, #100	@ 0x64
 80008e2:	f001 fa3d 	bl	8001d60 <HAL_Delay>
  {
 80008e6:	e72c      	b.n	8000742 <main+0x5e>
 80008e8:	200001c4 	.word	0x200001c4
 80008ec:	20000000 	.word	0x20000000
 80008f0:	200000bc 	.word	0x200000bc
 80008f4:	80080081 	.word	0x80080081
 80008f8:	66666667 	.word	0x66666667
 80008fc:	20000004 	.word	0x20000004
 8000900:	200000ba 	.word	0x200000ba
 8000904:	08005d98 	.word	0x08005d98
 8000908:	20000088 	.word	0x20000088
 800090c:	20000084 	.word	0x20000084

08000910 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b094      	sub	sp, #80	@ 0x50
 8000914:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000916:	f107 031c 	add.w	r3, r7, #28
 800091a:	2234      	movs	r2, #52	@ 0x34
 800091c:	2100      	movs	r1, #0
 800091e:	4618      	mov	r0, r3
 8000920:	f004 fdae 	bl	8005480 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000924:	f107 0308 	add.w	r3, r7, #8
 8000928:	2200      	movs	r2, #0
 800092a:	601a      	str	r2, [r3, #0]
 800092c:	605a      	str	r2, [r3, #4]
 800092e:	609a      	str	r2, [r3, #8]
 8000930:	60da      	str	r2, [r3, #12]
 8000932:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000934:	4b2b      	ldr	r3, [pc, #172]	@ (80009e4 <SystemClock_Config+0xd4>)
 8000936:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000938:	4a2a      	ldr	r2, [pc, #168]	@ (80009e4 <SystemClock_Config+0xd4>)
 800093a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800093e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000940:	4b28      	ldr	r3, [pc, #160]	@ (80009e4 <SystemClock_Config+0xd4>)
 8000942:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000944:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000948:	607b      	str	r3, [r7, #4]
 800094a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800094c:	4b26      	ldr	r3, [pc, #152]	@ (80009e8 <SystemClock_Config+0xd8>)
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	4a25      	ldr	r2, [pc, #148]	@ (80009e8 <SystemClock_Config+0xd8>)
 8000952:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000956:	6013      	str	r3, [r2, #0]
 8000958:	4b23      	ldr	r3, [pc, #140]	@ (80009e8 <SystemClock_Config+0xd8>)
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000960:	603b      	str	r3, [r7, #0]
 8000962:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000964:	2302      	movs	r3, #2
 8000966:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000968:	2301      	movs	r3, #1
 800096a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800096c:	2310      	movs	r3, #16
 800096e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000970:	2302      	movs	r3, #2
 8000972:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000974:	2300      	movs	r3, #0
 8000976:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000978:	2308      	movs	r3, #8
 800097a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 800097c:	23d8      	movs	r3, #216	@ 0xd8
 800097e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000980:	2302      	movs	r3, #2
 8000982:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8000984:	2309      	movs	r3, #9
 8000986:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000988:	2302      	movs	r3, #2
 800098a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800098c:	f107 031c 	add.w	r3, r7, #28
 8000990:	4618      	mov	r0, r3
 8000992:	f002 f8ff 	bl	8002b94 <HAL_RCC_OscConfig>
 8000996:	4603      	mov	r3, r0
 8000998:	2b00      	cmp	r3, #0
 800099a:	d001      	beq.n	80009a0 <SystemClock_Config+0x90>
  {
    Error_Handler();
 800099c:	f000 fa2e 	bl	8000dfc <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80009a0:	f002 f8a8 	bl	8002af4 <HAL_PWREx_EnableOverDrive>
 80009a4:	4603      	mov	r3, r0
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d001      	beq.n	80009ae <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80009aa:	f000 fa27 	bl	8000dfc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009ae:	230f      	movs	r3, #15
 80009b0:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009b2:	2302      	movs	r3, #2
 80009b4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009b6:	2300      	movs	r3, #0
 80009b8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80009ba:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80009be:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80009c0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80009c4:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80009c6:	f107 0308 	add.w	r3, r7, #8
 80009ca:	2107      	movs	r1, #7
 80009cc:	4618      	mov	r0, r3
 80009ce:	f002 fb8f 	bl	80030f0 <HAL_RCC_ClockConfig>
 80009d2:	4603      	mov	r3, r0
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d001      	beq.n	80009dc <SystemClock_Config+0xcc>
  {
    Error_Handler();
 80009d8:	f000 fa10 	bl	8000dfc <Error_Handler>
  }
}
 80009dc:	bf00      	nop
 80009de:	3750      	adds	r7, #80	@ 0x50
 80009e0:	46bd      	mov	sp, r7
 80009e2:	bd80      	pop	{r7, pc}
 80009e4:	40023800 	.word	0x40023800
 80009e8:	40007000 	.word	0x40007000

080009ec <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b084      	sub	sp, #16
 80009f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80009f2:	463b      	mov	r3, r7
 80009f4:	2200      	movs	r2, #0
 80009f6:	601a      	str	r2, [r3, #0]
 80009f8:	605a      	str	r2, [r3, #4]
 80009fa:	609a      	str	r2, [r3, #8]
 80009fc:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80009fe:	4b21      	ldr	r3, [pc, #132]	@ (8000a84 <MX_ADC1_Init+0x98>)
 8000a00:	4a21      	ldr	r2, [pc, #132]	@ (8000a88 <MX_ADC1_Init+0x9c>)
 8000a02:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000a04:	4b1f      	ldr	r3, [pc, #124]	@ (8000a84 <MX_ADC1_Init+0x98>)
 8000a06:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000a0a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000a0c:	4b1d      	ldr	r3, [pc, #116]	@ (8000a84 <MX_ADC1_Init+0x98>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000a12:	4b1c      	ldr	r3, [pc, #112]	@ (8000a84 <MX_ADC1_Init+0x98>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000a18:	4b1a      	ldr	r3, [pc, #104]	@ (8000a84 <MX_ADC1_Init+0x98>)
 8000a1a:	2201      	movs	r2, #1
 8000a1c:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000a1e:	4b19      	ldr	r3, [pc, #100]	@ (8000a84 <MX_ADC1_Init+0x98>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000a26:	4b17      	ldr	r3, [pc, #92]	@ (8000a84 <MX_ADC1_Init+0x98>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a2c:	4b15      	ldr	r3, [pc, #84]	@ (8000a84 <MX_ADC1_Init+0x98>)
 8000a2e:	4a17      	ldr	r2, [pc, #92]	@ (8000a8c <MX_ADC1_Init+0xa0>)
 8000a30:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000a32:	4b14      	ldr	r3, [pc, #80]	@ (8000a84 <MX_ADC1_Init+0x98>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000a38:	4b12      	ldr	r3, [pc, #72]	@ (8000a84 <MX_ADC1_Init+0x98>)
 8000a3a:	2201      	movs	r2, #1
 8000a3c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000a3e:	4b11      	ldr	r3, [pc, #68]	@ (8000a84 <MX_ADC1_Init+0x98>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000a46:	4b0f      	ldr	r3, [pc, #60]	@ (8000a84 <MX_ADC1_Init+0x98>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000a4c:	480d      	ldr	r0, [pc, #52]	@ (8000a84 <MX_ADC1_Init+0x98>)
 8000a4e:	f001 f9ab 	bl	8001da8 <HAL_ADC_Init>
 8000a52:	4603      	mov	r3, r0
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d001      	beq.n	8000a5c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000a58:	f000 f9d0 	bl	8000dfc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000a5c:	230a      	movs	r3, #10
 8000a5e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000a60:	2301      	movs	r3, #1
 8000a62:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000a64:	2300      	movs	r3, #0
 8000a66:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a68:	463b      	mov	r3, r7
 8000a6a:	4619      	mov	r1, r3
 8000a6c:	4805      	ldr	r0, [pc, #20]	@ (8000a84 <MX_ADC1_Init+0x98>)
 8000a6e:	f001 fb45 	bl	80020fc <HAL_ADC_ConfigChannel>
 8000a72:	4603      	mov	r3, r0
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d001      	beq.n	8000a7c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000a78:	f000 f9c0 	bl	8000dfc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000a7c:	bf00      	nop
 8000a7e:	3710      	adds	r7, #16
 8000a80:	46bd      	mov	sp, r7
 8000a82:	bd80      	pop	{r7, pc}
 8000a84:	200000bc 	.word	0x200000bc
 8000a88:	40012000 	.word	0x40012000
 8000a8c:	0f000001 	.word	0x0f000001

08000a90 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8000a94:	4b06      	ldr	r3, [pc, #24]	@ (8000ab0 <MX_RNG_Init+0x20>)
 8000a96:	4a07      	ldr	r2, [pc, #28]	@ (8000ab4 <MX_RNG_Init+0x24>)
 8000a98:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8000a9a:	4805      	ldr	r0, [pc, #20]	@ (8000ab0 <MX_RNG_Init+0x20>)
 8000a9c:	f003 f902 	bl	8003ca4 <HAL_RNG_Init>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d001      	beq.n	8000aaa <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 8000aa6:	f000 f9a9 	bl	8000dfc <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8000aaa:	bf00      	nop
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	20000104 	.word	0x20000104
 8000ab4:	50060800 	.word	0x50060800

08000ab8 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8000abc:	4b1b      	ldr	r3, [pc, #108]	@ (8000b2c <MX_SPI5_Init+0x74>)
 8000abe:	4a1c      	ldr	r2, [pc, #112]	@ (8000b30 <MX_SPI5_Init+0x78>)
 8000ac0:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8000ac2:	4b1a      	ldr	r3, [pc, #104]	@ (8000b2c <MX_SPI5_Init+0x74>)
 8000ac4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000ac8:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8000aca:	4b18      	ldr	r3, [pc, #96]	@ (8000b2c <MX_SPI5_Init+0x74>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8000ad0:	4b16      	ldr	r3, [pc, #88]	@ (8000b2c <MX_SPI5_Init+0x74>)
 8000ad2:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8000ad6:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000ad8:	4b14      	ldr	r3, [pc, #80]	@ (8000b2c <MX_SPI5_Init+0x74>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ade:	4b13      	ldr	r3, [pc, #76]	@ (8000b2c <MX_SPI5_Init+0x74>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8000ae4:	4b11      	ldr	r3, [pc, #68]	@ (8000b2c <MX_SPI5_Init+0x74>)
 8000ae6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000aea:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000aec:	4b0f      	ldr	r3, [pc, #60]	@ (8000b2c <MX_SPI5_Init+0x74>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000af2:	4b0e      	ldr	r3, [pc, #56]	@ (8000b2c <MX_SPI5_Init+0x74>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8000af8:	4b0c      	ldr	r3, [pc, #48]	@ (8000b2c <MX_SPI5_Init+0x74>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000afe:	4b0b      	ldr	r3, [pc, #44]	@ (8000b2c <MX_SPI5_Init+0x74>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi5.Init.CRCPolynomial = 7;
 8000b04:	4b09      	ldr	r3, [pc, #36]	@ (8000b2c <MX_SPI5_Init+0x74>)
 8000b06:	2207      	movs	r2, #7
 8000b08:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi5.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000b0a:	4b08      	ldr	r3, [pc, #32]	@ (8000b2c <MX_SPI5_Init+0x74>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi5.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000b10:	4b06      	ldr	r3, [pc, #24]	@ (8000b2c <MX_SPI5_Init+0x74>)
 8000b12:	2208      	movs	r2, #8
 8000b14:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8000b16:	4805      	ldr	r0, [pc, #20]	@ (8000b2c <MX_SPI5_Init+0x74>)
 8000b18:	f003 f8ee 	bl	8003cf8 <HAL_SPI_Init>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d001      	beq.n	8000b26 <MX_SPI5_Init+0x6e>
  {
    Error_Handler();
 8000b22:	f000 f96b 	bl	8000dfc <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8000b26:	bf00      	nop
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	bf00      	nop
 8000b2c:	20000114 	.word	0x20000114
 8000b30:	40015000 	.word	0x40015000

08000b34 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b088      	sub	sp, #32
 8000b38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b3a:	f107 0310 	add.w	r3, r7, #16
 8000b3e:	2200      	movs	r2, #0
 8000b40:	601a      	str	r2, [r3, #0]
 8000b42:	605a      	str	r2, [r3, #4]
 8000b44:	609a      	str	r2, [r3, #8]
 8000b46:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b48:	1d3b      	adds	r3, r7, #4
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	601a      	str	r2, [r3, #0]
 8000b4e:	605a      	str	r2, [r3, #4]
 8000b50:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000b52:	4b20      	ldr	r3, [pc, #128]	@ (8000bd4 <MX_TIM1_Init+0xa0>)
 8000b54:	4a20      	ldr	r2, [pc, #128]	@ (8000bd8 <MX_TIM1_Init+0xa4>)
 8000b56:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 216-1;
 8000b58:	4b1e      	ldr	r3, [pc, #120]	@ (8000bd4 <MX_TIM1_Init+0xa0>)
 8000b5a:	22d7      	movs	r2, #215	@ 0xd7
 8000b5c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b5e:	4b1d      	ldr	r3, [pc, #116]	@ (8000bd4 <MX_TIM1_Init+0xa0>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 8000b64:	4b1b      	ldr	r3, [pc, #108]	@ (8000bd4 <MX_TIM1_Init+0xa0>)
 8000b66:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000b6a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b6c:	4b19      	ldr	r3, [pc, #100]	@ (8000bd4 <MX_TIM1_Init+0xa0>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000b72:	4b18      	ldr	r3, [pc, #96]	@ (8000bd4 <MX_TIM1_Init+0xa0>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b78:	4b16      	ldr	r3, [pc, #88]	@ (8000bd4 <MX_TIM1_Init+0xa0>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000b7e:	4815      	ldr	r0, [pc, #84]	@ (8000bd4 <MX_TIM1_Init+0xa0>)
 8000b80:	f003 fc62 	bl	8004448 <HAL_TIM_Base_Init>
 8000b84:	4603      	mov	r3, r0
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d001      	beq.n	8000b8e <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8000b8a:	f000 f937 	bl	8000dfc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b8e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b92:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000b94:	f107 0310 	add.w	r3, r7, #16
 8000b98:	4619      	mov	r1, r3
 8000b9a:	480e      	ldr	r0, [pc, #56]	@ (8000bd4 <MX_TIM1_Init+0xa0>)
 8000b9c:	f003 ff1a 	bl	80049d4 <HAL_TIM_ConfigClockSource>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d001      	beq.n	8000baa <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8000ba6:	f000 f929 	bl	8000dfc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000baa:	2300      	movs	r3, #0
 8000bac:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000bb6:	1d3b      	adds	r3, r7, #4
 8000bb8:	4619      	mov	r1, r3
 8000bba:	4806      	ldr	r0, [pc, #24]	@ (8000bd4 <MX_TIM1_Init+0xa0>)
 8000bbc:	f004 fb9e 	bl	80052fc <HAL_TIMEx_MasterConfigSynchronization>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d001      	beq.n	8000bca <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000bc6:	f000 f919 	bl	8000dfc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000bca:	bf00      	nop
 8000bcc:	3720      	adds	r7, #32
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bd80      	pop	{r7, pc}
 8000bd2:	bf00      	nop
 8000bd4:	20000178 	.word	0x20000178
 8000bd8:	40010000 	.word	0x40010000

08000bdc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b08e      	sub	sp, #56	@ 0x38
 8000be0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000be2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000be6:	2200      	movs	r2, #0
 8000be8:	601a      	str	r2, [r3, #0]
 8000bea:	605a      	str	r2, [r3, #4]
 8000bec:	609a      	str	r2, [r3, #8]
 8000bee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bf0:	f107 031c 	add.w	r3, r7, #28
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	601a      	str	r2, [r3, #0]
 8000bf8:	605a      	str	r2, [r3, #4]
 8000bfa:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000bfc:	463b      	mov	r3, r7
 8000bfe:	2200      	movs	r2, #0
 8000c00:	601a      	str	r2, [r3, #0]
 8000c02:	605a      	str	r2, [r3, #4]
 8000c04:	609a      	str	r2, [r3, #8]
 8000c06:	60da      	str	r2, [r3, #12]
 8000c08:	611a      	str	r2, [r3, #16]
 8000c0a:	615a      	str	r2, [r3, #20]
 8000c0c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000c0e:	4b2d      	ldr	r3, [pc, #180]	@ (8000cc4 <MX_TIM2_Init+0xe8>)
 8000c10:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000c14:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 108-1;
 8000c16:	4b2b      	ldr	r3, [pc, #172]	@ (8000cc4 <MX_TIM2_Init+0xe8>)
 8000c18:	226b      	movs	r2, #107	@ 0x6b
 8000c1a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c1c:	4b29      	ldr	r3, [pc, #164]	@ (8000cc4 <MX_TIM2_Init+0xe8>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8000c22:	4b28      	ldr	r3, [pc, #160]	@ (8000cc4 <MX_TIM2_Init+0xe8>)
 8000c24:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000c28:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c2a:	4b26      	ldr	r3, [pc, #152]	@ (8000cc4 <MX_TIM2_Init+0xe8>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c30:	4b24      	ldr	r3, [pc, #144]	@ (8000cc4 <MX_TIM2_Init+0xe8>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000c36:	4823      	ldr	r0, [pc, #140]	@ (8000cc4 <MX_TIM2_Init+0xe8>)
 8000c38:	f003 fc06 	bl	8004448 <HAL_TIM_Base_Init>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d001      	beq.n	8000c46 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8000c42:	f000 f8db 	bl	8000dfc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c46:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000c4a:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000c4c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000c50:	4619      	mov	r1, r3
 8000c52:	481c      	ldr	r0, [pc, #112]	@ (8000cc4 <MX_TIM2_Init+0xe8>)
 8000c54:	f003 febe 	bl	80049d4 <HAL_TIM_ConfigClockSource>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d001      	beq.n	8000c62 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8000c5e:	f000 f8cd 	bl	8000dfc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000c62:	4818      	ldr	r0, [pc, #96]	@ (8000cc4 <MX_TIM2_Init+0xe8>)
 8000c64:	f003 fc47 	bl	80044f6 <HAL_TIM_PWM_Init>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d001      	beq.n	8000c72 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8000c6e:	f000 f8c5 	bl	8000dfc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c72:	2300      	movs	r3, #0
 8000c74:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c76:	2300      	movs	r3, #0
 8000c78:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000c7a:	f107 031c 	add.w	r3, r7, #28
 8000c7e:	4619      	mov	r1, r3
 8000c80:	4810      	ldr	r0, [pc, #64]	@ (8000cc4 <MX_TIM2_Init+0xe8>)
 8000c82:	f004 fb3b 	bl	80052fc <HAL_TIMEx_MasterConfigSynchronization>
 8000c86:	4603      	mov	r3, r0
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d001      	beq.n	8000c90 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000c8c:	f000 f8b6 	bl	8000dfc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c90:	2360      	movs	r3, #96	@ 0x60
 8000c92:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 1000/4-1;
 8000c94:	23f9      	movs	r3, #249	@ 0xf9
 8000c96:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ca0:	463b      	mov	r3, r7
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	4619      	mov	r1, r3
 8000ca6:	4807      	ldr	r0, [pc, #28]	@ (8000cc4 <MX_TIM2_Init+0xe8>)
 8000ca8:	f003 fd80 	bl	80047ac <HAL_TIM_PWM_ConfigChannel>
 8000cac:	4603      	mov	r3, r0
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d001      	beq.n	8000cb6 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8000cb2:	f000 f8a3 	bl	8000dfc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000cb6:	4803      	ldr	r0, [pc, #12]	@ (8000cc4 <MX_TIM2_Init+0xe8>)
 8000cb8:	f000 f9b4 	bl	8001024 <HAL_TIM_MspPostInit>

}
 8000cbc:	bf00      	nop
 8000cbe:	3738      	adds	r7, #56	@ 0x38
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bd80      	pop	{r7, pc}
 8000cc4:	200001c4 	.word	0x200001c4

08000cc8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b08a      	sub	sp, #40	@ 0x28
 8000ccc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cce:	f107 0314 	add.w	r3, r7, #20
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	601a      	str	r2, [r3, #0]
 8000cd6:	605a      	str	r2, [r3, #4]
 8000cd8:	609a      	str	r2, [r3, #8]
 8000cda:	60da      	str	r2, [r3, #12]
 8000cdc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000cde:	4b43      	ldr	r3, [pc, #268]	@ (8000dec <MX_GPIO_Init+0x124>)
 8000ce0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ce2:	4a42      	ldr	r2, [pc, #264]	@ (8000dec <MX_GPIO_Init+0x124>)
 8000ce4:	f043 0310 	orr.w	r3, r3, #16
 8000ce8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cea:	4b40      	ldr	r3, [pc, #256]	@ (8000dec <MX_GPIO_Init+0x124>)
 8000cec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cee:	f003 0310 	and.w	r3, r3, #16
 8000cf2:	613b      	str	r3, [r7, #16]
 8000cf4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000cf6:	4b3d      	ldr	r3, [pc, #244]	@ (8000dec <MX_GPIO_Init+0x124>)
 8000cf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cfa:	4a3c      	ldr	r2, [pc, #240]	@ (8000dec <MX_GPIO_Init+0x124>)
 8000cfc:	f043 0320 	orr.w	r3, r3, #32
 8000d00:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d02:	4b3a      	ldr	r3, [pc, #232]	@ (8000dec <MX_GPIO_Init+0x124>)
 8000d04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d06:	f003 0320 	and.w	r3, r3, #32
 8000d0a:	60fb      	str	r3, [r7, #12]
 8000d0c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d0e:	4b37      	ldr	r3, [pc, #220]	@ (8000dec <MX_GPIO_Init+0x124>)
 8000d10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d12:	4a36      	ldr	r2, [pc, #216]	@ (8000dec <MX_GPIO_Init+0x124>)
 8000d14:	f043 0304 	orr.w	r3, r3, #4
 8000d18:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d1a:	4b34      	ldr	r3, [pc, #208]	@ (8000dec <MX_GPIO_Init+0x124>)
 8000d1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d1e:	f003 0304 	and.w	r3, r3, #4
 8000d22:	60bb      	str	r3, [r7, #8]
 8000d24:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d26:	4b31      	ldr	r3, [pc, #196]	@ (8000dec <MX_GPIO_Init+0x124>)
 8000d28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d2a:	4a30      	ldr	r2, [pc, #192]	@ (8000dec <MX_GPIO_Init+0x124>)
 8000d2c:	f043 0301 	orr.w	r3, r3, #1
 8000d30:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d32:	4b2e      	ldr	r3, [pc, #184]	@ (8000dec <MX_GPIO_Init+0x124>)
 8000d34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d36:	f003 0301 	and.w	r3, r3, #1
 8000d3a:	607b      	str	r3, [r7, #4]
 8000d3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d3e:	4b2b      	ldr	r3, [pc, #172]	@ (8000dec <MX_GPIO_Init+0x124>)
 8000d40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d42:	4a2a      	ldr	r2, [pc, #168]	@ (8000dec <MX_GPIO_Init+0x124>)
 8000d44:	f043 0302 	orr.w	r3, r3, #2
 8000d48:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d4a:	4b28      	ldr	r3, [pc, #160]	@ (8000dec <MX_GPIO_Init+0x124>)
 8000d4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d4e:	f003 0302 	and.w	r3, r3, #2
 8000d52:	603b      	str	r3, [r7, #0]
 8000d54:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, T_CLK_Pin|T_MOSI_Pin|T_CS_Pin, GPIO_PIN_RESET);
 8000d56:	2200      	movs	r2, #0
 8000d58:	2168      	movs	r1, #104	@ 0x68
 8000d5a:	4825      	ldr	r0, [pc, #148]	@ (8000df0 <MX_GPIO_Init+0x128>)
 8000d5c:	f001 feb0 	bl	8002ac0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000d60:	2200      	movs	r2, #0
 8000d62:	2101      	movs	r1, #1
 8000d64:	4823      	ldr	r0, [pc, #140]	@ (8000df4 <MX_GPIO_Init+0x12c>)
 8000d66:	f001 feab 	bl	8002ac0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, CS_Pin|DC_Pin|RST_Pin, GPIO_PIN_RESET);
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 8000d70:	4821      	ldr	r0, [pc, #132]	@ (8000df8 <MX_GPIO_Init+0x130>)
 8000d72:	f001 fea5 	bl	8002ac0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : T_IRQ_Pin T_MISO_Pin */
  GPIO_InitStruct.Pin = T_IRQ_Pin|T_MISO_Pin;
 8000d76:	2314      	movs	r3, #20
 8000d78:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000d82:	f107 0314 	add.w	r3, r7, #20
 8000d86:	4619      	mov	r1, r3
 8000d88:	4819      	ldr	r0, [pc, #100]	@ (8000df0 <MX_GPIO_Init+0x128>)
 8000d8a:	f001 fced 	bl	8002768 <HAL_GPIO_Init>

  /*Configure GPIO pins : T_CLK_Pin T_MOSI_Pin T_CS_Pin */
  GPIO_InitStruct.Pin = T_CLK_Pin|T_MOSI_Pin|T_CS_Pin;
 8000d8e:	2368      	movs	r3, #104	@ 0x68
 8000d90:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d92:	2301      	movs	r3, #1
 8000d94:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d96:	2300      	movs	r3, #0
 8000d98:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000d9e:	f107 0314 	add.w	r3, r7, #20
 8000da2:	4619      	mov	r1, r3
 8000da4:	4812      	ldr	r0, [pc, #72]	@ (8000df0 <MX_GPIO_Init+0x128>)
 8000da6:	f001 fcdf 	bl	8002768 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000daa:	2301      	movs	r3, #1
 8000dac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dae:	2301      	movs	r3, #1
 8000db0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db2:	2300      	movs	r3, #0
 8000db4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000db6:	2300      	movs	r3, #0
 8000db8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dba:	f107 0314 	add.w	r3, r7, #20
 8000dbe:	4619      	mov	r1, r3
 8000dc0:	480c      	ldr	r0, [pc, #48]	@ (8000df4 <MX_GPIO_Init+0x12c>)
 8000dc2:	f001 fcd1 	bl	8002768 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_Pin DC_Pin RST_Pin */
  GPIO_InitStruct.Pin = CS_Pin|DC_Pin|RST_Pin;
 8000dc6:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8000dca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dcc:	2301      	movs	r3, #1
 8000dce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dd8:	f107 0314 	add.w	r3, r7, #20
 8000ddc:	4619      	mov	r1, r3
 8000dde:	4806      	ldr	r0, [pc, #24]	@ (8000df8 <MX_GPIO_Init+0x130>)
 8000de0:	f001 fcc2 	bl	8002768 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000de4:	bf00      	nop
 8000de6:	3728      	adds	r7, #40	@ 0x28
 8000de8:	46bd      	mov	sp, r7
 8000dea:	bd80      	pop	{r7, pc}
 8000dec:	40023800 	.word	0x40023800
 8000df0:	40021000 	.word	0x40021000
 8000df4:	40020400 	.word	0x40020400
 8000df8:	40020800 	.word	0x40020800

08000dfc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000e00:	b672      	cpsid	i
}
 8000e02:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e04:	bf00      	nop
 8000e06:	e7fd      	b.n	8000e04 <Error_Handler+0x8>

08000e08 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	b083      	sub	sp, #12
 8000e0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000e0e:	4b0f      	ldr	r3, [pc, #60]	@ (8000e4c <HAL_MspInit+0x44>)
 8000e10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e12:	4a0e      	ldr	r2, [pc, #56]	@ (8000e4c <HAL_MspInit+0x44>)
 8000e14:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e18:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e1a:	4b0c      	ldr	r3, [pc, #48]	@ (8000e4c <HAL_MspInit+0x44>)
 8000e1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e1e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e22:	607b      	str	r3, [r7, #4]
 8000e24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e26:	4b09      	ldr	r3, [pc, #36]	@ (8000e4c <HAL_MspInit+0x44>)
 8000e28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e2a:	4a08      	ldr	r2, [pc, #32]	@ (8000e4c <HAL_MspInit+0x44>)
 8000e2c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e30:	6453      	str	r3, [r2, #68]	@ 0x44
 8000e32:	4b06      	ldr	r3, [pc, #24]	@ (8000e4c <HAL_MspInit+0x44>)
 8000e34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e36:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000e3a:	603b      	str	r3, [r7, #0]
 8000e3c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e3e:	bf00      	nop
 8000e40:	370c      	adds	r7, #12
 8000e42:	46bd      	mov	sp, r7
 8000e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e48:	4770      	bx	lr
 8000e4a:	bf00      	nop
 8000e4c:	40023800 	.word	0x40023800

08000e50 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b08a      	sub	sp, #40	@ 0x28
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e58:	f107 0314 	add.w	r3, r7, #20
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	601a      	str	r2, [r3, #0]
 8000e60:	605a      	str	r2, [r3, #4]
 8000e62:	609a      	str	r2, [r3, #8]
 8000e64:	60da      	str	r2, [r3, #12]
 8000e66:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	4a15      	ldr	r2, [pc, #84]	@ (8000ec4 <HAL_ADC_MspInit+0x74>)
 8000e6e:	4293      	cmp	r3, r2
 8000e70:	d123      	bne.n	8000eba <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000e72:	4b15      	ldr	r3, [pc, #84]	@ (8000ec8 <HAL_ADC_MspInit+0x78>)
 8000e74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e76:	4a14      	ldr	r2, [pc, #80]	@ (8000ec8 <HAL_ADC_MspInit+0x78>)
 8000e78:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000e7c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000e7e:	4b12      	ldr	r3, [pc, #72]	@ (8000ec8 <HAL_ADC_MspInit+0x78>)
 8000e80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e82:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000e86:	613b      	str	r3, [r7, #16]
 8000e88:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e8a:	4b0f      	ldr	r3, [pc, #60]	@ (8000ec8 <HAL_ADC_MspInit+0x78>)
 8000e8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e8e:	4a0e      	ldr	r2, [pc, #56]	@ (8000ec8 <HAL_ADC_MspInit+0x78>)
 8000e90:	f043 0304 	orr.w	r3, r3, #4
 8000e94:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e96:	4b0c      	ldr	r3, [pc, #48]	@ (8000ec8 <HAL_ADC_MspInit+0x78>)
 8000e98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e9a:	f003 0304 	and.w	r3, r3, #4
 8000e9e:	60fb      	str	r3, [r7, #12]
 8000ea0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000ea2:	2301      	movs	r3, #1
 8000ea4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ea6:	2303      	movs	r3, #3
 8000ea8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000eae:	f107 0314 	add.w	r3, r7, #20
 8000eb2:	4619      	mov	r1, r3
 8000eb4:	4805      	ldr	r0, [pc, #20]	@ (8000ecc <HAL_ADC_MspInit+0x7c>)
 8000eb6:	f001 fc57 	bl	8002768 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000eba:	bf00      	nop
 8000ebc:	3728      	adds	r7, #40	@ 0x28
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	40012000 	.word	0x40012000
 8000ec8:	40023800 	.word	0x40023800
 8000ecc:	40020800 	.word	0x40020800

08000ed0 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b0a8      	sub	sp, #160	@ 0xa0
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ed8:	f107 0310 	add.w	r3, r7, #16
 8000edc:	2290      	movs	r2, #144	@ 0x90
 8000ede:	2100      	movs	r1, #0
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	f004 facd 	bl	8005480 <memset>
  if(hrng->Instance==RNG)
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	4a11      	ldr	r2, [pc, #68]	@ (8000f30 <HAL_RNG_MspInit+0x60>)
 8000eec:	4293      	cmp	r3, r2
 8000eee:	d11b      	bne.n	8000f28 <HAL_RNG_MspInit+0x58>

  /* USER CODE END RNG_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8000ef0:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8000ef4:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000efc:	f107 0310 	add.w	r3, r7, #16
 8000f00:	4618      	mov	r0, r3
 8000f02:	f002 faa7 	bl	8003454 <HAL_RCCEx_PeriphCLKConfig>
 8000f06:	4603      	mov	r3, r0
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d001      	beq.n	8000f10 <HAL_RNG_MspInit+0x40>
    {
      Error_Handler();
 8000f0c:	f7ff ff76 	bl	8000dfc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8000f10:	4b08      	ldr	r3, [pc, #32]	@ (8000f34 <HAL_RNG_MspInit+0x64>)
 8000f12:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000f14:	4a07      	ldr	r2, [pc, #28]	@ (8000f34 <HAL_RNG_MspInit+0x64>)
 8000f16:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000f1a:	6353      	str	r3, [r2, #52]	@ 0x34
 8000f1c:	4b05      	ldr	r3, [pc, #20]	@ (8000f34 <HAL_RNG_MspInit+0x64>)
 8000f1e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000f20:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000f24:	60fb      	str	r3, [r7, #12]
 8000f26:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END RNG_MspInit 1 */

  }

}
 8000f28:	bf00      	nop
 8000f2a:	37a0      	adds	r7, #160	@ 0xa0
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bd80      	pop	{r7, pc}
 8000f30:	50060800 	.word	0x50060800
 8000f34:	40023800 	.word	0x40023800

08000f38 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b08a      	sub	sp, #40	@ 0x28
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f40:	f107 0314 	add.w	r3, r7, #20
 8000f44:	2200      	movs	r2, #0
 8000f46:	601a      	str	r2, [r3, #0]
 8000f48:	605a      	str	r2, [r3, #4]
 8000f4a:	609a      	str	r2, [r3, #8]
 8000f4c:	60da      	str	r2, [r3, #12]
 8000f4e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	4a17      	ldr	r2, [pc, #92]	@ (8000fb4 <HAL_SPI_MspInit+0x7c>)
 8000f56:	4293      	cmp	r3, r2
 8000f58:	d128      	bne.n	8000fac <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8000f5a:	4b17      	ldr	r3, [pc, #92]	@ (8000fb8 <HAL_SPI_MspInit+0x80>)
 8000f5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f5e:	4a16      	ldr	r2, [pc, #88]	@ (8000fb8 <HAL_SPI_MspInit+0x80>)
 8000f60:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000f64:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f66:	4b14      	ldr	r3, [pc, #80]	@ (8000fb8 <HAL_SPI_MspInit+0x80>)
 8000f68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f6a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000f6e:	613b      	str	r3, [r7, #16]
 8000f70:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000f72:	4b11      	ldr	r3, [pc, #68]	@ (8000fb8 <HAL_SPI_MspInit+0x80>)
 8000f74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f76:	4a10      	ldr	r2, [pc, #64]	@ (8000fb8 <HAL_SPI_MspInit+0x80>)
 8000f78:	f043 0320 	orr.w	r3, r3, #32
 8000f7c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f7e:	4b0e      	ldr	r3, [pc, #56]	@ (8000fb8 <HAL_SPI_MspInit+0x80>)
 8000f80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f82:	f003 0320 	and.w	r3, r3, #32
 8000f86:	60fb      	str	r3, [r7, #12]
 8000f88:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8000f8a:	f44f 7360 	mov.w	r3, #896	@ 0x380
 8000f8e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f90:	2302      	movs	r3, #2
 8000f92:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f94:	2300      	movs	r3, #0
 8000f96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f98:	2303      	movs	r3, #3
 8000f9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8000f9c:	2305      	movs	r3, #5
 8000f9e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000fa0:	f107 0314 	add.w	r3, r7, #20
 8000fa4:	4619      	mov	r1, r3
 8000fa6:	4805      	ldr	r0, [pc, #20]	@ (8000fbc <HAL_SPI_MspInit+0x84>)
 8000fa8:	f001 fbde 	bl	8002768 <HAL_GPIO_Init>

  /* USER CODE END SPI5_MspInit 1 */

  }

}
 8000fac:	bf00      	nop
 8000fae:	3728      	adds	r7, #40	@ 0x28
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}
 8000fb4:	40015000 	.word	0x40015000
 8000fb8:	40023800 	.word	0x40023800
 8000fbc:	40021400 	.word	0x40021400

08000fc0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	b085      	sub	sp, #20
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	4a13      	ldr	r2, [pc, #76]	@ (800101c <HAL_TIM_Base_MspInit+0x5c>)
 8000fce:	4293      	cmp	r3, r2
 8000fd0:	d10c      	bne.n	8000fec <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000fd2:	4b13      	ldr	r3, [pc, #76]	@ (8001020 <HAL_TIM_Base_MspInit+0x60>)
 8000fd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fd6:	4a12      	ldr	r2, [pc, #72]	@ (8001020 <HAL_TIM_Base_MspInit+0x60>)
 8000fd8:	f043 0301 	orr.w	r3, r3, #1
 8000fdc:	6453      	str	r3, [r2, #68]	@ 0x44
 8000fde:	4b10      	ldr	r3, [pc, #64]	@ (8001020 <HAL_TIM_Base_MspInit+0x60>)
 8000fe0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fe2:	f003 0301 	and.w	r3, r3, #1
 8000fe6:	60fb      	str	r3, [r7, #12]
 8000fe8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000fea:	e010      	b.n	800100e <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM2)
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000ff4:	d10b      	bne.n	800100e <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000ff6:	4b0a      	ldr	r3, [pc, #40]	@ (8001020 <HAL_TIM_Base_MspInit+0x60>)
 8000ff8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ffa:	4a09      	ldr	r2, [pc, #36]	@ (8001020 <HAL_TIM_Base_MspInit+0x60>)
 8000ffc:	f043 0301 	orr.w	r3, r3, #1
 8001000:	6413      	str	r3, [r2, #64]	@ 0x40
 8001002:	4b07      	ldr	r3, [pc, #28]	@ (8001020 <HAL_TIM_Base_MspInit+0x60>)
 8001004:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001006:	f003 0301 	and.w	r3, r3, #1
 800100a:	60bb      	str	r3, [r7, #8]
 800100c:	68bb      	ldr	r3, [r7, #8]
}
 800100e:	bf00      	nop
 8001010:	3714      	adds	r7, #20
 8001012:	46bd      	mov	sp, r7
 8001014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001018:	4770      	bx	lr
 800101a:	bf00      	nop
 800101c:	40010000 	.word	0x40010000
 8001020:	40023800 	.word	0x40023800

08001024 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b088      	sub	sp, #32
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800102c:	f107 030c 	add.w	r3, r7, #12
 8001030:	2200      	movs	r2, #0
 8001032:	601a      	str	r2, [r3, #0]
 8001034:	605a      	str	r2, [r3, #4]
 8001036:	609a      	str	r2, [r3, #8]
 8001038:	60da      	str	r2, [r3, #12]
 800103a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001044:	d11b      	bne.n	800107e <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001046:	4b10      	ldr	r3, [pc, #64]	@ (8001088 <HAL_TIM_MspPostInit+0x64>)
 8001048:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800104a:	4a0f      	ldr	r2, [pc, #60]	@ (8001088 <HAL_TIM_MspPostInit+0x64>)
 800104c:	f043 0301 	orr.w	r3, r3, #1
 8001050:	6313      	str	r3, [r2, #48]	@ 0x30
 8001052:	4b0d      	ldr	r3, [pc, #52]	@ (8001088 <HAL_TIM_MspPostInit+0x64>)
 8001054:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001056:	f003 0301 	and.w	r3, r3, #1
 800105a:	60bb      	str	r3, [r7, #8]
 800105c:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0/WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800105e:	2301      	movs	r3, #1
 8001060:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001062:	2302      	movs	r3, #2
 8001064:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001066:	2300      	movs	r3, #0
 8001068:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800106a:	2300      	movs	r3, #0
 800106c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800106e:	2301      	movs	r3, #1
 8001070:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001072:	f107 030c 	add.w	r3, r7, #12
 8001076:	4619      	mov	r1, r3
 8001078:	4804      	ldr	r0, [pc, #16]	@ (800108c <HAL_TIM_MspPostInit+0x68>)
 800107a:	f001 fb75 	bl	8002768 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800107e:	bf00      	nop
 8001080:	3720      	adds	r7, #32
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	40023800 	.word	0x40023800
 800108c:	40020000 	.word	0x40020000

08001090 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001090:	b480      	push	{r7}
 8001092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001094:	bf00      	nop
 8001096:	e7fd      	b.n	8001094 <NMI_Handler+0x4>

08001098 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001098:	b480      	push	{r7}
 800109a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800109c:	bf00      	nop
 800109e:	e7fd      	b.n	800109c <HardFault_Handler+0x4>

080010a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010a0:	b480      	push	{r7}
 80010a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010a4:	bf00      	nop
 80010a6:	e7fd      	b.n	80010a4 <MemManage_Handler+0x4>

080010a8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010a8:	b480      	push	{r7}
 80010aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010ac:	bf00      	nop
 80010ae:	e7fd      	b.n	80010ac <BusFault_Handler+0x4>

080010b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010b0:	b480      	push	{r7}
 80010b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010b4:	bf00      	nop
 80010b6:	e7fd      	b.n	80010b4 <UsageFault_Handler+0x4>

080010b8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010b8:	b480      	push	{r7}
 80010ba:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010bc:	bf00      	nop
 80010be:	46bd      	mov	sp, r7
 80010c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c4:	4770      	bx	lr

080010c6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010c6:	b480      	push	{r7}
 80010c8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010ca:	bf00      	nop
 80010cc:	46bd      	mov	sp, r7
 80010ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d2:	4770      	bx	lr

080010d4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010d4:	b480      	push	{r7}
 80010d6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010d8:	bf00      	nop
 80010da:	46bd      	mov	sp, r7
 80010dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e0:	4770      	bx	lr

080010e2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010e2:	b580      	push	{r7, lr}
 80010e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010e6:	f000 fe1b 	bl	8001d20 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010ea:	bf00      	nop
 80010ec:	bd80      	pop	{r7, pc}
	...

080010f0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b086      	sub	sp, #24
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010f8:	4a14      	ldr	r2, [pc, #80]	@ (800114c <_sbrk+0x5c>)
 80010fa:	4b15      	ldr	r3, [pc, #84]	@ (8001150 <_sbrk+0x60>)
 80010fc:	1ad3      	subs	r3, r2, r3
 80010fe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001100:	697b      	ldr	r3, [r7, #20]
 8001102:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001104:	4b13      	ldr	r3, [pc, #76]	@ (8001154 <_sbrk+0x64>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	2b00      	cmp	r3, #0
 800110a:	d102      	bne.n	8001112 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800110c:	4b11      	ldr	r3, [pc, #68]	@ (8001154 <_sbrk+0x64>)
 800110e:	4a12      	ldr	r2, [pc, #72]	@ (8001158 <_sbrk+0x68>)
 8001110:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001112:	4b10      	ldr	r3, [pc, #64]	@ (8001154 <_sbrk+0x64>)
 8001114:	681a      	ldr	r2, [r3, #0]
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	4413      	add	r3, r2
 800111a:	693a      	ldr	r2, [r7, #16]
 800111c:	429a      	cmp	r2, r3
 800111e:	d207      	bcs.n	8001130 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001120:	f004 f9b6 	bl	8005490 <__errno>
 8001124:	4603      	mov	r3, r0
 8001126:	220c      	movs	r2, #12
 8001128:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800112a:	f04f 33ff 	mov.w	r3, #4294967295
 800112e:	e009      	b.n	8001144 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001130:	4b08      	ldr	r3, [pc, #32]	@ (8001154 <_sbrk+0x64>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001136:	4b07      	ldr	r3, [pc, #28]	@ (8001154 <_sbrk+0x64>)
 8001138:	681a      	ldr	r2, [r3, #0]
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	4413      	add	r3, r2
 800113e:	4a05      	ldr	r2, [pc, #20]	@ (8001154 <_sbrk+0x64>)
 8001140:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001142:	68fb      	ldr	r3, [r7, #12]
}
 8001144:	4618      	mov	r0, r3
 8001146:	3718      	adds	r7, #24
 8001148:	46bd      	mov	sp, r7
 800114a:	bd80      	pop	{r7, pc}
 800114c:	20080000 	.word	0x20080000
 8001150:	00000400 	.word	0x00000400
 8001154:	20000210 	.word	0x20000210
 8001158:	20000360 	.word	0x20000360

0800115c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800115c:	b480      	push	{r7}
 800115e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001160:	4b06      	ldr	r3, [pc, #24]	@ (800117c <SystemInit+0x20>)
 8001162:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001166:	4a05      	ldr	r2, [pc, #20]	@ (800117c <SystemInit+0x20>)
 8001168:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800116c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001170:	bf00      	nop
 8001172:	46bd      	mov	sp, r7
 8001174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001178:	4770      	bx	lr
 800117a:	bf00      	nop
 800117c:	e000ed00 	.word	0xe000ed00

08001180 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001180:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80011b8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001184:	f7ff ffea 	bl	800115c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001188:	480c      	ldr	r0, [pc, #48]	@ (80011bc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800118a:	490d      	ldr	r1, [pc, #52]	@ (80011c0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800118c:	4a0d      	ldr	r2, [pc, #52]	@ (80011c4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800118e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001190:	e002      	b.n	8001198 <LoopCopyDataInit>

08001192 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001192:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001194:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001196:	3304      	adds	r3, #4

08001198 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001198:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800119a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800119c:	d3f9      	bcc.n	8001192 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800119e:	4a0a      	ldr	r2, [pc, #40]	@ (80011c8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80011a0:	4c0a      	ldr	r4, [pc, #40]	@ (80011cc <LoopFillZerobss+0x22>)
  movs r3, #0
 80011a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011a4:	e001      	b.n	80011aa <LoopFillZerobss>

080011a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011a8:	3204      	adds	r2, #4

080011aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011ac:	d3fb      	bcc.n	80011a6 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80011ae:	f004 f975 	bl	800549c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80011b2:	f7ff fa97 	bl	80006e4 <main>
  bx  lr    
 80011b6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80011b8:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 80011bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011c0:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80011c4:	08006030 	.word	0x08006030
  ldr r2, =_sbss
 80011c8:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80011cc:	20000360 	.word	0x20000360

080011d0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80011d0:	e7fe      	b.n	80011d0 <ADC_IRQHandler>

080011d2 <ILI9341_Draw_Filled_Rectangle_Coord>:
	
}

/*Draw a filled rectangle between positions X0,Y0 and X1,Y1 with specified colour*/
void ILI9341_Draw_Filled_Rectangle_Coord(uint16_t X0, uint16_t Y0, uint16_t X1, uint16_t Y1, uint16_t Colour)
{
 80011d2:	b590      	push	{r4, r7, lr}
 80011d4:	b089      	sub	sp, #36	@ 0x24
 80011d6:	af02      	add	r7, sp, #8
 80011d8:	4604      	mov	r4, r0
 80011da:	4608      	mov	r0, r1
 80011dc:	4611      	mov	r1, r2
 80011de:	461a      	mov	r2, r3
 80011e0:	4623      	mov	r3, r4
 80011e2:	80fb      	strh	r3, [r7, #6]
 80011e4:	4603      	mov	r3, r0
 80011e6:	80bb      	strh	r3, [r7, #4]
 80011e8:	460b      	mov	r3, r1
 80011ea:	807b      	strh	r3, [r7, #2]
 80011ec:	4613      	mov	r3, r2
 80011ee:	803b      	strh	r3, [r7, #0]
	uint16_t 	X_length = 0;
 80011f0:	2300      	movs	r3, #0
 80011f2:	82fb      	strh	r3, [r7, #22]
	uint16_t 	Y_length = 0;
 80011f4:	2300      	movs	r3, #0
 80011f6:	82bb      	strh	r3, [r7, #20]
	uint8_t		Negative_X = 0;
 80011f8:	2300      	movs	r3, #0
 80011fa:	74fb      	strb	r3, [r7, #19]
	uint8_t 	Negative_Y = 0;
 80011fc:	2300      	movs	r3, #0
 80011fe:	74bb      	strb	r3, [r7, #18]
	int32_t 	Calc_Negative = 0;
 8001200:	2300      	movs	r3, #0
 8001202:	60bb      	str	r3, [r7, #8]
	
	uint16_t X0_true = 0;
 8001204:	2300      	movs	r3, #0
 8001206:	823b      	strh	r3, [r7, #16]
	uint16_t Y0_true = 0;
 8001208:	2300      	movs	r3, #0
 800120a:	81fb      	strh	r3, [r7, #14]
	
	Calc_Negative = X1 - X0;
 800120c:	887a      	ldrh	r2, [r7, #2]
 800120e:	88fb      	ldrh	r3, [r7, #6]
 8001210:	1ad3      	subs	r3, r2, r3
 8001212:	60bb      	str	r3, [r7, #8]
	if(Calc_Negative < 0) Negative_X = 1;
 8001214:	68bb      	ldr	r3, [r7, #8]
 8001216:	2b00      	cmp	r3, #0
 8001218:	da01      	bge.n	800121e <ILI9341_Draw_Filled_Rectangle_Coord+0x4c>
 800121a:	2301      	movs	r3, #1
 800121c:	74fb      	strb	r3, [r7, #19]
	Calc_Negative = 0;
 800121e:	2300      	movs	r3, #0
 8001220:	60bb      	str	r3, [r7, #8]
	
	Calc_Negative = Y1 - Y0;
 8001222:	883a      	ldrh	r2, [r7, #0]
 8001224:	88bb      	ldrh	r3, [r7, #4]
 8001226:	1ad3      	subs	r3, r2, r3
 8001228:	60bb      	str	r3, [r7, #8]
	if(Calc_Negative < 0) Negative_Y = 1;
 800122a:	68bb      	ldr	r3, [r7, #8]
 800122c:	2b00      	cmp	r3, #0
 800122e:	da01      	bge.n	8001234 <ILI9341_Draw_Filled_Rectangle_Coord+0x62>
 8001230:	2301      	movs	r3, #1
 8001232:	74bb      	strb	r3, [r7, #18]
	
	
	//DRAW HORIZONTAL!
	if(!Negative_X)
 8001234:	7cfb      	ldrb	r3, [r7, #19]
 8001236:	2b00      	cmp	r3, #0
 8001238:	d106      	bne.n	8001248 <ILI9341_Draw_Filled_Rectangle_Coord+0x76>
	{
		X_length = X1 - X0;
 800123a:	887a      	ldrh	r2, [r7, #2]
 800123c:	88fb      	ldrh	r3, [r7, #6]
 800123e:	1ad3      	subs	r3, r2, r3
 8001240:	82fb      	strh	r3, [r7, #22]
		X0_true = X0;
 8001242:	88fb      	ldrh	r3, [r7, #6]
 8001244:	823b      	strh	r3, [r7, #16]
 8001246:	e005      	b.n	8001254 <ILI9341_Draw_Filled_Rectangle_Coord+0x82>
	}
	else
	{
		X_length = X0 - X1;
 8001248:	88fa      	ldrh	r2, [r7, #6]
 800124a:	887b      	ldrh	r3, [r7, #2]
 800124c:	1ad3      	subs	r3, r2, r3
 800124e:	82fb      	strh	r3, [r7, #22]
		X0_true = X1;
 8001250:	887b      	ldrh	r3, [r7, #2]
 8001252:	823b      	strh	r3, [r7, #16]
	}
	
	//DRAW VERTICAL!
	if(!Negative_Y)
 8001254:	7cbb      	ldrb	r3, [r7, #18]
 8001256:	2b00      	cmp	r3, #0
 8001258:	d106      	bne.n	8001268 <ILI9341_Draw_Filled_Rectangle_Coord+0x96>
	{
		Y_length = Y1 - Y0;
 800125a:	883a      	ldrh	r2, [r7, #0]
 800125c:	88bb      	ldrh	r3, [r7, #4]
 800125e:	1ad3      	subs	r3, r2, r3
 8001260:	82bb      	strh	r3, [r7, #20]
		Y0_true = Y0;		
 8001262:	88bb      	ldrh	r3, [r7, #4]
 8001264:	81fb      	strh	r3, [r7, #14]
 8001266:	e005      	b.n	8001274 <ILI9341_Draw_Filled_Rectangle_Coord+0xa2>
	}
	else
	{
		Y_length = Y0 - Y1;
 8001268:	88ba      	ldrh	r2, [r7, #4]
 800126a:	883b      	ldrh	r3, [r7, #0]
 800126c:	1ad3      	subs	r3, r2, r3
 800126e:	82bb      	strh	r3, [r7, #20]
		Y0_true = Y1;	
 8001270:	883b      	ldrh	r3, [r7, #0]
 8001272:	81fb      	strh	r3, [r7, #14]
	}
	
	ILI9341_Draw_Rectangle(X0_true, Y0_true, X_length, Y_length, Colour);	
 8001274:	8abc      	ldrh	r4, [r7, #20]
 8001276:	8afa      	ldrh	r2, [r7, #22]
 8001278:	89f9      	ldrh	r1, [r7, #14]
 800127a:	8a38      	ldrh	r0, [r7, #16]
 800127c:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800127e:	9300      	str	r3, [sp, #0]
 8001280:	4623      	mov	r3, r4
 8001282:	f000 fca5 	bl	8001bd0 <ILI9341_Draw_Rectangle>
}
 8001286:	bf00      	nop
 8001288:	371c      	adds	r7, #28
 800128a:	46bd      	mov	sp, r7
 800128c:	bd90      	pop	{r4, r7, pc}
	...

08001290 <ILI9341_Draw_Char>:

/*Draws a character (fonts imported from fonts.h) at X,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Char(char Character, uint8_t X, uint8_t Y, uint16_t Colour, uint16_t Size, uint16_t Background_Colour) 
{
 8001290:	b590      	push	{r4, r7, lr}
 8001292:	b089      	sub	sp, #36	@ 0x24
 8001294:	af02      	add	r7, sp, #8
 8001296:	4604      	mov	r4, r0
 8001298:	4608      	mov	r0, r1
 800129a:	4611      	mov	r1, r2
 800129c:	461a      	mov	r2, r3
 800129e:	4623      	mov	r3, r4
 80012a0:	71fb      	strb	r3, [r7, #7]
 80012a2:	4603      	mov	r3, r0
 80012a4:	71bb      	strb	r3, [r7, #6]
 80012a6:	460b      	mov	r3, r1
 80012a8:	717b      	strb	r3, [r7, #5]
 80012aa:	4613      	mov	r3, r2
 80012ac:	807b      	strh	r3, [r7, #2]
		uint8_t 	function_char;
    uint8_t 	i,j;
		
		function_char = Character;
 80012ae:	79fb      	ldrb	r3, [r7, #7]
 80012b0:	75fb      	strb	r3, [r7, #23]
		
    if (function_char < ' ') {
 80012b2:	7dfb      	ldrb	r3, [r7, #23]
 80012b4:	2b1f      	cmp	r3, #31
 80012b6:	d802      	bhi.n	80012be <ILI9341_Draw_Char+0x2e>
        Character = 0;
 80012b8:	2300      	movs	r3, #0
 80012ba:	71fb      	strb	r3, [r7, #7]
 80012bc:	e002      	b.n	80012c4 <ILI9341_Draw_Char+0x34>
    } else {
        function_char -= 32;
 80012be:	7dfb      	ldrb	r3, [r7, #23]
 80012c0:	3b20      	subs	r3, #32
 80012c2:	75fb      	strb	r3, [r7, #23]
		}
   	
		char temp[CHAR_WIDTH];
		for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 80012c4:	2300      	movs	r3, #0
 80012c6:	753b      	strb	r3, [r7, #20]
 80012c8:	e012      	b.n	80012f0 <ILI9341_Draw_Char+0x60>
		{
		temp[k] = font[function_char][k];
 80012ca:	7dfa      	ldrb	r2, [r7, #23]
 80012cc:	7d38      	ldrb	r0, [r7, #20]
 80012ce:	7d39      	ldrb	r1, [r7, #20]
 80012d0:	4c3b      	ldr	r4, [pc, #236]	@ (80013c0 <ILI9341_Draw_Char+0x130>)
 80012d2:	4613      	mov	r3, r2
 80012d4:	005b      	lsls	r3, r3, #1
 80012d6:	4413      	add	r3, r2
 80012d8:	005b      	lsls	r3, r3, #1
 80012da:	4423      	add	r3, r4
 80012dc:	4403      	add	r3, r0
 80012de:	781a      	ldrb	r2, [r3, #0]
 80012e0:	f101 0318 	add.w	r3, r1, #24
 80012e4:	443b      	add	r3, r7
 80012e6:	f803 2c0c 	strb.w	r2, [r3, #-12]
		for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 80012ea:	7d3b      	ldrb	r3, [r7, #20]
 80012ec:	3301      	adds	r3, #1
 80012ee:	753b      	strb	r3, [r7, #20]
 80012f0:	7d3b      	ldrb	r3, [r7, #20]
 80012f2:	2b05      	cmp	r3, #5
 80012f4:	d9e9      	bls.n	80012ca <ILI9341_Draw_Char+0x3a>
		}
		
    // Draw pixels
		ILI9341_Draw_Rectangle(X, Y, CHAR_WIDTH*Size, CHAR_HEIGHT*Size, Background_Colour);
 80012f6:	79bb      	ldrb	r3, [r7, #6]
 80012f8:	b298      	uxth	r0, r3
 80012fa:	797b      	ldrb	r3, [r7, #5]
 80012fc:	b299      	uxth	r1, r3
 80012fe:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8001300:	461a      	mov	r2, r3
 8001302:	0052      	lsls	r2, r2, #1
 8001304:	4413      	add	r3, r2
 8001306:	005b      	lsls	r3, r3, #1
 8001308:	b29a      	uxth	r2, r3
 800130a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800130c:	00db      	lsls	r3, r3, #3
 800130e:	b29c      	uxth	r4, r3
 8001310:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8001312:	9300      	str	r3, [sp, #0]
 8001314:	4623      	mov	r3, r4
 8001316:	f000 fc5b 	bl	8001bd0 <ILI9341_Draw_Rectangle>
    for (j=0; j<CHAR_WIDTH; j++) {
 800131a:	2300      	movs	r3, #0
 800131c:	757b      	strb	r3, [r7, #21]
 800131e:	e047      	b.n	80013b0 <ILI9341_Draw_Char+0x120>
        for (i=0; i<CHAR_HEIGHT; i++) {
 8001320:	2300      	movs	r3, #0
 8001322:	75bb      	strb	r3, [r7, #22]
 8001324:	e03e      	b.n	80013a4 <ILI9341_Draw_Char+0x114>
            if (temp[j] & (1<<i)) {			
 8001326:	7d7b      	ldrb	r3, [r7, #21]
 8001328:	3318      	adds	r3, #24
 800132a:	443b      	add	r3, r7
 800132c:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8001330:	461a      	mov	r2, r3
 8001332:	7dbb      	ldrb	r3, [r7, #22]
 8001334:	fa42 f303 	asr.w	r3, r2, r3
 8001338:	f003 0301 	and.w	r3, r3, #1
 800133c:	2b00      	cmp	r3, #0
 800133e:	d02e      	beq.n	800139e <ILI9341_Draw_Char+0x10e>
							if(Size == 1)
 8001340:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8001342:	2b01      	cmp	r3, #1
 8001344:	d110      	bne.n	8001368 <ILI9341_Draw_Char+0xd8>
							{
              ILI9341_Draw_Pixel(X+j, Y+i, Colour);
 8001346:	79bb      	ldrb	r3, [r7, #6]
 8001348:	b29a      	uxth	r2, r3
 800134a:	7d7b      	ldrb	r3, [r7, #21]
 800134c:	b29b      	uxth	r3, r3
 800134e:	4413      	add	r3, r2
 8001350:	b298      	uxth	r0, r3
 8001352:	797b      	ldrb	r3, [r7, #5]
 8001354:	b29a      	uxth	r2, r3
 8001356:	7dbb      	ldrb	r3, [r7, #22]
 8001358:	b29b      	uxth	r3, r3
 800135a:	4413      	add	r3, r2
 800135c:	b29b      	uxth	r3, r3
 800135e:	887a      	ldrh	r2, [r7, #2]
 8001360:	4619      	mov	r1, r3
 8001362:	f000 fb5b 	bl	8001a1c <ILI9341_Draw_Pixel>
 8001366:	e01a      	b.n	800139e <ILI9341_Draw_Char+0x10e>
							}
							else
							{
							ILI9341_Draw_Rectangle(X+(j*Size), Y+(i*Size), Size, Size, Colour);
 8001368:	79bb      	ldrb	r3, [r7, #6]
 800136a:	b29a      	uxth	r2, r3
 800136c:	7d7b      	ldrb	r3, [r7, #21]
 800136e:	b29b      	uxth	r3, r3
 8001370:	8d39      	ldrh	r1, [r7, #40]	@ 0x28
 8001372:	fb11 f303 	smulbb	r3, r1, r3
 8001376:	b29b      	uxth	r3, r3
 8001378:	4413      	add	r3, r2
 800137a:	b298      	uxth	r0, r3
 800137c:	797b      	ldrb	r3, [r7, #5]
 800137e:	b29a      	uxth	r2, r3
 8001380:	7dbb      	ldrb	r3, [r7, #22]
 8001382:	b29b      	uxth	r3, r3
 8001384:	8d39      	ldrh	r1, [r7, #40]	@ 0x28
 8001386:	fb11 f303 	smulbb	r3, r1, r3
 800138a:	b29b      	uxth	r3, r3
 800138c:	4413      	add	r3, r2
 800138e:	b299      	uxth	r1, r3
 8001390:	8d3c      	ldrh	r4, [r7, #40]	@ 0x28
 8001392:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8001394:	887b      	ldrh	r3, [r7, #2]
 8001396:	9300      	str	r3, [sp, #0]
 8001398:	4623      	mov	r3, r4
 800139a:	f000 fc19 	bl	8001bd0 <ILI9341_Draw_Rectangle>
        for (i=0; i<CHAR_HEIGHT; i++) {
 800139e:	7dbb      	ldrb	r3, [r7, #22]
 80013a0:	3301      	adds	r3, #1
 80013a2:	75bb      	strb	r3, [r7, #22]
 80013a4:	7dbb      	ldrb	r3, [r7, #22]
 80013a6:	2b07      	cmp	r3, #7
 80013a8:	d9bd      	bls.n	8001326 <ILI9341_Draw_Char+0x96>
    for (j=0; j<CHAR_WIDTH; j++) {
 80013aa:	7d7b      	ldrb	r3, [r7, #21]
 80013ac:	3301      	adds	r3, #1
 80013ae:	757b      	strb	r3, [r7, #21]
 80013b0:	7d7b      	ldrb	r3, [r7, #21]
 80013b2:	2b05      	cmp	r3, #5
 80013b4:	d9b4      	bls.n	8001320 <ILI9341_Draw_Char+0x90>
							}
            }						
        }
    }
}
 80013b6:	bf00      	nop
 80013b8:	bf00      	nop
 80013ba:	371c      	adds	r7, #28
 80013bc:	46bd      	mov	sp, r7
 80013be:	bd90      	pop	{r4, r7, pc}
 80013c0:	08005dac 	.word	0x08005dac

080013c4 <ILI9341_Draw_Text>:

/*Draws an array of characters (fonts imported from fonts.h) at X,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Text(const char* Text, uint8_t X, uint8_t Y, uint16_t Colour, uint16_t Size, uint16_t Background_Colour)
{
 80013c4:	b590      	push	{r4, r7, lr}
 80013c6:	b085      	sub	sp, #20
 80013c8:	af02      	add	r7, sp, #8
 80013ca:	6078      	str	r0, [r7, #4]
 80013cc:	4608      	mov	r0, r1
 80013ce:	4611      	mov	r1, r2
 80013d0:	461a      	mov	r2, r3
 80013d2:	4603      	mov	r3, r0
 80013d4:	70fb      	strb	r3, [r7, #3]
 80013d6:	460b      	mov	r3, r1
 80013d8:	70bb      	strb	r3, [r7, #2]
 80013da:	4613      	mov	r3, r2
 80013dc:	803b      	strh	r3, [r7, #0]
    while (*Text) {
 80013de:	e017      	b.n	8001410 <ILI9341_Draw_Text+0x4c>
        ILI9341_Draw_Char(*Text++, X, Y, Colour, Size, Background_Colour);
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	1c5a      	adds	r2, r3, #1
 80013e4:	607a      	str	r2, [r7, #4]
 80013e6:	7818      	ldrb	r0, [r3, #0]
 80013e8:	883c      	ldrh	r4, [r7, #0]
 80013ea:	78ba      	ldrb	r2, [r7, #2]
 80013ec:	78f9      	ldrb	r1, [r7, #3]
 80013ee:	8bbb      	ldrh	r3, [r7, #28]
 80013f0:	9301      	str	r3, [sp, #4]
 80013f2:	8b3b      	ldrh	r3, [r7, #24]
 80013f4:	9300      	str	r3, [sp, #0]
 80013f6:	4623      	mov	r3, r4
 80013f8:	f7ff ff4a 	bl	8001290 <ILI9341_Draw_Char>
        X += CHAR_WIDTH*Size;
 80013fc:	8b3b      	ldrh	r3, [r7, #24]
 80013fe:	b2db      	uxtb	r3, r3
 8001400:	461a      	mov	r2, r3
 8001402:	0052      	lsls	r2, r2, #1
 8001404:	4413      	add	r3, r2
 8001406:	005b      	lsls	r3, r3, #1
 8001408:	b2da      	uxtb	r2, r3
 800140a:	78fb      	ldrb	r3, [r7, #3]
 800140c:	4413      	add	r3, r2
 800140e:	70fb      	strb	r3, [r7, #3]
    while (*Text) {
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	781b      	ldrb	r3, [r3, #0]
 8001414:	2b00      	cmp	r3, #0
 8001416:	d1e3      	bne.n	80013e0 <ILI9341_Draw_Text+0x1c>
    }
}
 8001418:	bf00      	nop
 800141a:	bf00      	nop
 800141c:	370c      	adds	r7, #12
 800141e:	46bd      	mov	sp, r7
 8001420:	bd90      	pop	{r4, r7, pc}
	...

08001424 <ILI9341_SPI_Init>:
volatile uint16_t LCD_HEIGHT = ILI9341_SCREEN_HEIGHT;
volatile uint16_t LCD_WIDTH	 = ILI9341_SCREEN_WIDTH;

/* Initialize SPI */
void ILI9341_SPI_Init(void)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	af00      	add	r7, sp, #0
//MX_SPI5_Init();																							//SPI INIT
//MX_GPIO_Init();																							//GPIO INIT
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//CS OFF
 8001428:	2200      	movs	r2, #0
 800142a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800142e:	4802      	ldr	r0, [pc, #8]	@ (8001438 <ILI9341_SPI_Init+0x14>)
 8001430:	f001 fb46 	bl	8002ac0 <HAL_GPIO_WritePin>
}
 8001434:	bf00      	nop
 8001436:	bd80      	pop	{r7, pc}
 8001438:	40020800 	.word	0x40020800

0800143c <ILI9341_SPI_Send>:

/*Send data (char) to LCD*/
void ILI9341_SPI_Send(unsigned char SPI_Data)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b082      	sub	sp, #8
 8001440:	af00      	add	r7, sp, #0
 8001442:	4603      	mov	r3, r0
 8001444:	71fb      	strb	r3, [r7, #7]
HAL_SPI_Transmit(HSPI_INSTANCE, &SPI_Data, 1, 1);
 8001446:	1df9      	adds	r1, r7, #7
 8001448:	2301      	movs	r3, #1
 800144a:	2201      	movs	r2, #1
 800144c:	4803      	ldr	r0, [pc, #12]	@ (800145c <ILI9341_SPI_Send+0x20>)
 800144e:	f002 fcfe 	bl	8003e4e <HAL_SPI_Transmit>
}
 8001452:	bf00      	nop
 8001454:	3708      	adds	r7, #8
 8001456:	46bd      	mov	sp, r7
 8001458:	bd80      	pop	{r7, pc}
 800145a:	bf00      	nop
 800145c:	20000114 	.word	0x20000114

08001460 <ILI9341_Write_Command>:

/* Send command (char) to LCD */
void ILI9341_Write_Command(uint8_t Command)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b082      	sub	sp, #8
 8001464:	af00      	add	r7, sp, #0
 8001466:	4603      	mov	r3, r0
 8001468:	71fb      	strb	r3, [r7, #7]
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 800146a:	2200      	movs	r2, #0
 800146c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001470:	480b      	ldr	r0, [pc, #44]	@ (80014a0 <ILI9341_Write_Command+0x40>)
 8001472:	f001 fb25 	bl	8002ac0 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 8001476:	2200      	movs	r2, #0
 8001478:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800147c:	4808      	ldr	r0, [pc, #32]	@ (80014a0 <ILI9341_Write_Command+0x40>)
 800147e:	f001 fb1f 	bl	8002ac0 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(Command);
 8001482:	79fb      	ldrb	r3, [r7, #7]
 8001484:	4618      	mov	r0, r3
 8001486:	f7ff ffd9 	bl	800143c <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);		
 800148a:	2201      	movs	r2, #1
 800148c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001490:	4803      	ldr	r0, [pc, #12]	@ (80014a0 <ILI9341_Write_Command+0x40>)
 8001492:	f001 fb15 	bl	8002ac0 <HAL_GPIO_WritePin>
}
 8001496:	bf00      	nop
 8001498:	3708      	adds	r7, #8
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	40020800 	.word	0x40020800

080014a4 <ILI9341_Write_Data>:

/* Send Data (char) to LCD */
void ILI9341_Write_Data(uint8_t Data)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b082      	sub	sp, #8
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	4603      	mov	r3, r0
 80014ac:	71fb      	strb	r3, [r7, #7]
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 80014ae:	2201      	movs	r2, #1
 80014b0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80014b4:	480b      	ldr	r0, [pc, #44]	@ (80014e4 <ILI9341_Write_Data+0x40>)
 80014b6:	f001 fb03 	bl	8002ac0 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 80014ba:	2200      	movs	r2, #0
 80014bc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80014c0:	4808      	ldr	r0, [pc, #32]	@ (80014e4 <ILI9341_Write_Data+0x40>)
 80014c2:	f001 fafd 	bl	8002ac0 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(Data);	
 80014c6:	79fb      	ldrb	r3, [r7, #7]
 80014c8:	4618      	mov	r0, r3
 80014ca:	f7ff ffb7 	bl	800143c <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 80014ce:	2201      	movs	r2, #1
 80014d0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80014d4:	4803      	ldr	r0, [pc, #12]	@ (80014e4 <ILI9341_Write_Data+0x40>)
 80014d6:	f001 faf3 	bl	8002ac0 <HAL_GPIO_WritePin>
}
 80014da:	bf00      	nop
 80014dc:	3708      	adds	r7, #8
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	bf00      	nop
 80014e4:	40020800 	.word	0x40020800

080014e8 <ILI9341_Set_Address>:

/* Set Address - Location block - to draw into */
void ILI9341_Set_Address(uint16_t X1, uint16_t Y1, uint16_t X2, uint16_t Y2)
{
 80014e8:	b590      	push	{r4, r7, lr}
 80014ea:	b083      	sub	sp, #12
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	4604      	mov	r4, r0
 80014f0:	4608      	mov	r0, r1
 80014f2:	4611      	mov	r1, r2
 80014f4:	461a      	mov	r2, r3
 80014f6:	4623      	mov	r3, r4
 80014f8:	80fb      	strh	r3, [r7, #6]
 80014fa:	4603      	mov	r3, r0
 80014fc:	80bb      	strh	r3, [r7, #4]
 80014fe:	460b      	mov	r3, r1
 8001500:	807b      	strh	r3, [r7, #2]
 8001502:	4613      	mov	r3, r2
 8001504:	803b      	strh	r3, [r7, #0]
ILI9341_Write_Command(0x2A);
 8001506:	202a      	movs	r0, #42	@ 0x2a
 8001508:	f7ff ffaa 	bl	8001460 <ILI9341_Write_Command>
ILI9341_Write_Data(X1>>8);
 800150c:	88fb      	ldrh	r3, [r7, #6]
 800150e:	0a1b      	lsrs	r3, r3, #8
 8001510:	b29b      	uxth	r3, r3
 8001512:	b2db      	uxtb	r3, r3
 8001514:	4618      	mov	r0, r3
 8001516:	f7ff ffc5 	bl	80014a4 <ILI9341_Write_Data>
ILI9341_Write_Data(X1);
 800151a:	88fb      	ldrh	r3, [r7, #6]
 800151c:	b2db      	uxtb	r3, r3
 800151e:	4618      	mov	r0, r3
 8001520:	f7ff ffc0 	bl	80014a4 <ILI9341_Write_Data>
ILI9341_Write_Data(X2>>8);
 8001524:	887b      	ldrh	r3, [r7, #2]
 8001526:	0a1b      	lsrs	r3, r3, #8
 8001528:	b29b      	uxth	r3, r3
 800152a:	b2db      	uxtb	r3, r3
 800152c:	4618      	mov	r0, r3
 800152e:	f7ff ffb9 	bl	80014a4 <ILI9341_Write_Data>
ILI9341_Write_Data(X2);
 8001532:	887b      	ldrh	r3, [r7, #2]
 8001534:	b2db      	uxtb	r3, r3
 8001536:	4618      	mov	r0, r3
 8001538:	f7ff ffb4 	bl	80014a4 <ILI9341_Write_Data>

ILI9341_Write_Command(0x2B);
 800153c:	202b      	movs	r0, #43	@ 0x2b
 800153e:	f7ff ff8f 	bl	8001460 <ILI9341_Write_Command>
ILI9341_Write_Data(Y1>>8);
 8001542:	88bb      	ldrh	r3, [r7, #4]
 8001544:	0a1b      	lsrs	r3, r3, #8
 8001546:	b29b      	uxth	r3, r3
 8001548:	b2db      	uxtb	r3, r3
 800154a:	4618      	mov	r0, r3
 800154c:	f7ff ffaa 	bl	80014a4 <ILI9341_Write_Data>
ILI9341_Write_Data(Y1);
 8001550:	88bb      	ldrh	r3, [r7, #4]
 8001552:	b2db      	uxtb	r3, r3
 8001554:	4618      	mov	r0, r3
 8001556:	f7ff ffa5 	bl	80014a4 <ILI9341_Write_Data>
ILI9341_Write_Data(Y2>>8);
 800155a:	883b      	ldrh	r3, [r7, #0]
 800155c:	0a1b      	lsrs	r3, r3, #8
 800155e:	b29b      	uxth	r3, r3
 8001560:	b2db      	uxtb	r3, r3
 8001562:	4618      	mov	r0, r3
 8001564:	f7ff ff9e 	bl	80014a4 <ILI9341_Write_Data>
ILI9341_Write_Data(Y2);
 8001568:	883b      	ldrh	r3, [r7, #0]
 800156a:	b2db      	uxtb	r3, r3
 800156c:	4618      	mov	r0, r3
 800156e:	f7ff ff99 	bl	80014a4 <ILI9341_Write_Data>

ILI9341_Write_Command(0x2C);
 8001572:	202c      	movs	r0, #44	@ 0x2c
 8001574:	f7ff ff74 	bl	8001460 <ILI9341_Write_Command>
}
 8001578:	bf00      	nop
 800157a:	370c      	adds	r7, #12
 800157c:	46bd      	mov	sp, r7
 800157e:	bd90      	pop	{r4, r7, pc}

08001580 <ILI9341_Reset>:

/*HARDWARE RESET*/
void ILI9341_Reset(void)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	af00      	add	r7, sp, #0
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_RESET);
 8001584:	2200      	movs	r2, #0
 8001586:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800158a:	480b      	ldr	r0, [pc, #44]	@ (80015b8 <ILI9341_Reset+0x38>)
 800158c:	f001 fa98 	bl	8002ac0 <HAL_GPIO_WritePin>
HAL_Delay(200);
 8001590:	20c8      	movs	r0, #200	@ 0xc8
 8001592:	f000 fbe5 	bl	8001d60 <HAL_Delay>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8001596:	2200      	movs	r2, #0
 8001598:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800159c:	4806      	ldr	r0, [pc, #24]	@ (80015b8 <ILI9341_Reset+0x38>)
 800159e:	f001 fa8f 	bl	8002ac0 <HAL_GPIO_WritePin>
HAL_Delay(200);
 80015a2:	20c8      	movs	r0, #200	@ 0xc8
 80015a4:	f000 fbdc 	bl	8001d60 <HAL_Delay>
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);	
 80015a8:	2201      	movs	r2, #1
 80015aa:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80015ae:	4802      	ldr	r0, [pc, #8]	@ (80015b8 <ILI9341_Reset+0x38>)
 80015b0:	f001 fa86 	bl	8002ac0 <HAL_GPIO_WritePin>
}
 80015b4:	bf00      	nop
 80015b6:	bd80      	pop	{r7, pc}
 80015b8:	40020800 	.word	0x40020800

080015bc <ILI9341_Set_Rotation>:

/*Ser rotation of the screen - changes x0 and y0*/
void ILI9341_Set_Rotation(uint8_t Rotation) 
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b084      	sub	sp, #16
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	4603      	mov	r3, r0
 80015c4:	71fb      	strb	r3, [r7, #7]
	
uint8_t screen_rotation = Rotation;
 80015c6:	79fb      	ldrb	r3, [r7, #7]
 80015c8:	73fb      	strb	r3, [r7, #15]

ILI9341_Write_Command(0x36);
 80015ca:	2036      	movs	r0, #54	@ 0x36
 80015cc:	f7ff ff48 	bl	8001460 <ILI9341_Write_Command>
HAL_Delay(1);
 80015d0:	2001      	movs	r0, #1
 80015d2:	f000 fbc5 	bl	8001d60 <HAL_Delay>
	
switch(screen_rotation) 
 80015d6:	7bfb      	ldrb	r3, [r7, #15]
 80015d8:	2b03      	cmp	r3, #3
 80015da:	d837      	bhi.n	800164c <ILI9341_Set_Rotation+0x90>
 80015dc:	a201      	add	r2, pc, #4	@ (adr r2, 80015e4 <ILI9341_Set_Rotation+0x28>)
 80015de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015e2:	bf00      	nop
 80015e4:	080015f5 	.word	0x080015f5
 80015e8:	0800160b 	.word	0x0800160b
 80015ec:	08001621 	.word	0x08001621
 80015f0:	08001637 	.word	0x08001637
	{
		case SCREEN_VERTICAL_1:
			ILI9341_Write_Data(0x40|0x08);
 80015f4:	2048      	movs	r0, #72	@ 0x48
 80015f6:	f7ff ff55 	bl	80014a4 <ILI9341_Write_Data>
			LCD_WIDTH = 240;
 80015fa:	4b17      	ldr	r3, [pc, #92]	@ (8001658 <ILI9341_Set_Rotation+0x9c>)
 80015fc:	22f0      	movs	r2, #240	@ 0xf0
 80015fe:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 8001600:	4b16      	ldr	r3, [pc, #88]	@ (800165c <ILI9341_Set_Rotation+0xa0>)
 8001602:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8001606:	801a      	strh	r2, [r3, #0]
			break;
 8001608:	e021      	b.n	800164e <ILI9341_Set_Rotation+0x92>
		case SCREEN_HORIZONTAL_1:
			ILI9341_Write_Data(0x20|0x08);
 800160a:	2028      	movs	r0, #40	@ 0x28
 800160c:	f7ff ff4a 	bl	80014a4 <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 8001610:	4b11      	ldr	r3, [pc, #68]	@ (8001658 <ILI9341_Set_Rotation+0x9c>)
 8001612:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8001616:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 8001618:	4b10      	ldr	r3, [pc, #64]	@ (800165c <ILI9341_Set_Rotation+0xa0>)
 800161a:	22f0      	movs	r2, #240	@ 0xf0
 800161c:	801a      	strh	r2, [r3, #0]
			break;
 800161e:	e016      	b.n	800164e <ILI9341_Set_Rotation+0x92>
		case SCREEN_VERTICAL_2:
			ILI9341_Write_Data(0x80|0x08);
 8001620:	2088      	movs	r0, #136	@ 0x88
 8001622:	f7ff ff3f 	bl	80014a4 <ILI9341_Write_Data>
			LCD_WIDTH  = 240;
 8001626:	4b0c      	ldr	r3, [pc, #48]	@ (8001658 <ILI9341_Set_Rotation+0x9c>)
 8001628:	22f0      	movs	r2, #240	@ 0xf0
 800162a:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 800162c:	4b0b      	ldr	r3, [pc, #44]	@ (800165c <ILI9341_Set_Rotation+0xa0>)
 800162e:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8001632:	801a      	strh	r2, [r3, #0]
			break;
 8001634:	e00b      	b.n	800164e <ILI9341_Set_Rotation+0x92>
		case SCREEN_HORIZONTAL_2:
			ILI9341_Write_Data(0x40|0x80|0x20|0x08);
 8001636:	20e8      	movs	r0, #232	@ 0xe8
 8001638:	f7ff ff34 	bl	80014a4 <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 800163c:	4b06      	ldr	r3, [pc, #24]	@ (8001658 <ILI9341_Set_Rotation+0x9c>)
 800163e:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8001642:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 8001644:	4b05      	ldr	r3, [pc, #20]	@ (800165c <ILI9341_Set_Rotation+0xa0>)
 8001646:	22f0      	movs	r2, #240	@ 0xf0
 8001648:	801a      	strh	r2, [r3, #0]
			break;
 800164a:	e000      	b.n	800164e <ILI9341_Set_Rotation+0x92>
		default:
			//EXIT IF SCREEN ROTATION NOT VALID!
			break;
 800164c:	bf00      	nop
	}
}
 800164e:	bf00      	nop
 8001650:	3710      	adds	r7, #16
 8001652:	46bd      	mov	sp, r7
 8001654:	bd80      	pop	{r7, pc}
 8001656:	bf00      	nop
 8001658:	2000000e 	.word	0x2000000e
 800165c:	2000000c 	.word	0x2000000c

08001660 <ILI9341_Enable>:

/*Enable LCD display*/
void ILI9341_Enable(void)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	af00      	add	r7, sp, #0
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);
 8001664:	2201      	movs	r2, #1
 8001666:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800166a:	4802      	ldr	r0, [pc, #8]	@ (8001674 <ILI9341_Enable+0x14>)
 800166c:	f001 fa28 	bl	8002ac0 <HAL_GPIO_WritePin>
}
 8001670:	bf00      	nop
 8001672:	bd80      	pop	{r7, pc}
 8001674:	40020800 	.word	0x40020800

08001678 <ILI9341_Init>:

/*Initialize LCD display*/
void ILI9341_Init(void)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	af00      	add	r7, sp, #0

ILI9341_Enable();
 800167c:	f7ff fff0 	bl	8001660 <ILI9341_Enable>
ILI9341_SPI_Init();
 8001680:	f7ff fed0 	bl	8001424 <ILI9341_SPI_Init>
ILI9341_Reset();
 8001684:	f7ff ff7c 	bl	8001580 <ILI9341_Reset>

//SOFTWARE RESET
ILI9341_Write_Command(0x01);
 8001688:	2001      	movs	r0, #1
 800168a:	f7ff fee9 	bl	8001460 <ILI9341_Write_Command>
HAL_Delay(1000);
 800168e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001692:	f000 fb65 	bl	8001d60 <HAL_Delay>
	
//POWER CONTROL A
ILI9341_Write_Command(0xCB);
 8001696:	20cb      	movs	r0, #203	@ 0xcb
 8001698:	f7ff fee2 	bl	8001460 <ILI9341_Write_Command>
ILI9341_Write_Data(0x39);
 800169c:	2039      	movs	r0, #57	@ 0x39
 800169e:	f7ff ff01 	bl	80014a4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x2C);
 80016a2:	202c      	movs	r0, #44	@ 0x2c
 80016a4:	f7ff fefe 	bl	80014a4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 80016a8:	2000      	movs	r0, #0
 80016aa:	f7ff fefb 	bl	80014a4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x34);
 80016ae:	2034      	movs	r0, #52	@ 0x34
 80016b0:	f7ff fef8 	bl	80014a4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x02);
 80016b4:	2002      	movs	r0, #2
 80016b6:	f7ff fef5 	bl	80014a4 <ILI9341_Write_Data>

//POWER CONTROL B
ILI9341_Write_Command(0xCF);
 80016ba:	20cf      	movs	r0, #207	@ 0xcf
 80016bc:	f7ff fed0 	bl	8001460 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 80016c0:	2000      	movs	r0, #0
 80016c2:	f7ff feef 	bl	80014a4 <ILI9341_Write_Data>
ILI9341_Write_Data(0xC1);
 80016c6:	20c1      	movs	r0, #193	@ 0xc1
 80016c8:	f7ff feec 	bl	80014a4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x30);
 80016cc:	2030      	movs	r0, #48	@ 0x30
 80016ce:	f7ff fee9 	bl	80014a4 <ILI9341_Write_Data>

//DRIVER TIMING CONTROL A
ILI9341_Write_Command(0xE8);
 80016d2:	20e8      	movs	r0, #232	@ 0xe8
 80016d4:	f7ff fec4 	bl	8001460 <ILI9341_Write_Command>
ILI9341_Write_Data(0x85);
 80016d8:	2085      	movs	r0, #133	@ 0x85
 80016da:	f7ff fee3 	bl	80014a4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 80016de:	2000      	movs	r0, #0
 80016e0:	f7ff fee0 	bl	80014a4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x78);
 80016e4:	2078      	movs	r0, #120	@ 0x78
 80016e6:	f7ff fedd 	bl	80014a4 <ILI9341_Write_Data>

//DRIVER TIMING CONTROL B
ILI9341_Write_Command(0xEA);
 80016ea:	20ea      	movs	r0, #234	@ 0xea
 80016ec:	f7ff feb8 	bl	8001460 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 80016f0:	2000      	movs	r0, #0
 80016f2:	f7ff fed7 	bl	80014a4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 80016f6:	2000      	movs	r0, #0
 80016f8:	f7ff fed4 	bl	80014a4 <ILI9341_Write_Data>

//POWER ON SEQUENCE CONTROL
ILI9341_Write_Command(0xED);
 80016fc:	20ed      	movs	r0, #237	@ 0xed
 80016fe:	f7ff feaf 	bl	8001460 <ILI9341_Write_Command>
ILI9341_Write_Data(0x64);
 8001702:	2064      	movs	r0, #100	@ 0x64
 8001704:	f7ff fece 	bl	80014a4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 8001708:	2003      	movs	r0, #3
 800170a:	f7ff fecb 	bl	80014a4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x12);
 800170e:	2012      	movs	r0, #18
 8001710:	f7ff fec8 	bl	80014a4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x81);
 8001714:	2081      	movs	r0, #129	@ 0x81
 8001716:	f7ff fec5 	bl	80014a4 <ILI9341_Write_Data>

//PUMP RATIO CONTROL
ILI9341_Write_Command(0xF7);
 800171a:	20f7      	movs	r0, #247	@ 0xf7
 800171c:	f7ff fea0 	bl	8001460 <ILI9341_Write_Command>
ILI9341_Write_Data(0x20);
 8001720:	2020      	movs	r0, #32
 8001722:	f7ff febf 	bl	80014a4 <ILI9341_Write_Data>

//POWER CONTROL,VRH[5:0]
ILI9341_Write_Command(0xC0);
 8001726:	20c0      	movs	r0, #192	@ 0xc0
 8001728:	f7ff fe9a 	bl	8001460 <ILI9341_Write_Command>
ILI9341_Write_Data(0x23);
 800172c:	2023      	movs	r0, #35	@ 0x23
 800172e:	f7ff feb9 	bl	80014a4 <ILI9341_Write_Data>

//POWER CONTROL,SAP[2:0];BT[3:0]
ILI9341_Write_Command(0xC1);
 8001732:	20c1      	movs	r0, #193	@ 0xc1
 8001734:	f7ff fe94 	bl	8001460 <ILI9341_Write_Command>
ILI9341_Write_Data(0x10);
 8001738:	2010      	movs	r0, #16
 800173a:	f7ff feb3 	bl	80014a4 <ILI9341_Write_Data>

//VCM CONTROL
ILI9341_Write_Command(0xC5);
 800173e:	20c5      	movs	r0, #197	@ 0xc5
 8001740:	f7ff fe8e 	bl	8001460 <ILI9341_Write_Command>
ILI9341_Write_Data(0x3E);
 8001744:	203e      	movs	r0, #62	@ 0x3e
 8001746:	f7ff fead 	bl	80014a4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x28);
 800174a:	2028      	movs	r0, #40	@ 0x28
 800174c:	f7ff feaa 	bl	80014a4 <ILI9341_Write_Data>

//VCM CONTROL 2
ILI9341_Write_Command(0xC7);
 8001750:	20c7      	movs	r0, #199	@ 0xc7
 8001752:	f7ff fe85 	bl	8001460 <ILI9341_Write_Command>
ILI9341_Write_Data(0x86);
 8001756:	2086      	movs	r0, #134	@ 0x86
 8001758:	f7ff fea4 	bl	80014a4 <ILI9341_Write_Data>

//MEMORY ACCESS CONTROL
ILI9341_Write_Command(0x36);
 800175c:	2036      	movs	r0, #54	@ 0x36
 800175e:	f7ff fe7f 	bl	8001460 <ILI9341_Write_Command>
ILI9341_Write_Data(0x48);
 8001762:	2048      	movs	r0, #72	@ 0x48
 8001764:	f7ff fe9e 	bl	80014a4 <ILI9341_Write_Data>

//PIXEL FORMAT
ILI9341_Write_Command(0x3A);
 8001768:	203a      	movs	r0, #58	@ 0x3a
 800176a:	f7ff fe79 	bl	8001460 <ILI9341_Write_Command>
ILI9341_Write_Data(0x55);
 800176e:	2055      	movs	r0, #85	@ 0x55
 8001770:	f7ff fe98 	bl	80014a4 <ILI9341_Write_Data>

//FRAME RATIO CONTROL, STANDARD RGB COLOR
ILI9341_Write_Command(0xB1);
 8001774:	20b1      	movs	r0, #177	@ 0xb1
 8001776:	f7ff fe73 	bl	8001460 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 800177a:	2000      	movs	r0, #0
 800177c:	f7ff fe92 	bl	80014a4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x18);
 8001780:	2018      	movs	r0, #24
 8001782:	f7ff fe8f 	bl	80014a4 <ILI9341_Write_Data>

//DISPLAY FUNCTION CONTROL
ILI9341_Write_Command(0xB6);
 8001786:	20b6      	movs	r0, #182	@ 0xb6
 8001788:	f7ff fe6a 	bl	8001460 <ILI9341_Write_Command>
ILI9341_Write_Data(0x08);
 800178c:	2008      	movs	r0, #8
 800178e:	f7ff fe89 	bl	80014a4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x82);
 8001792:	2082      	movs	r0, #130	@ 0x82
 8001794:	f7ff fe86 	bl	80014a4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x27);
 8001798:	2027      	movs	r0, #39	@ 0x27
 800179a:	f7ff fe83 	bl	80014a4 <ILI9341_Write_Data>

//3GAMMA FUNCTION DISABLE
ILI9341_Write_Command(0xF2);
 800179e:	20f2      	movs	r0, #242	@ 0xf2
 80017a0:	f7ff fe5e 	bl	8001460 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 80017a4:	2000      	movs	r0, #0
 80017a6:	f7ff fe7d 	bl	80014a4 <ILI9341_Write_Data>

//GAMMA CURVE SELECTED
ILI9341_Write_Command(0x26);
 80017aa:	2026      	movs	r0, #38	@ 0x26
 80017ac:	f7ff fe58 	bl	8001460 <ILI9341_Write_Command>
ILI9341_Write_Data(0x01);
 80017b0:	2001      	movs	r0, #1
 80017b2:	f7ff fe77 	bl	80014a4 <ILI9341_Write_Data>

//POSITIVE GAMMA CORRECTION
ILI9341_Write_Command(0xE0);
 80017b6:	20e0      	movs	r0, #224	@ 0xe0
 80017b8:	f7ff fe52 	bl	8001460 <ILI9341_Write_Command>
ILI9341_Write_Data(0x0F);
 80017bc:	200f      	movs	r0, #15
 80017be:	f7ff fe71 	bl	80014a4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 80017c2:	2031      	movs	r0, #49	@ 0x31
 80017c4:	f7ff fe6e 	bl	80014a4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x2B);
 80017c8:	202b      	movs	r0, #43	@ 0x2b
 80017ca:	f7ff fe6b 	bl	80014a4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0C);
 80017ce:	200c      	movs	r0, #12
 80017d0:	f7ff fe68 	bl	80014a4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 80017d4:	200e      	movs	r0, #14
 80017d6:	f7ff fe65 	bl	80014a4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x08);
 80017da:	2008      	movs	r0, #8
 80017dc:	f7ff fe62 	bl	80014a4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x4E);
 80017e0:	204e      	movs	r0, #78	@ 0x4e
 80017e2:	f7ff fe5f 	bl	80014a4 <ILI9341_Write_Data>
ILI9341_Write_Data(0xF1);
 80017e6:	20f1      	movs	r0, #241	@ 0xf1
 80017e8:	f7ff fe5c 	bl	80014a4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x37);
 80017ec:	2037      	movs	r0, #55	@ 0x37
 80017ee:	f7ff fe59 	bl	80014a4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x07);
 80017f2:	2007      	movs	r0, #7
 80017f4:	f7ff fe56 	bl	80014a4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x10);
 80017f8:	2010      	movs	r0, #16
 80017fa:	f7ff fe53 	bl	80014a4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 80017fe:	2003      	movs	r0, #3
 8001800:	f7ff fe50 	bl	80014a4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 8001804:	200e      	movs	r0, #14
 8001806:	f7ff fe4d 	bl	80014a4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x09);
 800180a:	2009      	movs	r0, #9
 800180c:	f7ff fe4a 	bl	80014a4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8001810:	2000      	movs	r0, #0
 8001812:	f7ff fe47 	bl	80014a4 <ILI9341_Write_Data>

//NEGATIVE GAMMA CORRECTION
ILI9341_Write_Command(0xE1);
 8001816:	20e1      	movs	r0, #225	@ 0xe1
 8001818:	f7ff fe22 	bl	8001460 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 800181c:	2000      	movs	r0, #0
 800181e:	f7ff fe41 	bl	80014a4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 8001822:	200e      	movs	r0, #14
 8001824:	f7ff fe3e 	bl	80014a4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x14);
 8001828:	2014      	movs	r0, #20
 800182a:	f7ff fe3b 	bl	80014a4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 800182e:	2003      	movs	r0, #3
 8001830:	f7ff fe38 	bl	80014a4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x11);
 8001834:	2011      	movs	r0, #17
 8001836:	f7ff fe35 	bl	80014a4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x07);
 800183a:	2007      	movs	r0, #7
 800183c:	f7ff fe32 	bl	80014a4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 8001840:	2031      	movs	r0, #49	@ 0x31
 8001842:	f7ff fe2f 	bl	80014a4 <ILI9341_Write_Data>
ILI9341_Write_Data(0xC1);
 8001846:	20c1      	movs	r0, #193	@ 0xc1
 8001848:	f7ff fe2c 	bl	80014a4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x48);
 800184c:	2048      	movs	r0, #72	@ 0x48
 800184e:	f7ff fe29 	bl	80014a4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x08);
 8001852:	2008      	movs	r0, #8
 8001854:	f7ff fe26 	bl	80014a4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0F);
 8001858:	200f      	movs	r0, #15
 800185a:	f7ff fe23 	bl	80014a4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0C);
 800185e:	200c      	movs	r0, #12
 8001860:	f7ff fe20 	bl	80014a4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 8001864:	2031      	movs	r0, #49	@ 0x31
 8001866:	f7ff fe1d 	bl	80014a4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x36);
 800186a:	2036      	movs	r0, #54	@ 0x36
 800186c:	f7ff fe1a 	bl	80014a4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0F);
 8001870:	200f      	movs	r0, #15
 8001872:	f7ff fe17 	bl	80014a4 <ILI9341_Write_Data>

//EXIT SLEEP
ILI9341_Write_Command(0x11);
 8001876:	2011      	movs	r0, #17
 8001878:	f7ff fdf2 	bl	8001460 <ILI9341_Write_Command>
HAL_Delay(120);
 800187c:	2078      	movs	r0, #120	@ 0x78
 800187e:	f000 fa6f 	bl	8001d60 <HAL_Delay>

//TURN ON DISPLAY
ILI9341_Write_Command(0x29);
 8001882:	2029      	movs	r0, #41	@ 0x29
 8001884:	f7ff fdec 	bl	8001460 <ILI9341_Write_Command>

//STARTING ROTATION
ILI9341_Set_Rotation(SCREEN_VERTICAL_1);
 8001888:	2000      	movs	r0, #0
 800188a:	f7ff fe97 	bl	80015bc <ILI9341_Set_Rotation>
}
 800188e:	bf00      	nop
 8001890:	bd80      	pop	{r7, pc}
	...

08001894 <ILI9341_Draw_Colour_Burst>:
}

//INTERNAL FUNCTION OF LIBRARY
/*Sends block colour information to LCD*/
void ILI9341_Draw_Colour_Burst(uint16_t Colour, uint32_t Size)
{
 8001894:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001898:	b08d      	sub	sp, #52	@ 0x34
 800189a:	af00      	add	r7, sp, #0
 800189c:	4603      	mov	r3, r0
 800189e:	6039      	str	r1, [r7, #0]
 80018a0:	80fb      	strh	r3, [r7, #6]
 80018a2:	466b      	mov	r3, sp
 80018a4:	461e      	mov	r6, r3
//SENDS COLOUR
uint32_t Buffer_Size = 0;
 80018a6:	2300      	movs	r3, #0
 80018a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
if((Size*2) < BURST_MAX_SIZE)
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	005b      	lsls	r3, r3, #1
 80018ae:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80018b2:	d202      	bcs.n	80018ba <ILI9341_Draw_Colour_Burst+0x26>
{
	Buffer_Size = Size;
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80018b8:	e002      	b.n	80018c0 <ILI9341_Draw_Colour_Burst+0x2c>
}
else
{
	Buffer_Size = BURST_MAX_SIZE;
 80018ba:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80018be:	62fb      	str	r3, [r7, #44]	@ 0x2c
}
	
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 80018c0:	2201      	movs	r2, #1
 80018c2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80018c6:	4840      	ldr	r0, [pc, #256]	@ (80019c8 <ILI9341_Draw_Colour_Burst+0x134>)
 80018c8:	f001 f8fa 	bl	8002ac0 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 80018cc:	2200      	movs	r2, #0
 80018ce:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80018d2:	483d      	ldr	r0, [pc, #244]	@ (80019c8 <ILI9341_Draw_Colour_Burst+0x134>)
 80018d4:	f001 f8f4 	bl	8002ac0 <HAL_GPIO_WritePin>

unsigned char chifted = 	Colour>>8;;
 80018d8:	88fb      	ldrh	r3, [r7, #6]
 80018da:	0a1b      	lsrs	r3, r3, #8
 80018dc:	b29b      	uxth	r3, r3
 80018de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
unsigned char burst_buffer[Buffer_Size];
 80018e2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80018e4:	460b      	mov	r3, r1
 80018e6:	3b01      	subs	r3, #1
 80018e8:	61fb      	str	r3, [r7, #28]
 80018ea:	2300      	movs	r3, #0
 80018ec:	4688      	mov	r8, r1
 80018ee:	4699      	mov	r9, r3
 80018f0:	f04f 0200 	mov.w	r2, #0
 80018f4:	f04f 0300 	mov.w	r3, #0
 80018f8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80018fc:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001900:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001904:	2300      	movs	r3, #0
 8001906:	460c      	mov	r4, r1
 8001908:	461d      	mov	r5, r3
 800190a:	f04f 0200 	mov.w	r2, #0
 800190e:	f04f 0300 	mov.w	r3, #0
 8001912:	00eb      	lsls	r3, r5, #3
 8001914:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001918:	00e2      	lsls	r2, r4, #3
 800191a:	1dcb      	adds	r3, r1, #7
 800191c:	08db      	lsrs	r3, r3, #3
 800191e:	00db      	lsls	r3, r3, #3
 8001920:	ebad 0d03 	sub.w	sp, sp, r3
 8001924:	466b      	mov	r3, sp
 8001926:	3300      	adds	r3, #0
 8001928:	61bb      	str	r3, [r7, #24]
for(uint32_t j = 0; j < Buffer_Size; j+=2)
 800192a:	2300      	movs	r3, #0
 800192c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800192e:	e00e      	b.n	800194e <ILI9341_Draw_Colour_Burst+0xba>
	{
		burst_buffer[j] = 	chifted;
 8001930:	69ba      	ldr	r2, [r7, #24]
 8001932:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001934:	4413      	add	r3, r2
 8001936:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 800193a:	701a      	strb	r2, [r3, #0]
		burst_buffer[j+1] = Colour;
 800193c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800193e:	3301      	adds	r3, #1
 8001940:	88fa      	ldrh	r2, [r7, #6]
 8001942:	b2d1      	uxtb	r1, r2
 8001944:	69ba      	ldr	r2, [r7, #24]
 8001946:	54d1      	strb	r1, [r2, r3]
for(uint32_t j = 0; j < Buffer_Size; j+=2)
 8001948:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800194a:	3302      	adds	r3, #2
 800194c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800194e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001950:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001952:	429a      	cmp	r2, r3
 8001954:	d3ec      	bcc.n	8001930 <ILI9341_Draw_Colour_Burst+0x9c>
	}

uint32_t Sending_Size = Size*2;
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	005b      	lsls	r3, r3, #1
 800195a:	617b      	str	r3, [r7, #20]
uint32_t Sending_in_Block = Sending_Size/Buffer_Size;
 800195c:	697a      	ldr	r2, [r7, #20]
 800195e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001960:	fbb2 f3f3 	udiv	r3, r2, r3
 8001964:	613b      	str	r3, [r7, #16]
uint32_t Remainder_from_block = Sending_Size%Buffer_Size;
 8001966:	697b      	ldr	r3, [r7, #20]
 8001968:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800196a:	fbb3 f2f2 	udiv	r2, r3, r2
 800196e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8001970:	fb01 f202 	mul.w	r2, r1, r2
 8001974:	1a9b      	subs	r3, r3, r2
 8001976:	60fb      	str	r3, [r7, #12]

if(Sending_in_Block != 0)
 8001978:	693b      	ldr	r3, [r7, #16]
 800197a:	2b00      	cmp	r3, #0
 800197c:	d010      	beq.n	80019a0 <ILI9341_Draw_Colour_Burst+0x10c>
{
	for(uint32_t j = 0; j < (Sending_in_Block); j++)
 800197e:	2300      	movs	r3, #0
 8001980:	627b      	str	r3, [r7, #36]	@ 0x24
 8001982:	e009      	b.n	8001998 <ILI9341_Draw_Colour_Burst+0x104>
		{
		HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)burst_buffer, Buffer_Size, 10);	
 8001984:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001986:	b29a      	uxth	r2, r3
 8001988:	230a      	movs	r3, #10
 800198a:	69b9      	ldr	r1, [r7, #24]
 800198c:	480f      	ldr	r0, [pc, #60]	@ (80019cc <ILI9341_Draw_Colour_Burst+0x138>)
 800198e:	f002 fa5e 	bl	8003e4e <HAL_SPI_Transmit>
	for(uint32_t j = 0; j < (Sending_in_Block); j++)
 8001992:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001994:	3301      	adds	r3, #1
 8001996:	627b      	str	r3, [r7, #36]	@ 0x24
 8001998:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800199a:	693b      	ldr	r3, [r7, #16]
 800199c:	429a      	cmp	r2, r3
 800199e:	d3f1      	bcc.n	8001984 <ILI9341_Draw_Colour_Burst+0xf0>
		}
}

//REMAINDER!
HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)burst_buffer, Remainder_from_block, 10);	
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	b29a      	uxth	r2, r3
 80019a4:	230a      	movs	r3, #10
 80019a6:	69b9      	ldr	r1, [r7, #24]
 80019a8:	4808      	ldr	r0, [pc, #32]	@ (80019cc <ILI9341_Draw_Colour_Burst+0x138>)
 80019aa:	f002 fa50 	bl	8003e4e <HAL_SPI_Transmit>
	
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 80019ae:	2201      	movs	r2, #1
 80019b0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80019b4:	4804      	ldr	r0, [pc, #16]	@ (80019c8 <ILI9341_Draw_Colour_Burst+0x134>)
 80019b6:	f001 f883 	bl	8002ac0 <HAL_GPIO_WritePin>
 80019ba:	46b5      	mov	sp, r6
}
 80019bc:	bf00      	nop
 80019be:	3734      	adds	r7, #52	@ 0x34
 80019c0:	46bd      	mov	sp, r7
 80019c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80019c6:	bf00      	nop
 80019c8:	40020800 	.word	0x40020800
 80019cc:	20000114 	.word	0x20000114

080019d0 <ILI9341_Fill_Screen>:

//FILL THE ENTIRE SCREEN WITH SELECTED COLOUR (either #define-d ones or custom 16bit)
/*Sets address (entire screen) and Sends Height*Width ammount of colour information to LCD*/
void ILI9341_Fill_Screen(uint16_t Colour)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b082      	sub	sp, #8
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	4603      	mov	r3, r0
 80019d8:	80fb      	strh	r3, [r7, #6]
ILI9341_Set_Address(0,0,LCD_WIDTH,LCD_HEIGHT);	
 80019da:	4b0e      	ldr	r3, [pc, #56]	@ (8001a14 <ILI9341_Fill_Screen+0x44>)
 80019dc:	881b      	ldrh	r3, [r3, #0]
 80019de:	b29a      	uxth	r2, r3
 80019e0:	4b0d      	ldr	r3, [pc, #52]	@ (8001a18 <ILI9341_Fill_Screen+0x48>)
 80019e2:	881b      	ldrh	r3, [r3, #0]
 80019e4:	b29b      	uxth	r3, r3
 80019e6:	2100      	movs	r1, #0
 80019e8:	2000      	movs	r0, #0
 80019ea:	f7ff fd7d 	bl	80014e8 <ILI9341_Set_Address>
ILI9341_Draw_Colour_Burst(Colour, LCD_WIDTH*LCD_HEIGHT);	
 80019ee:	4b09      	ldr	r3, [pc, #36]	@ (8001a14 <ILI9341_Fill_Screen+0x44>)
 80019f0:	881b      	ldrh	r3, [r3, #0]
 80019f2:	b29b      	uxth	r3, r3
 80019f4:	461a      	mov	r2, r3
 80019f6:	4b08      	ldr	r3, [pc, #32]	@ (8001a18 <ILI9341_Fill_Screen+0x48>)
 80019f8:	881b      	ldrh	r3, [r3, #0]
 80019fa:	b29b      	uxth	r3, r3
 80019fc:	fb02 f303 	mul.w	r3, r2, r3
 8001a00:	461a      	mov	r2, r3
 8001a02:	88fb      	ldrh	r3, [r7, #6]
 8001a04:	4611      	mov	r1, r2
 8001a06:	4618      	mov	r0, r3
 8001a08:	f7ff ff44 	bl	8001894 <ILI9341_Draw_Colour_Burst>
}
 8001a0c:	bf00      	nop
 8001a0e:	3708      	adds	r7, #8
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bd80      	pop	{r7, pc}
 8001a14:	2000000e 	.word	0x2000000e
 8001a18:	2000000c 	.word	0x2000000c

08001a1c <ILI9341_Draw_Pixel>:
//Location is dependant on screen orientation. x0 and y0 locations change with orientations.
//Using pixels to draw big simple structures is not recommended as it is really slow
//Try using either rectangles or lines if possible
//
void ILI9341_Draw_Pixel(uint16_t X,uint16_t Y,uint16_t Colour) 
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b086      	sub	sp, #24
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	4603      	mov	r3, r0
 8001a24:	80fb      	strh	r3, [r7, #6]
 8001a26:	460b      	mov	r3, r1
 8001a28:	80bb      	strh	r3, [r7, #4]
 8001a2a:	4613      	mov	r3, r2
 8001a2c:	807b      	strh	r3, [r7, #2]
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 8001a2e:	4b64      	ldr	r3, [pc, #400]	@ (8001bc0 <ILI9341_Draw_Pixel+0x1a4>)
 8001a30:	881b      	ldrh	r3, [r3, #0]
 8001a32:	b29b      	uxth	r3, r3
 8001a34:	88fa      	ldrh	r2, [r7, #6]
 8001a36:	429a      	cmp	r2, r3
 8001a38:	f080 80be 	bcs.w	8001bb8 <ILI9341_Draw_Pixel+0x19c>
 8001a3c:	4b61      	ldr	r3, [pc, #388]	@ (8001bc4 <ILI9341_Draw_Pixel+0x1a8>)
 8001a3e:	881b      	ldrh	r3, [r3, #0]
 8001a40:	b29b      	uxth	r3, r3
 8001a42:	88ba      	ldrh	r2, [r7, #4]
 8001a44:	429a      	cmp	r2, r3
 8001a46:	f080 80b7 	bcs.w	8001bb8 <ILI9341_Draw_Pixel+0x19c>
	
//ADDRESS
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001a50:	485d      	ldr	r0, [pc, #372]	@ (8001bc8 <ILI9341_Draw_Pixel+0x1ac>)
 8001a52:	f001 f835 	bl	8002ac0 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8001a56:	2200      	movs	r2, #0
 8001a58:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001a5c:	485a      	ldr	r0, [pc, #360]	@ (8001bc8 <ILI9341_Draw_Pixel+0x1ac>)
 8001a5e:	f001 f82f 	bl	8002ac0 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2A);
 8001a62:	202a      	movs	r0, #42	@ 0x2a
 8001a64:	f7ff fcea 	bl	800143c <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 8001a68:	2201      	movs	r2, #1
 8001a6a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001a6e:	4856      	ldr	r0, [pc, #344]	@ (8001bc8 <ILI9341_Draw_Pixel+0x1ac>)
 8001a70:	f001 f826 	bl	8002ac0 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);		
 8001a74:	2201      	movs	r2, #1
 8001a76:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001a7a:	4853      	ldr	r0, [pc, #332]	@ (8001bc8 <ILI9341_Draw_Pixel+0x1ac>)
 8001a7c:	f001 f820 	bl	8002ac0 <HAL_GPIO_WritePin>

//XDATA
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 8001a80:	2200      	movs	r2, #0
 8001a82:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001a86:	4850      	ldr	r0, [pc, #320]	@ (8001bc8 <ILI9341_Draw_Pixel+0x1ac>)
 8001a88:	f001 f81a 	bl	8002ac0 <HAL_GPIO_WritePin>
unsigned char Temp_Buffer[4] = {X>>8,X, (X+1)>>8, (X+1)};
 8001a8c:	88fb      	ldrh	r3, [r7, #6]
 8001a8e:	0a1b      	lsrs	r3, r3, #8
 8001a90:	b29b      	uxth	r3, r3
 8001a92:	b2db      	uxtb	r3, r3
 8001a94:	753b      	strb	r3, [r7, #20]
 8001a96:	88fb      	ldrh	r3, [r7, #6]
 8001a98:	b2db      	uxtb	r3, r3
 8001a9a:	757b      	strb	r3, [r7, #21]
 8001a9c:	88fb      	ldrh	r3, [r7, #6]
 8001a9e:	3301      	adds	r3, #1
 8001aa0:	121b      	asrs	r3, r3, #8
 8001aa2:	b2db      	uxtb	r3, r3
 8001aa4:	75bb      	strb	r3, [r7, #22]
 8001aa6:	88fb      	ldrh	r3, [r7, #6]
 8001aa8:	b2db      	uxtb	r3, r3
 8001aaa:	3301      	adds	r3, #1
 8001aac:	b2db      	uxtb	r3, r3
 8001aae:	75fb      	strb	r3, [r7, #23]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer, 4, 1);
 8001ab0:	f107 0114 	add.w	r1, r7, #20
 8001ab4:	2301      	movs	r3, #1
 8001ab6:	2204      	movs	r2, #4
 8001ab8:	4844      	ldr	r0, [pc, #272]	@ (8001bcc <ILI9341_Draw_Pixel+0x1b0>)
 8001aba:	f002 f9c8 	bl	8003e4e <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8001abe:	2201      	movs	r2, #1
 8001ac0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001ac4:	4840      	ldr	r0, [pc, #256]	@ (8001bc8 <ILI9341_Draw_Pixel+0x1ac>)
 8001ac6:	f000 fffb 	bl	8002ac0 <HAL_GPIO_WritePin>

//ADDRESS
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 8001aca:	2200      	movs	r2, #0
 8001acc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001ad0:	483d      	ldr	r0, [pc, #244]	@ (8001bc8 <ILI9341_Draw_Pixel+0x1ac>)
 8001ad2:	f000 fff5 	bl	8002ac0 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001adc:	483a      	ldr	r0, [pc, #232]	@ (8001bc8 <ILI9341_Draw_Pixel+0x1ac>)
 8001ade:	f000 ffef 	bl	8002ac0 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2B);
 8001ae2:	202b      	movs	r0, #43	@ 0x2b
 8001ae4:	f7ff fcaa 	bl	800143c <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);			
 8001ae8:	2201      	movs	r2, #1
 8001aea:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001aee:	4836      	ldr	r0, [pc, #216]	@ (8001bc8 <ILI9341_Draw_Pixel+0x1ac>)
 8001af0:	f000 ffe6 	bl	8002ac0 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);			
 8001af4:	2201      	movs	r2, #1
 8001af6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001afa:	4833      	ldr	r0, [pc, #204]	@ (8001bc8 <ILI9341_Draw_Pixel+0x1ac>)
 8001afc:	f000 ffe0 	bl	8002ac0 <HAL_GPIO_WritePin>

//YDATA
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8001b00:	2200      	movs	r2, #0
 8001b02:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001b06:	4830      	ldr	r0, [pc, #192]	@ (8001bc8 <ILI9341_Draw_Pixel+0x1ac>)
 8001b08:	f000 ffda 	bl	8002ac0 <HAL_GPIO_WritePin>
unsigned char Temp_Buffer1[4] = {Y>>8,Y, (Y+1)>>8, (Y+1)};
 8001b0c:	88bb      	ldrh	r3, [r7, #4]
 8001b0e:	0a1b      	lsrs	r3, r3, #8
 8001b10:	b29b      	uxth	r3, r3
 8001b12:	b2db      	uxtb	r3, r3
 8001b14:	743b      	strb	r3, [r7, #16]
 8001b16:	88bb      	ldrh	r3, [r7, #4]
 8001b18:	b2db      	uxtb	r3, r3
 8001b1a:	747b      	strb	r3, [r7, #17]
 8001b1c:	88bb      	ldrh	r3, [r7, #4]
 8001b1e:	3301      	adds	r3, #1
 8001b20:	121b      	asrs	r3, r3, #8
 8001b22:	b2db      	uxtb	r3, r3
 8001b24:	74bb      	strb	r3, [r7, #18]
 8001b26:	88bb      	ldrh	r3, [r7, #4]
 8001b28:	b2db      	uxtb	r3, r3
 8001b2a:	3301      	adds	r3, #1
 8001b2c:	b2db      	uxtb	r3, r3
 8001b2e:	74fb      	strb	r3, [r7, #19]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer1, 4, 1);
 8001b30:	f107 0110 	add.w	r1, r7, #16
 8001b34:	2301      	movs	r3, #1
 8001b36:	2204      	movs	r2, #4
 8001b38:	4824      	ldr	r0, [pc, #144]	@ (8001bcc <ILI9341_Draw_Pixel+0x1b0>)
 8001b3a:	f002 f988 	bl	8003e4e <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8001b3e:	2201      	movs	r2, #1
 8001b40:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001b44:	4820      	ldr	r0, [pc, #128]	@ (8001bc8 <ILI9341_Draw_Pixel+0x1ac>)
 8001b46:	f000 ffbb 	bl	8002ac0 <HAL_GPIO_WritePin>

//ADDRESS	
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001b50:	481d      	ldr	r0, [pc, #116]	@ (8001bc8 <ILI9341_Draw_Pixel+0x1ac>)
 8001b52:	f000 ffb5 	bl	8002ac0 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 8001b56:	2200      	movs	r2, #0
 8001b58:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001b5c:	481a      	ldr	r0, [pc, #104]	@ (8001bc8 <ILI9341_Draw_Pixel+0x1ac>)
 8001b5e:	f000 ffaf 	bl	8002ac0 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2C);
 8001b62:	202c      	movs	r0, #44	@ 0x2c
 8001b64:	f7ff fc6a 	bl	800143c <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);			
 8001b68:	2201      	movs	r2, #1
 8001b6a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001b6e:	4816      	ldr	r0, [pc, #88]	@ (8001bc8 <ILI9341_Draw_Pixel+0x1ac>)
 8001b70:	f000 ffa6 	bl	8002ac0 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);			
 8001b74:	2201      	movs	r2, #1
 8001b76:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001b7a:	4813      	ldr	r0, [pc, #76]	@ (8001bc8 <ILI9341_Draw_Pixel+0x1ac>)
 8001b7c:	f000 ffa0 	bl	8002ac0 <HAL_GPIO_WritePin>

//COLOUR	
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8001b80:	2200      	movs	r2, #0
 8001b82:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001b86:	4810      	ldr	r0, [pc, #64]	@ (8001bc8 <ILI9341_Draw_Pixel+0x1ac>)
 8001b88:	f000 ff9a 	bl	8002ac0 <HAL_GPIO_WritePin>
unsigned char Temp_Buffer2[2] = {Colour>>8, Colour};
 8001b8c:	887b      	ldrh	r3, [r7, #2]
 8001b8e:	0a1b      	lsrs	r3, r3, #8
 8001b90:	b29b      	uxth	r3, r3
 8001b92:	b2db      	uxtb	r3, r3
 8001b94:	733b      	strb	r3, [r7, #12]
 8001b96:	887b      	ldrh	r3, [r7, #2]
 8001b98:	b2db      	uxtb	r3, r3
 8001b9a:	737b      	strb	r3, [r7, #13]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer2, 2, 1);
 8001b9c:	f107 010c 	add.w	r1, r7, #12
 8001ba0:	2301      	movs	r3, #1
 8001ba2:	2202      	movs	r2, #2
 8001ba4:	4809      	ldr	r0, [pc, #36]	@ (8001bcc <ILI9341_Draw_Pixel+0x1b0>)
 8001ba6:	f002 f952 	bl	8003e4e <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8001baa:	2201      	movs	r2, #1
 8001bac:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001bb0:	4805      	ldr	r0, [pc, #20]	@ (8001bc8 <ILI9341_Draw_Pixel+0x1ac>)
 8001bb2:	f000 ff85 	bl	8002ac0 <HAL_GPIO_WritePin>
 8001bb6:	e000      	b.n	8001bba <ILI9341_Draw_Pixel+0x19e>
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 8001bb8:	bf00      	nop
	
}
 8001bba:	3718      	adds	r7, #24
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	bd80      	pop	{r7, pc}
 8001bc0:	2000000e 	.word	0x2000000e
 8001bc4:	2000000c 	.word	0x2000000c
 8001bc8:	40020800 	.word	0x40020800
 8001bcc:	20000114 	.word	0x20000114

08001bd0 <ILI9341_Draw_Rectangle>:
//Rectangle is hollow. X and Y positions mark the upper left corner of rectangle
//As with all other draw calls x0 and y0 locations dependant on screen orientation
//

void ILI9341_Draw_Rectangle(uint16_t X, uint16_t Y, uint16_t Width, uint16_t Height, uint16_t Colour)
{
 8001bd0:	b590      	push	{r4, r7, lr}
 8001bd2:	b083      	sub	sp, #12
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	4604      	mov	r4, r0
 8001bd8:	4608      	mov	r0, r1
 8001bda:	4611      	mov	r1, r2
 8001bdc:	461a      	mov	r2, r3
 8001bde:	4623      	mov	r3, r4
 8001be0:	80fb      	strh	r3, [r7, #6]
 8001be2:	4603      	mov	r3, r0
 8001be4:	80bb      	strh	r3, [r7, #4]
 8001be6:	460b      	mov	r3, r1
 8001be8:	807b      	strh	r3, [r7, #2]
 8001bea:	4613      	mov	r3, r2
 8001bec:	803b      	strh	r3, [r7, #0]
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 8001bee:	4b24      	ldr	r3, [pc, #144]	@ (8001c80 <ILI9341_Draw_Rectangle+0xb0>)
 8001bf0:	881b      	ldrh	r3, [r3, #0]
 8001bf2:	b29b      	uxth	r3, r3
 8001bf4:	88fa      	ldrh	r2, [r7, #6]
 8001bf6:	429a      	cmp	r2, r3
 8001bf8:	d23d      	bcs.n	8001c76 <ILI9341_Draw_Rectangle+0xa6>
 8001bfa:	4b22      	ldr	r3, [pc, #136]	@ (8001c84 <ILI9341_Draw_Rectangle+0xb4>)
 8001bfc:	881b      	ldrh	r3, [r3, #0]
 8001bfe:	b29b      	uxth	r3, r3
 8001c00:	88ba      	ldrh	r2, [r7, #4]
 8001c02:	429a      	cmp	r2, r3
 8001c04:	d237      	bcs.n	8001c76 <ILI9341_Draw_Rectangle+0xa6>
if((X+Width-1)>=LCD_WIDTH)
 8001c06:	88fa      	ldrh	r2, [r7, #6]
 8001c08:	887b      	ldrh	r3, [r7, #2]
 8001c0a:	4413      	add	r3, r2
 8001c0c:	4a1c      	ldr	r2, [pc, #112]	@ (8001c80 <ILI9341_Draw_Rectangle+0xb0>)
 8001c0e:	8812      	ldrh	r2, [r2, #0]
 8001c10:	b292      	uxth	r2, r2
 8001c12:	4293      	cmp	r3, r2
 8001c14:	dd05      	ble.n	8001c22 <ILI9341_Draw_Rectangle+0x52>
	{
		Width=LCD_WIDTH-X;
 8001c16:	4b1a      	ldr	r3, [pc, #104]	@ (8001c80 <ILI9341_Draw_Rectangle+0xb0>)
 8001c18:	881b      	ldrh	r3, [r3, #0]
 8001c1a:	b29a      	uxth	r2, r3
 8001c1c:	88fb      	ldrh	r3, [r7, #6]
 8001c1e:	1ad3      	subs	r3, r2, r3
 8001c20:	807b      	strh	r3, [r7, #2]
	}
if((Y+Height-1)>=LCD_HEIGHT)
 8001c22:	88ba      	ldrh	r2, [r7, #4]
 8001c24:	883b      	ldrh	r3, [r7, #0]
 8001c26:	4413      	add	r3, r2
 8001c28:	4a16      	ldr	r2, [pc, #88]	@ (8001c84 <ILI9341_Draw_Rectangle+0xb4>)
 8001c2a:	8812      	ldrh	r2, [r2, #0]
 8001c2c:	b292      	uxth	r2, r2
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	dd05      	ble.n	8001c3e <ILI9341_Draw_Rectangle+0x6e>
	{
		Height=LCD_HEIGHT-Y;
 8001c32:	4b14      	ldr	r3, [pc, #80]	@ (8001c84 <ILI9341_Draw_Rectangle+0xb4>)
 8001c34:	881b      	ldrh	r3, [r3, #0]
 8001c36:	b29a      	uxth	r2, r3
 8001c38:	88bb      	ldrh	r3, [r7, #4]
 8001c3a:	1ad3      	subs	r3, r2, r3
 8001c3c:	803b      	strh	r3, [r7, #0]
	}
ILI9341_Set_Address(X, Y, X+Width-1, Y+Height-1);
 8001c3e:	88fa      	ldrh	r2, [r7, #6]
 8001c40:	887b      	ldrh	r3, [r7, #2]
 8001c42:	4413      	add	r3, r2
 8001c44:	b29b      	uxth	r3, r3
 8001c46:	3b01      	subs	r3, #1
 8001c48:	b29c      	uxth	r4, r3
 8001c4a:	88ba      	ldrh	r2, [r7, #4]
 8001c4c:	883b      	ldrh	r3, [r7, #0]
 8001c4e:	4413      	add	r3, r2
 8001c50:	b29b      	uxth	r3, r3
 8001c52:	3b01      	subs	r3, #1
 8001c54:	b29b      	uxth	r3, r3
 8001c56:	88b9      	ldrh	r1, [r7, #4]
 8001c58:	88f8      	ldrh	r0, [r7, #6]
 8001c5a:	4622      	mov	r2, r4
 8001c5c:	f7ff fc44 	bl	80014e8 <ILI9341_Set_Address>
ILI9341_Draw_Colour_Burst(Colour, Height*Width);
 8001c60:	883b      	ldrh	r3, [r7, #0]
 8001c62:	887a      	ldrh	r2, [r7, #2]
 8001c64:	fb02 f303 	mul.w	r3, r2, r3
 8001c68:	461a      	mov	r2, r3
 8001c6a:	8b3b      	ldrh	r3, [r7, #24]
 8001c6c:	4611      	mov	r1, r2
 8001c6e:	4618      	mov	r0, r3
 8001c70:	f7ff fe10 	bl	8001894 <ILI9341_Draw_Colour_Burst>
 8001c74:	e000      	b.n	8001c78 <ILI9341_Draw_Rectangle+0xa8>
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 8001c76:	bf00      	nop
}
 8001c78:	370c      	adds	r7, #12
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd90      	pop	{r4, r7, pc}
 8001c7e:	bf00      	nop
 8001c80:	2000000e 	.word	0x2000000e
 8001c84:	2000000c 	.word	0x2000000c

08001c88 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	af00      	add	r7, sp, #0
  /* Configure Instruction cache through ART accelerator */ 
#if (ART_ACCELERATOR_ENABLE != 0)
  __HAL_FLASH_ART_ENABLE();
 8001c8c:	4b0b      	ldr	r3, [pc, #44]	@ (8001cbc <HAL_Init+0x34>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	4a0a      	ldr	r2, [pc, #40]	@ (8001cbc <HAL_Init+0x34>)
 8001c92:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001c96:	6013      	str	r3, [r2, #0]
#endif /* ART_ACCELERATOR_ENABLE */

  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c98:	4b08      	ldr	r3, [pc, #32]	@ (8001cbc <HAL_Init+0x34>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	4a07      	ldr	r2, [pc, #28]	@ (8001cbc <HAL_Init+0x34>)
 8001c9e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ca2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ca4:	2003      	movs	r0, #3
 8001ca6:	f000 fd2b 	bl	8002700 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001caa:	200f      	movs	r0, #15
 8001cac:	f000 f808 	bl	8001cc0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001cb0:	f7ff f8aa 	bl	8000e08 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001cb4:	2300      	movs	r3, #0
}
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	bd80      	pop	{r7, pc}
 8001cba:	bf00      	nop
 8001cbc:	40023c00 	.word	0x40023c00

08001cc0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b082      	sub	sp, #8
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001cc8:	4b12      	ldr	r3, [pc, #72]	@ (8001d14 <HAL_InitTick+0x54>)
 8001cca:	681a      	ldr	r2, [r3, #0]
 8001ccc:	4b12      	ldr	r3, [pc, #72]	@ (8001d18 <HAL_InitTick+0x58>)
 8001cce:	781b      	ldrb	r3, [r3, #0]
 8001cd0:	4619      	mov	r1, r3
 8001cd2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001cd6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001cda:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cde:	4618      	mov	r0, r3
 8001ce0:	f000 fd35 	bl	800274e <HAL_SYSTICK_Config>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d001      	beq.n	8001cee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001cea:	2301      	movs	r3, #1
 8001cec:	e00e      	b.n	8001d0c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	2b0f      	cmp	r3, #15
 8001cf2:	d80a      	bhi.n	8001d0a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	6879      	ldr	r1, [r7, #4]
 8001cf8:	f04f 30ff 	mov.w	r0, #4294967295
 8001cfc:	f000 fd0b 	bl	8002716 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d00:	4a06      	ldr	r2, [pc, #24]	@ (8001d1c <HAL_InitTick+0x5c>)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d06:	2300      	movs	r3, #0
 8001d08:	e000      	b.n	8001d0c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001d0a:	2301      	movs	r3, #1
}
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	3708      	adds	r7, #8
 8001d10:	46bd      	mov	sp, r7
 8001d12:	bd80      	pop	{r7, pc}
 8001d14:	20000008 	.word	0x20000008
 8001d18:	20000014 	.word	0x20000014
 8001d1c:	20000010 	.word	0x20000010

08001d20 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d20:	b480      	push	{r7}
 8001d22:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d24:	4b06      	ldr	r3, [pc, #24]	@ (8001d40 <HAL_IncTick+0x20>)
 8001d26:	781b      	ldrb	r3, [r3, #0]
 8001d28:	461a      	mov	r2, r3
 8001d2a:	4b06      	ldr	r3, [pc, #24]	@ (8001d44 <HAL_IncTick+0x24>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	4413      	add	r3, r2
 8001d30:	4a04      	ldr	r2, [pc, #16]	@ (8001d44 <HAL_IncTick+0x24>)
 8001d32:	6013      	str	r3, [r2, #0]
}
 8001d34:	bf00      	nop
 8001d36:	46bd      	mov	sp, r7
 8001d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3c:	4770      	bx	lr
 8001d3e:	bf00      	nop
 8001d40:	20000014 	.word	0x20000014
 8001d44:	20000214 	.word	0x20000214

08001d48 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	af00      	add	r7, sp, #0
  return uwTick;
 8001d4c:	4b03      	ldr	r3, [pc, #12]	@ (8001d5c <HAL_GetTick+0x14>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
}
 8001d50:	4618      	mov	r0, r3
 8001d52:	46bd      	mov	sp, r7
 8001d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d58:	4770      	bx	lr
 8001d5a:	bf00      	nop
 8001d5c:	20000214 	.word	0x20000214

08001d60 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b084      	sub	sp, #16
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d68:	f7ff ffee 	bl	8001d48 <HAL_GetTick>
 8001d6c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d78:	d005      	beq.n	8001d86 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d7a:	4b0a      	ldr	r3, [pc, #40]	@ (8001da4 <HAL_Delay+0x44>)
 8001d7c:	781b      	ldrb	r3, [r3, #0]
 8001d7e:	461a      	mov	r2, r3
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	4413      	add	r3, r2
 8001d84:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001d86:	bf00      	nop
 8001d88:	f7ff ffde 	bl	8001d48 <HAL_GetTick>
 8001d8c:	4602      	mov	r2, r0
 8001d8e:	68bb      	ldr	r3, [r7, #8]
 8001d90:	1ad3      	subs	r3, r2, r3
 8001d92:	68fa      	ldr	r2, [r7, #12]
 8001d94:	429a      	cmp	r2, r3
 8001d96:	d8f7      	bhi.n	8001d88 <HAL_Delay+0x28>
  {
  }
}
 8001d98:	bf00      	nop
 8001d9a:	bf00      	nop
 8001d9c:	3710      	adds	r7, #16
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}
 8001da2:	bf00      	nop
 8001da4:	20000014 	.word	0x20000014

08001da8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b084      	sub	sp, #16
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001db0:	2300      	movs	r3, #0
 8001db2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d101      	bne.n	8001dbe <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001dba:	2301      	movs	r3, #1
 8001dbc:	e031      	b.n	8001e22 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d109      	bne.n	8001dda <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001dc6:	6878      	ldr	r0, [r7, #4]
 8001dc8:	f7ff f842 	bl	8000e50 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2200      	movs	r2, #0
 8001dd0:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dde:	f003 0310 	and.w	r3, r3, #16
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d116      	bne.n	8001e14 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001dea:	4b10      	ldr	r3, [pc, #64]	@ (8001e2c <HAL_ADC_Init+0x84>)
 8001dec:	4013      	ands	r3, r2
 8001dee:	f043 0202 	orr.w	r2, r3, #2
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001df6:	6878      	ldr	r0, [r7, #4]
 8001df8:	f000 fad6 	bl	80023a8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	2200      	movs	r2, #0
 8001e00:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e06:	f023 0303 	bic.w	r3, r3, #3
 8001e0a:	f043 0201 	orr.w	r2, r3, #1
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	641a      	str	r2, [r3, #64]	@ 0x40
 8001e12:	e001      	b.n	8001e18 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001e14:	2301      	movs	r3, #1
 8001e16:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001e20:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e22:	4618      	mov	r0, r3
 8001e24:	3710      	adds	r7, #16
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bd80      	pop	{r7, pc}
 8001e2a:	bf00      	nop
 8001e2c:	ffffeefd 	.word	0xffffeefd

08001e30 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001e30:	b480      	push	{r7}
 8001e32:	b085      	sub	sp, #20
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001e42:	2b01      	cmp	r3, #1
 8001e44:	d101      	bne.n	8001e4a <HAL_ADC_Start+0x1a>
 8001e46:	2302      	movs	r3, #2
 8001e48:	e0ad      	b.n	8001fa6 <HAL_ADC_Start+0x176>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	2201      	movs	r2, #1
 8001e4e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	689b      	ldr	r3, [r3, #8]
 8001e58:	f003 0301 	and.w	r3, r3, #1
 8001e5c:	2b01      	cmp	r3, #1
 8001e5e:	d018      	beq.n	8001e92 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	689a      	ldr	r2, [r3, #8]
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f042 0201 	orr.w	r2, r2, #1
 8001e6e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8001e70:	4b50      	ldr	r3, [pc, #320]	@ (8001fb4 <HAL_ADC_Start+0x184>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	4a50      	ldr	r2, [pc, #320]	@ (8001fb8 <HAL_ADC_Start+0x188>)
 8001e76:	fba2 2303 	umull	r2, r3, r2, r3
 8001e7a:	0c9a      	lsrs	r2, r3, #18
 8001e7c:	4613      	mov	r3, r2
 8001e7e:	005b      	lsls	r3, r3, #1
 8001e80:	4413      	add	r3, r2
 8001e82:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8001e84:	e002      	b.n	8001e8c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	3b01      	subs	r3, #1
 8001e8a:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d1f9      	bne.n	8001e86 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	689b      	ldr	r3, [r3, #8]
 8001e98:	f003 0301 	and.w	r3, r3, #1
 8001e9c:	2b01      	cmp	r3, #1
 8001e9e:	d175      	bne.n	8001f8c <HAL_ADC_Start+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001ea4:	4b45      	ldr	r3, [pc, #276]	@ (8001fbc <HAL_ADC_Start+0x18c>)
 8001ea6:	4013      	ands	r3, r2
 8001ea8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	685b      	ldr	r3, [r3, #4]
 8001eb6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d007      	beq.n	8001ece <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ec2:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001ec6:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ed2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001ed6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001eda:	d106      	bne.n	8001eea <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ee0:	f023 0206 	bic.w	r2, r3, #6
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	645a      	str	r2, [r3, #68]	@ 0x44
 8001ee8:	e002      	b.n	8001ef0 <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	2200      	movs	r2, #0
 8001eee:	645a      	str	r2, [r3, #68]	@ 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8001f00:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8001f02:	4b2f      	ldr	r3, [pc, #188]	@ (8001fc0 <HAL_ADC_Start+0x190>)
 8001f04:	685b      	ldr	r3, [r3, #4]
 8001f06:	f003 031f 	and.w	r3, r3, #31
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d10f      	bne.n	8001f2e <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	689b      	ldr	r3, [r3, #8]
 8001f14:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d143      	bne.n	8001fa4 <HAL_ADC_Start+0x174>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	689a      	ldr	r2, [r3, #8]
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001f2a:	609a      	str	r2, [r3, #8]
 8001f2c:	e03a      	b.n	8001fa4 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	4a24      	ldr	r2, [pc, #144]	@ (8001fc4 <HAL_ADC_Start+0x194>)
 8001f34:	4293      	cmp	r3, r2
 8001f36:	d10e      	bne.n	8001f56 <HAL_ADC_Start+0x126>
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	689b      	ldr	r3, [r3, #8]
 8001f3e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d107      	bne.n	8001f56 <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	689a      	ldr	r2, [r3, #8]
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001f54:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8001f56:	4b1a      	ldr	r3, [pc, #104]	@ (8001fc0 <HAL_ADC_Start+0x190>)
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	f003 0310 	and.w	r3, r3, #16
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d120      	bne.n	8001fa4 <HAL_ADC_Start+0x174>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	4a18      	ldr	r2, [pc, #96]	@ (8001fc8 <HAL_ADC_Start+0x198>)
 8001f68:	4293      	cmp	r3, r2
 8001f6a:	d11b      	bne.n	8001fa4 <HAL_ADC_Start+0x174>
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	689b      	ldr	r3, [r3, #8]
 8001f72:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d114      	bne.n	8001fa4 <HAL_ADC_Start+0x174>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	689a      	ldr	r2, [r3, #8]
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001f88:	609a      	str	r2, [r3, #8]
 8001f8a:	e00b      	b.n	8001fa4 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f90:	f043 0210 	orr.w	r2, r3, #16
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f9c:	f043 0201 	orr.w	r2, r3, #1
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001fa4:	2300      	movs	r3, #0
}
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	3714      	adds	r7, #20
 8001faa:	46bd      	mov	sp, r7
 8001fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb0:	4770      	bx	lr
 8001fb2:	bf00      	nop
 8001fb4:	20000008 	.word	0x20000008
 8001fb8:	431bde83 	.word	0x431bde83
 8001fbc:	fffff8fe 	.word	0xfffff8fe
 8001fc0:	40012300 	.word	0x40012300
 8001fc4:	40012000 	.word	0x40012000
 8001fc8:	40012200 	.word	0x40012200

08001fcc <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b084      	sub	sp, #16
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
 8001fd4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	689b      	ldr	r3, [r3, #8]
 8001fe0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001fe4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001fe8:	d113      	bne.n	8002012 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	689b      	ldr	r3, [r3, #8]
 8001ff0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001ff4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001ff8:	d10b      	bne.n	8002012 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ffe:	f043 0220 	orr.w	r2, r3, #32
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	2200      	movs	r2, #0
 800200a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    return HAL_ERROR;
 800200e:	2301      	movs	r3, #1
 8002010:	e063      	b.n	80020da <HAL_ADC_PollForConversion+0x10e>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 8002012:	f7ff fe99 	bl	8001d48 <HAL_GetTick>
 8002016:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002018:	e021      	b.n	800205e <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002020:	d01d      	beq.n	800205e <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	2b00      	cmp	r3, #0
 8002026:	d007      	beq.n	8002038 <HAL_ADC_PollForConversion+0x6c>
 8002028:	f7ff fe8e 	bl	8001d48 <HAL_GetTick>
 800202c:	4602      	mov	r2, r0
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	1ad3      	subs	r3, r2, r3
 8002032:	683a      	ldr	r2, [r7, #0]
 8002034:	429a      	cmp	r2, r3
 8002036:	d212      	bcs.n	800205e <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f003 0302 	and.w	r3, r3, #2
 8002042:	2b02      	cmp	r3, #2
 8002044:	d00b      	beq.n	800205e <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800204a:	f043 0204 	orr.w	r2, r3, #4
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	641a      	str	r2, [r3, #64]	@ 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	2200      	movs	r2, #0
 8002056:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
          
          return HAL_TIMEOUT;
 800205a:	2303      	movs	r3, #3
 800205c:	e03d      	b.n	80020da <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f003 0302 	and.w	r3, r3, #2
 8002068:	2b02      	cmp	r3, #2
 800206a:	d1d6      	bne.n	800201a <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f06f 0212 	mvn.w	r2, #18
 8002074:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800207a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	689b      	ldr	r3, [r3, #8]
 8002088:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800208c:	2b00      	cmp	r3, #0
 800208e:	d123      	bne.n	80020d8 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002094:	2b00      	cmp	r3, #0
 8002096:	d11f      	bne.n	80020d8 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800209e:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d006      	beq.n	80020b4 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	689b      	ldr	r3, [r3, #8]
 80020ac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d111      	bne.n	80020d8 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020b8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	641a      	str	r2, [r3, #64]	@ 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020c4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d105      	bne.n	80020d8 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020d0:	f043 0201 	orr.w	r2, r3, #1
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80020d8:	2300      	movs	r3, #0
}
 80020da:	4618      	mov	r0, r3
 80020dc:	3710      	adds	r7, #16
 80020de:	46bd      	mov	sp, r7
 80020e0:	bd80      	pop	{r7, pc}

080020e2 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80020e2:	b480      	push	{r7}
 80020e4:	b083      	sub	sp, #12
 80020e6:	af00      	add	r7, sp, #0
 80020e8:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 80020f0:	4618      	mov	r0, r3
 80020f2:	370c      	adds	r7, #12
 80020f4:	46bd      	mov	sp, r7
 80020f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fa:	4770      	bx	lr

080020fc <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80020fc:	b480      	push	{r7}
 80020fe:	b085      	sub	sp, #20
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
 8002104:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8002106:	2300      	movs	r3, #0
 8002108:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002110:	2b01      	cmp	r3, #1
 8002112:	d101      	bne.n	8002118 <HAL_ADC_ConfigChannel+0x1c>
 8002114:	2302      	movs	r3, #2
 8002116:	e136      	b.n	8002386 <HAL_ADC_ConfigChannel+0x28a>
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2201      	movs	r2, #1
 800211c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	2b09      	cmp	r3, #9
 8002126:	d93a      	bls.n	800219e <HAL_ADC_ConfigChannel+0xa2>
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002130:	d035      	beq.n	800219e <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	68d9      	ldr	r1, [r3, #12]
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	b29b      	uxth	r3, r3
 800213e:	461a      	mov	r2, r3
 8002140:	4613      	mov	r3, r2
 8002142:	005b      	lsls	r3, r3, #1
 8002144:	4413      	add	r3, r2
 8002146:	3b1e      	subs	r3, #30
 8002148:	2207      	movs	r2, #7
 800214a:	fa02 f303 	lsl.w	r3, r2, r3
 800214e:	43da      	mvns	r2, r3
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	400a      	ands	r2, r1
 8002156:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4a8d      	ldr	r2, [pc, #564]	@ (8002394 <HAL_ADC_ConfigChannel+0x298>)
 800215e:	4293      	cmp	r3, r2
 8002160:	d10a      	bne.n	8002178 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	68d9      	ldr	r1, [r3, #12]
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	689b      	ldr	r3, [r3, #8]
 800216c:	061a      	lsls	r2, r3, #24
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	430a      	orrs	r2, r1
 8002174:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002176:	e035      	b.n	80021e4 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	68d9      	ldr	r1, [r3, #12]
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	689a      	ldr	r2, [r3, #8]
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	b29b      	uxth	r3, r3
 8002188:	4618      	mov	r0, r3
 800218a:	4603      	mov	r3, r0
 800218c:	005b      	lsls	r3, r3, #1
 800218e:	4403      	add	r3, r0
 8002190:	3b1e      	subs	r3, #30
 8002192:	409a      	lsls	r2, r3
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	430a      	orrs	r2, r1
 800219a:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800219c:	e022      	b.n	80021e4 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	6919      	ldr	r1, [r3, #16]
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	b29b      	uxth	r3, r3
 80021aa:	461a      	mov	r2, r3
 80021ac:	4613      	mov	r3, r2
 80021ae:	005b      	lsls	r3, r3, #1
 80021b0:	4413      	add	r3, r2
 80021b2:	2207      	movs	r2, #7
 80021b4:	fa02 f303 	lsl.w	r3, r2, r3
 80021b8:	43da      	mvns	r2, r3
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	400a      	ands	r2, r1
 80021c0:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	6919      	ldr	r1, [r3, #16]
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	689a      	ldr	r2, [r3, #8]
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	b29b      	uxth	r3, r3
 80021d2:	4618      	mov	r0, r3
 80021d4:	4603      	mov	r3, r0
 80021d6:	005b      	lsls	r3, r3, #1
 80021d8:	4403      	add	r3, r0
 80021da:	409a      	lsls	r2, r3
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	430a      	orrs	r2, r1
 80021e2:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	685b      	ldr	r3, [r3, #4]
 80021e8:	2b06      	cmp	r3, #6
 80021ea:	d824      	bhi.n	8002236 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	685a      	ldr	r2, [r3, #4]
 80021f6:	4613      	mov	r3, r2
 80021f8:	009b      	lsls	r3, r3, #2
 80021fa:	4413      	add	r3, r2
 80021fc:	3b05      	subs	r3, #5
 80021fe:	221f      	movs	r2, #31
 8002200:	fa02 f303 	lsl.w	r3, r2, r3
 8002204:	43da      	mvns	r2, r3
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	400a      	ands	r2, r1
 800220c:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	b29b      	uxth	r3, r3
 800221a:	4618      	mov	r0, r3
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	685a      	ldr	r2, [r3, #4]
 8002220:	4613      	mov	r3, r2
 8002222:	009b      	lsls	r3, r3, #2
 8002224:	4413      	add	r3, r2
 8002226:	3b05      	subs	r3, #5
 8002228:	fa00 f203 	lsl.w	r2, r0, r3
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	430a      	orrs	r2, r1
 8002232:	635a      	str	r2, [r3, #52]	@ 0x34
 8002234:	e04c      	b.n	80022d0 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	685b      	ldr	r3, [r3, #4]
 800223a:	2b0c      	cmp	r3, #12
 800223c:	d824      	bhi.n	8002288 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	685a      	ldr	r2, [r3, #4]
 8002248:	4613      	mov	r3, r2
 800224a:	009b      	lsls	r3, r3, #2
 800224c:	4413      	add	r3, r2
 800224e:	3b23      	subs	r3, #35	@ 0x23
 8002250:	221f      	movs	r2, #31
 8002252:	fa02 f303 	lsl.w	r3, r2, r3
 8002256:	43da      	mvns	r2, r3
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	400a      	ands	r2, r1
 800225e:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	b29b      	uxth	r3, r3
 800226c:	4618      	mov	r0, r3
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	685a      	ldr	r2, [r3, #4]
 8002272:	4613      	mov	r3, r2
 8002274:	009b      	lsls	r3, r3, #2
 8002276:	4413      	add	r3, r2
 8002278:	3b23      	subs	r3, #35	@ 0x23
 800227a:	fa00 f203 	lsl.w	r2, r0, r3
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	430a      	orrs	r2, r1
 8002284:	631a      	str	r2, [r3, #48]	@ 0x30
 8002286:	e023      	b.n	80022d0 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	685a      	ldr	r2, [r3, #4]
 8002292:	4613      	mov	r3, r2
 8002294:	009b      	lsls	r3, r3, #2
 8002296:	4413      	add	r3, r2
 8002298:	3b41      	subs	r3, #65	@ 0x41
 800229a:	221f      	movs	r2, #31
 800229c:	fa02 f303 	lsl.w	r3, r2, r3
 80022a0:	43da      	mvns	r2, r3
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	400a      	ands	r2, r1
 80022a8:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	b29b      	uxth	r3, r3
 80022b6:	4618      	mov	r0, r3
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	685a      	ldr	r2, [r3, #4]
 80022bc:	4613      	mov	r3, r2
 80022be:	009b      	lsls	r3, r3, #2
 80022c0:	4413      	add	r3, r2
 80022c2:	3b41      	subs	r3, #65	@ 0x41
 80022c4:	fa00 f203 	lsl.w	r2, r0, r3
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	430a      	orrs	r2, r1
 80022ce:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	4a30      	ldr	r2, [pc, #192]	@ (8002398 <HAL_ADC_ConfigChannel+0x29c>)
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d10a      	bne.n	80022f0 <HAL_ADC_ConfigChannel+0x1f4>
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80022e2:	d105      	bne.n	80022f0 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 80022e4:	4b2d      	ldr	r3, [pc, #180]	@ (800239c <HAL_ADC_ConfigChannel+0x2a0>)
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	4a2c      	ldr	r2, [pc, #176]	@ (800239c <HAL_ADC_ConfigChannel+0x2a0>)
 80022ea:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 80022ee:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	4a28      	ldr	r2, [pc, #160]	@ (8002398 <HAL_ADC_ConfigChannel+0x29c>)
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d10f      	bne.n	800231a <HAL_ADC_ConfigChannel+0x21e>
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	2b12      	cmp	r3, #18
 8002300:	d10b      	bne.n	800231a <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8002302:	4b26      	ldr	r3, [pc, #152]	@ (800239c <HAL_ADC_ConfigChannel+0x2a0>)
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	4a25      	ldr	r2, [pc, #148]	@ (800239c <HAL_ADC_ConfigChannel+0x2a0>)
 8002308:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800230c:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 800230e:	4b23      	ldr	r3, [pc, #140]	@ (800239c <HAL_ADC_ConfigChannel+0x2a0>)
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	4a22      	ldr	r2, [pc, #136]	@ (800239c <HAL_ADC_ConfigChannel+0x2a0>)
 8002314:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002318:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	4a1e      	ldr	r2, [pc, #120]	@ (8002398 <HAL_ADC_ConfigChannel+0x29c>)
 8002320:	4293      	cmp	r3, r2
 8002322:	d12b      	bne.n	800237c <HAL_ADC_ConfigChannel+0x280>
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	4a1a      	ldr	r2, [pc, #104]	@ (8002394 <HAL_ADC_ConfigChannel+0x298>)
 800232a:	4293      	cmp	r3, r2
 800232c:	d003      	beq.n	8002336 <HAL_ADC_ConfigChannel+0x23a>
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	2b11      	cmp	r3, #17
 8002334:	d122      	bne.n	800237c <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8002336:	4b19      	ldr	r3, [pc, #100]	@ (800239c <HAL_ADC_ConfigChannel+0x2a0>)
 8002338:	685b      	ldr	r3, [r3, #4]
 800233a:	4a18      	ldr	r2, [pc, #96]	@ (800239c <HAL_ADC_ConfigChannel+0x2a0>)
 800233c:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8002340:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8002342:	4b16      	ldr	r3, [pc, #88]	@ (800239c <HAL_ADC_ConfigChannel+0x2a0>)
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	4a15      	ldr	r2, [pc, #84]	@ (800239c <HAL_ADC_ConfigChannel+0x2a0>)
 8002348:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800234c:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	4a10      	ldr	r2, [pc, #64]	@ (8002394 <HAL_ADC_ConfigChannel+0x298>)
 8002354:	4293      	cmp	r3, r2
 8002356:	d111      	bne.n	800237c <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8002358:	4b11      	ldr	r3, [pc, #68]	@ (80023a0 <HAL_ADC_ConfigChannel+0x2a4>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4a11      	ldr	r2, [pc, #68]	@ (80023a4 <HAL_ADC_ConfigChannel+0x2a8>)
 800235e:	fba2 2303 	umull	r2, r3, r2, r3
 8002362:	0c9a      	lsrs	r2, r3, #18
 8002364:	4613      	mov	r3, r2
 8002366:	009b      	lsls	r3, r3, #2
 8002368:	4413      	add	r3, r2
 800236a:	005b      	lsls	r3, r3, #1
 800236c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800236e:	e002      	b.n	8002376 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	3b01      	subs	r3, #1
 8002374:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	2b00      	cmp	r3, #0
 800237a:	d1f9      	bne.n	8002370 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2200      	movs	r2, #0
 8002380:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002384:	2300      	movs	r3, #0
}
 8002386:	4618      	mov	r0, r3
 8002388:	3714      	adds	r7, #20
 800238a:	46bd      	mov	sp, r7
 800238c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002390:	4770      	bx	lr
 8002392:	bf00      	nop
 8002394:	10000012 	.word	0x10000012
 8002398:	40012000 	.word	0x40012000
 800239c:	40012300 	.word	0x40012300
 80023a0:	20000008 	.word	0x20000008
 80023a4:	431bde83 	.word	0x431bde83

080023a8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80023a8:	b480      	push	{r7}
 80023aa:	b083      	sub	sp, #12
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80023b0:	4b78      	ldr	r3, [pc, #480]	@ (8002594 <ADC_Init+0x1ec>)
 80023b2:	685b      	ldr	r3, [r3, #4]
 80023b4:	4a77      	ldr	r2, [pc, #476]	@ (8002594 <ADC_Init+0x1ec>)
 80023b6:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 80023ba:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80023bc:	4b75      	ldr	r3, [pc, #468]	@ (8002594 <ADC_Init+0x1ec>)
 80023be:	685a      	ldr	r2, [r3, #4]
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	685b      	ldr	r3, [r3, #4]
 80023c4:	4973      	ldr	r1, [pc, #460]	@ (8002594 <ADC_Init+0x1ec>)
 80023c6:	4313      	orrs	r3, r2
 80023c8:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	685a      	ldr	r2, [r3, #4]
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80023d8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	6859      	ldr	r1, [r3, #4]
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	691b      	ldr	r3, [r3, #16]
 80023e4:	021a      	lsls	r2, r3, #8
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	430a      	orrs	r2, r1
 80023ec:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	685a      	ldr	r2, [r3, #4]
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80023fc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	6859      	ldr	r1, [r3, #4]
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	689a      	ldr	r2, [r3, #8]
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	430a      	orrs	r2, r1
 800240e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	689a      	ldr	r2, [r3, #8]
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800241e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	6899      	ldr	r1, [r3, #8]
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	68da      	ldr	r2, [r3, #12]
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	430a      	orrs	r2, r1
 8002430:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002436:	4a58      	ldr	r2, [pc, #352]	@ (8002598 <ADC_Init+0x1f0>)
 8002438:	4293      	cmp	r3, r2
 800243a:	d022      	beq.n	8002482 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	689a      	ldr	r2, [r3, #8]
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800244a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	6899      	ldr	r1, [r3, #8]
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	430a      	orrs	r2, r1
 800245c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	689a      	ldr	r2, [r3, #8]
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800246c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	6899      	ldr	r1, [r3, #8]
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	430a      	orrs	r2, r1
 800247e:	609a      	str	r2, [r3, #8]
 8002480:	e00f      	b.n	80024a2 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	689a      	ldr	r2, [r3, #8]
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002490:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	689a      	ldr	r2, [r3, #8]
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80024a0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	689a      	ldr	r2, [r3, #8]
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f022 0202 	bic.w	r2, r2, #2
 80024b0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	6899      	ldr	r1, [r3, #8]
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	699b      	ldr	r3, [r3, #24]
 80024bc:	005a      	lsls	r2, r3, #1
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	430a      	orrs	r2, r1
 80024c4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d01b      	beq.n	8002508 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	685a      	ldr	r2, [r3, #4]
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80024de:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	685a      	ldr	r2, [r3, #4]
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80024ee:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	6859      	ldr	r1, [r3, #4]
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024fa:	3b01      	subs	r3, #1
 80024fc:	035a      	lsls	r2, r3, #13
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	430a      	orrs	r2, r1
 8002504:	605a      	str	r2, [r3, #4]
 8002506:	e007      	b.n	8002518 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	685a      	ldr	r2, [r3, #4]
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002516:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8002526:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	69db      	ldr	r3, [r3, #28]
 8002532:	3b01      	subs	r3, #1
 8002534:	051a      	lsls	r2, r3, #20
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	430a      	orrs	r2, r1
 800253c:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	689a      	ldr	r2, [r3, #8]
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800254c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	6899      	ldr	r1, [r3, #8]
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800255a:	025a      	lsls	r2, r3, #9
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	430a      	orrs	r2, r1
 8002562:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	689a      	ldr	r2, [r3, #8]
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002572:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	6899      	ldr	r1, [r3, #8]
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	695b      	ldr	r3, [r3, #20]
 800257e:	029a      	lsls	r2, r3, #10
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	430a      	orrs	r2, r1
 8002586:	609a      	str	r2, [r3, #8]
}
 8002588:	bf00      	nop
 800258a:	370c      	adds	r7, #12
 800258c:	46bd      	mov	sp, r7
 800258e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002592:	4770      	bx	lr
 8002594:	40012300 	.word	0x40012300
 8002598:	0f000001 	.word	0x0f000001

0800259c <__NVIC_SetPriorityGrouping>:
{
 800259c:	b480      	push	{r7}
 800259e:	b085      	sub	sp, #20
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	f003 0307 	and.w	r3, r3, #7
 80025aa:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80025ac:	4b0b      	ldr	r3, [pc, #44]	@ (80025dc <__NVIC_SetPriorityGrouping+0x40>)
 80025ae:	68db      	ldr	r3, [r3, #12]
 80025b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80025b2:	68ba      	ldr	r2, [r7, #8]
 80025b4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80025b8:	4013      	ands	r3, r2
 80025ba:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80025c0:	68bb      	ldr	r3, [r7, #8]
 80025c2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80025c4:	4b06      	ldr	r3, [pc, #24]	@ (80025e0 <__NVIC_SetPriorityGrouping+0x44>)
 80025c6:	4313      	orrs	r3, r2
 80025c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80025ca:	4a04      	ldr	r2, [pc, #16]	@ (80025dc <__NVIC_SetPriorityGrouping+0x40>)
 80025cc:	68bb      	ldr	r3, [r7, #8]
 80025ce:	60d3      	str	r3, [r2, #12]
}
 80025d0:	bf00      	nop
 80025d2:	3714      	adds	r7, #20
 80025d4:	46bd      	mov	sp, r7
 80025d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025da:	4770      	bx	lr
 80025dc:	e000ed00 	.word	0xe000ed00
 80025e0:	05fa0000 	.word	0x05fa0000

080025e4 <__NVIC_GetPriorityGrouping>:
{
 80025e4:	b480      	push	{r7}
 80025e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80025e8:	4b04      	ldr	r3, [pc, #16]	@ (80025fc <__NVIC_GetPriorityGrouping+0x18>)
 80025ea:	68db      	ldr	r3, [r3, #12]
 80025ec:	0a1b      	lsrs	r3, r3, #8
 80025ee:	f003 0307 	and.w	r3, r3, #7
}
 80025f2:	4618      	mov	r0, r3
 80025f4:	46bd      	mov	sp, r7
 80025f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fa:	4770      	bx	lr
 80025fc:	e000ed00 	.word	0xe000ed00

08002600 <__NVIC_SetPriority>:
{
 8002600:	b480      	push	{r7}
 8002602:	b083      	sub	sp, #12
 8002604:	af00      	add	r7, sp, #0
 8002606:	4603      	mov	r3, r0
 8002608:	6039      	str	r1, [r7, #0]
 800260a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800260c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002610:	2b00      	cmp	r3, #0
 8002612:	db0a      	blt.n	800262a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	b2da      	uxtb	r2, r3
 8002618:	490c      	ldr	r1, [pc, #48]	@ (800264c <__NVIC_SetPriority+0x4c>)
 800261a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800261e:	0112      	lsls	r2, r2, #4
 8002620:	b2d2      	uxtb	r2, r2
 8002622:	440b      	add	r3, r1
 8002624:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8002628:	e00a      	b.n	8002640 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	b2da      	uxtb	r2, r3
 800262e:	4908      	ldr	r1, [pc, #32]	@ (8002650 <__NVIC_SetPriority+0x50>)
 8002630:	79fb      	ldrb	r3, [r7, #7]
 8002632:	f003 030f 	and.w	r3, r3, #15
 8002636:	3b04      	subs	r3, #4
 8002638:	0112      	lsls	r2, r2, #4
 800263a:	b2d2      	uxtb	r2, r2
 800263c:	440b      	add	r3, r1
 800263e:	761a      	strb	r2, [r3, #24]
}
 8002640:	bf00      	nop
 8002642:	370c      	adds	r7, #12
 8002644:	46bd      	mov	sp, r7
 8002646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264a:	4770      	bx	lr
 800264c:	e000e100 	.word	0xe000e100
 8002650:	e000ed00 	.word	0xe000ed00

08002654 <NVIC_EncodePriority>:
{
 8002654:	b480      	push	{r7}
 8002656:	b089      	sub	sp, #36	@ 0x24
 8002658:	af00      	add	r7, sp, #0
 800265a:	60f8      	str	r0, [r7, #12]
 800265c:	60b9      	str	r1, [r7, #8]
 800265e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	f003 0307 	and.w	r3, r3, #7
 8002666:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002668:	69fb      	ldr	r3, [r7, #28]
 800266a:	f1c3 0307 	rsb	r3, r3, #7
 800266e:	2b04      	cmp	r3, #4
 8002670:	bf28      	it	cs
 8002672:	2304      	movcs	r3, #4
 8002674:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002676:	69fb      	ldr	r3, [r7, #28]
 8002678:	3304      	adds	r3, #4
 800267a:	2b06      	cmp	r3, #6
 800267c:	d902      	bls.n	8002684 <NVIC_EncodePriority+0x30>
 800267e:	69fb      	ldr	r3, [r7, #28]
 8002680:	3b03      	subs	r3, #3
 8002682:	e000      	b.n	8002686 <NVIC_EncodePriority+0x32>
 8002684:	2300      	movs	r3, #0
 8002686:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002688:	f04f 32ff 	mov.w	r2, #4294967295
 800268c:	69bb      	ldr	r3, [r7, #24]
 800268e:	fa02 f303 	lsl.w	r3, r2, r3
 8002692:	43da      	mvns	r2, r3
 8002694:	68bb      	ldr	r3, [r7, #8]
 8002696:	401a      	ands	r2, r3
 8002698:	697b      	ldr	r3, [r7, #20]
 800269a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800269c:	f04f 31ff 	mov.w	r1, #4294967295
 80026a0:	697b      	ldr	r3, [r7, #20]
 80026a2:	fa01 f303 	lsl.w	r3, r1, r3
 80026a6:	43d9      	mvns	r1, r3
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026ac:	4313      	orrs	r3, r2
}
 80026ae:	4618      	mov	r0, r3
 80026b0:	3724      	adds	r7, #36	@ 0x24
 80026b2:	46bd      	mov	sp, r7
 80026b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b8:	4770      	bx	lr
	...

080026bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b082      	sub	sp, #8
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	3b01      	subs	r3, #1
 80026c8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80026cc:	d301      	bcc.n	80026d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80026ce:	2301      	movs	r3, #1
 80026d0:	e00f      	b.n	80026f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80026d2:	4a0a      	ldr	r2, [pc, #40]	@ (80026fc <SysTick_Config+0x40>)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	3b01      	subs	r3, #1
 80026d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80026da:	210f      	movs	r1, #15
 80026dc:	f04f 30ff 	mov.w	r0, #4294967295
 80026e0:	f7ff ff8e 	bl	8002600 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80026e4:	4b05      	ldr	r3, [pc, #20]	@ (80026fc <SysTick_Config+0x40>)
 80026e6:	2200      	movs	r2, #0
 80026e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80026ea:	4b04      	ldr	r3, [pc, #16]	@ (80026fc <SysTick_Config+0x40>)
 80026ec:	2207      	movs	r2, #7
 80026ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80026f0:	2300      	movs	r3, #0
}
 80026f2:	4618      	mov	r0, r3
 80026f4:	3708      	adds	r7, #8
 80026f6:	46bd      	mov	sp, r7
 80026f8:	bd80      	pop	{r7, pc}
 80026fa:	bf00      	nop
 80026fc:	e000e010 	.word	0xe000e010

08002700 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b082      	sub	sp, #8
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002708:	6878      	ldr	r0, [r7, #4]
 800270a:	f7ff ff47 	bl	800259c <__NVIC_SetPriorityGrouping>
}
 800270e:	bf00      	nop
 8002710:	3708      	adds	r7, #8
 8002712:	46bd      	mov	sp, r7
 8002714:	bd80      	pop	{r7, pc}

08002716 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002716:	b580      	push	{r7, lr}
 8002718:	b086      	sub	sp, #24
 800271a:	af00      	add	r7, sp, #0
 800271c:	4603      	mov	r3, r0
 800271e:	60b9      	str	r1, [r7, #8]
 8002720:	607a      	str	r2, [r7, #4]
 8002722:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002724:	2300      	movs	r3, #0
 8002726:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002728:	f7ff ff5c 	bl	80025e4 <__NVIC_GetPriorityGrouping>
 800272c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800272e:	687a      	ldr	r2, [r7, #4]
 8002730:	68b9      	ldr	r1, [r7, #8]
 8002732:	6978      	ldr	r0, [r7, #20]
 8002734:	f7ff ff8e 	bl	8002654 <NVIC_EncodePriority>
 8002738:	4602      	mov	r2, r0
 800273a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800273e:	4611      	mov	r1, r2
 8002740:	4618      	mov	r0, r3
 8002742:	f7ff ff5d 	bl	8002600 <__NVIC_SetPriority>
}
 8002746:	bf00      	nop
 8002748:	3718      	adds	r7, #24
 800274a:	46bd      	mov	sp, r7
 800274c:	bd80      	pop	{r7, pc}

0800274e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800274e:	b580      	push	{r7, lr}
 8002750:	b082      	sub	sp, #8
 8002752:	af00      	add	r7, sp, #0
 8002754:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002756:	6878      	ldr	r0, [r7, #4]
 8002758:	f7ff ffb0 	bl	80026bc <SysTick_Config>
 800275c:	4603      	mov	r3, r0
}
 800275e:	4618      	mov	r0, r3
 8002760:	3708      	adds	r7, #8
 8002762:	46bd      	mov	sp, r7
 8002764:	bd80      	pop	{r7, pc}
	...

08002768 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002768:	b480      	push	{r7}
 800276a:	b089      	sub	sp, #36	@ 0x24
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
 8002770:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002772:	2300      	movs	r3, #0
 8002774:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002776:	2300      	movs	r3, #0
 8002778:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800277a:	2300      	movs	r3, #0
 800277c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800277e:	2300      	movs	r3, #0
 8002780:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8002782:	2300      	movs	r3, #0
 8002784:	61fb      	str	r3, [r7, #28]
 8002786:	e175      	b.n	8002a74 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002788:	2201      	movs	r2, #1
 800278a:	69fb      	ldr	r3, [r7, #28]
 800278c:	fa02 f303 	lsl.w	r3, r2, r3
 8002790:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	697a      	ldr	r2, [r7, #20]
 8002798:	4013      	ands	r3, r2
 800279a:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 800279c:	693a      	ldr	r2, [r7, #16]
 800279e:	697b      	ldr	r3, [r7, #20]
 80027a0:	429a      	cmp	r2, r3
 80027a2:	f040 8164 	bne.w	8002a6e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	f003 0303 	and.w	r3, r3, #3
 80027ae:	2b01      	cmp	r3, #1
 80027b0:	d005      	beq.n	80027be <HAL_GPIO_Init+0x56>
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	685b      	ldr	r3, [r3, #4]
 80027b6:	f003 0303 	and.w	r3, r3, #3
 80027ba:	2b02      	cmp	r3, #2
 80027bc:	d130      	bne.n	8002820 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	689b      	ldr	r3, [r3, #8]
 80027c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80027c4:	69fb      	ldr	r3, [r7, #28]
 80027c6:	005b      	lsls	r3, r3, #1
 80027c8:	2203      	movs	r2, #3
 80027ca:	fa02 f303 	lsl.w	r3, r2, r3
 80027ce:	43db      	mvns	r3, r3
 80027d0:	69ba      	ldr	r2, [r7, #24]
 80027d2:	4013      	ands	r3, r2
 80027d4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	68da      	ldr	r2, [r3, #12]
 80027da:	69fb      	ldr	r3, [r7, #28]
 80027dc:	005b      	lsls	r3, r3, #1
 80027de:	fa02 f303 	lsl.w	r3, r2, r3
 80027e2:	69ba      	ldr	r2, [r7, #24]
 80027e4:	4313      	orrs	r3, r2
 80027e6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	69ba      	ldr	r2, [r7, #24]
 80027ec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	685b      	ldr	r3, [r3, #4]
 80027f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80027f4:	2201      	movs	r2, #1
 80027f6:	69fb      	ldr	r3, [r7, #28]
 80027f8:	fa02 f303 	lsl.w	r3, r2, r3
 80027fc:	43db      	mvns	r3, r3
 80027fe:	69ba      	ldr	r2, [r7, #24]
 8002800:	4013      	ands	r3, r2
 8002802:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	685b      	ldr	r3, [r3, #4]
 8002808:	091b      	lsrs	r3, r3, #4
 800280a:	f003 0201 	and.w	r2, r3, #1
 800280e:	69fb      	ldr	r3, [r7, #28]
 8002810:	fa02 f303 	lsl.w	r3, r2, r3
 8002814:	69ba      	ldr	r2, [r7, #24]
 8002816:	4313      	orrs	r3, r2
 8002818:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	69ba      	ldr	r2, [r7, #24]
 800281e:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	685b      	ldr	r3, [r3, #4]
 8002824:	f003 0303 	and.w	r3, r3, #3
 8002828:	2b03      	cmp	r3, #3
 800282a:	d017      	beq.n	800285c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	68db      	ldr	r3, [r3, #12]
 8002830:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002832:	69fb      	ldr	r3, [r7, #28]
 8002834:	005b      	lsls	r3, r3, #1
 8002836:	2203      	movs	r2, #3
 8002838:	fa02 f303 	lsl.w	r3, r2, r3
 800283c:	43db      	mvns	r3, r3
 800283e:	69ba      	ldr	r2, [r7, #24]
 8002840:	4013      	ands	r3, r2
 8002842:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	689a      	ldr	r2, [r3, #8]
 8002848:	69fb      	ldr	r3, [r7, #28]
 800284a:	005b      	lsls	r3, r3, #1
 800284c:	fa02 f303 	lsl.w	r3, r2, r3
 8002850:	69ba      	ldr	r2, [r7, #24]
 8002852:	4313      	orrs	r3, r2
 8002854:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	69ba      	ldr	r2, [r7, #24]
 800285a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	f003 0303 	and.w	r3, r3, #3
 8002864:	2b02      	cmp	r3, #2
 8002866:	d123      	bne.n	80028b0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002868:	69fb      	ldr	r3, [r7, #28]
 800286a:	08da      	lsrs	r2, r3, #3
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	3208      	adds	r2, #8
 8002870:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002874:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002876:	69fb      	ldr	r3, [r7, #28]
 8002878:	f003 0307 	and.w	r3, r3, #7
 800287c:	009b      	lsls	r3, r3, #2
 800287e:	220f      	movs	r2, #15
 8002880:	fa02 f303 	lsl.w	r3, r2, r3
 8002884:	43db      	mvns	r3, r3
 8002886:	69ba      	ldr	r2, [r7, #24]
 8002888:	4013      	ands	r3, r2
 800288a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	691a      	ldr	r2, [r3, #16]
 8002890:	69fb      	ldr	r3, [r7, #28]
 8002892:	f003 0307 	and.w	r3, r3, #7
 8002896:	009b      	lsls	r3, r3, #2
 8002898:	fa02 f303 	lsl.w	r3, r2, r3
 800289c:	69ba      	ldr	r2, [r7, #24]
 800289e:	4313      	orrs	r3, r2
 80028a0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80028a2:	69fb      	ldr	r3, [r7, #28]
 80028a4:	08da      	lsrs	r2, r3, #3
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	3208      	adds	r2, #8
 80028aa:	69b9      	ldr	r1, [r7, #24]
 80028ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80028b6:	69fb      	ldr	r3, [r7, #28]
 80028b8:	005b      	lsls	r3, r3, #1
 80028ba:	2203      	movs	r2, #3
 80028bc:	fa02 f303 	lsl.w	r3, r2, r3
 80028c0:	43db      	mvns	r3, r3
 80028c2:	69ba      	ldr	r2, [r7, #24]
 80028c4:	4013      	ands	r3, r2
 80028c6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	685b      	ldr	r3, [r3, #4]
 80028cc:	f003 0203 	and.w	r2, r3, #3
 80028d0:	69fb      	ldr	r3, [r7, #28]
 80028d2:	005b      	lsls	r3, r3, #1
 80028d4:	fa02 f303 	lsl.w	r3, r2, r3
 80028d8:	69ba      	ldr	r2, [r7, #24]
 80028da:	4313      	orrs	r3, r2
 80028dc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	69ba      	ldr	r2, [r7, #24]
 80028e2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	685b      	ldr	r3, [r3, #4]
 80028e8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	f000 80be 	beq.w	8002a6e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028f2:	4b66      	ldr	r3, [pc, #408]	@ (8002a8c <HAL_GPIO_Init+0x324>)
 80028f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028f6:	4a65      	ldr	r2, [pc, #404]	@ (8002a8c <HAL_GPIO_Init+0x324>)
 80028f8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80028fc:	6453      	str	r3, [r2, #68]	@ 0x44
 80028fe:	4b63      	ldr	r3, [pc, #396]	@ (8002a8c <HAL_GPIO_Init+0x324>)
 8002900:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002902:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002906:	60fb      	str	r3, [r7, #12]
 8002908:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800290a:	4a61      	ldr	r2, [pc, #388]	@ (8002a90 <HAL_GPIO_Init+0x328>)
 800290c:	69fb      	ldr	r3, [r7, #28]
 800290e:	089b      	lsrs	r3, r3, #2
 8002910:	3302      	adds	r3, #2
 8002912:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002916:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002918:	69fb      	ldr	r3, [r7, #28]
 800291a:	f003 0303 	and.w	r3, r3, #3
 800291e:	009b      	lsls	r3, r3, #2
 8002920:	220f      	movs	r2, #15
 8002922:	fa02 f303 	lsl.w	r3, r2, r3
 8002926:	43db      	mvns	r3, r3
 8002928:	69ba      	ldr	r2, [r7, #24]
 800292a:	4013      	ands	r3, r2
 800292c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	4a58      	ldr	r2, [pc, #352]	@ (8002a94 <HAL_GPIO_Init+0x32c>)
 8002932:	4293      	cmp	r3, r2
 8002934:	d037      	beq.n	80029a6 <HAL_GPIO_Init+0x23e>
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	4a57      	ldr	r2, [pc, #348]	@ (8002a98 <HAL_GPIO_Init+0x330>)
 800293a:	4293      	cmp	r3, r2
 800293c:	d031      	beq.n	80029a2 <HAL_GPIO_Init+0x23a>
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	4a56      	ldr	r2, [pc, #344]	@ (8002a9c <HAL_GPIO_Init+0x334>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d02b      	beq.n	800299e <HAL_GPIO_Init+0x236>
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	4a55      	ldr	r2, [pc, #340]	@ (8002aa0 <HAL_GPIO_Init+0x338>)
 800294a:	4293      	cmp	r3, r2
 800294c:	d025      	beq.n	800299a <HAL_GPIO_Init+0x232>
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	4a54      	ldr	r2, [pc, #336]	@ (8002aa4 <HAL_GPIO_Init+0x33c>)
 8002952:	4293      	cmp	r3, r2
 8002954:	d01f      	beq.n	8002996 <HAL_GPIO_Init+0x22e>
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	4a53      	ldr	r2, [pc, #332]	@ (8002aa8 <HAL_GPIO_Init+0x340>)
 800295a:	4293      	cmp	r3, r2
 800295c:	d019      	beq.n	8002992 <HAL_GPIO_Init+0x22a>
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	4a52      	ldr	r2, [pc, #328]	@ (8002aac <HAL_GPIO_Init+0x344>)
 8002962:	4293      	cmp	r3, r2
 8002964:	d013      	beq.n	800298e <HAL_GPIO_Init+0x226>
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	4a51      	ldr	r2, [pc, #324]	@ (8002ab0 <HAL_GPIO_Init+0x348>)
 800296a:	4293      	cmp	r3, r2
 800296c:	d00d      	beq.n	800298a <HAL_GPIO_Init+0x222>
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	4a50      	ldr	r2, [pc, #320]	@ (8002ab4 <HAL_GPIO_Init+0x34c>)
 8002972:	4293      	cmp	r3, r2
 8002974:	d007      	beq.n	8002986 <HAL_GPIO_Init+0x21e>
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	4a4f      	ldr	r2, [pc, #316]	@ (8002ab8 <HAL_GPIO_Init+0x350>)
 800297a:	4293      	cmp	r3, r2
 800297c:	d101      	bne.n	8002982 <HAL_GPIO_Init+0x21a>
 800297e:	2309      	movs	r3, #9
 8002980:	e012      	b.n	80029a8 <HAL_GPIO_Init+0x240>
 8002982:	230a      	movs	r3, #10
 8002984:	e010      	b.n	80029a8 <HAL_GPIO_Init+0x240>
 8002986:	2308      	movs	r3, #8
 8002988:	e00e      	b.n	80029a8 <HAL_GPIO_Init+0x240>
 800298a:	2307      	movs	r3, #7
 800298c:	e00c      	b.n	80029a8 <HAL_GPIO_Init+0x240>
 800298e:	2306      	movs	r3, #6
 8002990:	e00a      	b.n	80029a8 <HAL_GPIO_Init+0x240>
 8002992:	2305      	movs	r3, #5
 8002994:	e008      	b.n	80029a8 <HAL_GPIO_Init+0x240>
 8002996:	2304      	movs	r3, #4
 8002998:	e006      	b.n	80029a8 <HAL_GPIO_Init+0x240>
 800299a:	2303      	movs	r3, #3
 800299c:	e004      	b.n	80029a8 <HAL_GPIO_Init+0x240>
 800299e:	2302      	movs	r3, #2
 80029a0:	e002      	b.n	80029a8 <HAL_GPIO_Init+0x240>
 80029a2:	2301      	movs	r3, #1
 80029a4:	e000      	b.n	80029a8 <HAL_GPIO_Init+0x240>
 80029a6:	2300      	movs	r3, #0
 80029a8:	69fa      	ldr	r2, [r7, #28]
 80029aa:	f002 0203 	and.w	r2, r2, #3
 80029ae:	0092      	lsls	r2, r2, #2
 80029b0:	4093      	lsls	r3, r2
 80029b2:	69ba      	ldr	r2, [r7, #24]
 80029b4:	4313      	orrs	r3, r2
 80029b6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80029b8:	4935      	ldr	r1, [pc, #212]	@ (8002a90 <HAL_GPIO_Init+0x328>)
 80029ba:	69fb      	ldr	r3, [r7, #28]
 80029bc:	089b      	lsrs	r3, r3, #2
 80029be:	3302      	adds	r3, #2
 80029c0:	69ba      	ldr	r2, [r7, #24]
 80029c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80029c6:	4b3d      	ldr	r3, [pc, #244]	@ (8002abc <HAL_GPIO_Init+0x354>)
 80029c8:	689b      	ldr	r3, [r3, #8]
 80029ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029cc:	693b      	ldr	r3, [r7, #16]
 80029ce:	43db      	mvns	r3, r3
 80029d0:	69ba      	ldr	r2, [r7, #24]
 80029d2:	4013      	ands	r3, r2
 80029d4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	685b      	ldr	r3, [r3, #4]
 80029da:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d003      	beq.n	80029ea <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80029e2:	69ba      	ldr	r2, [r7, #24]
 80029e4:	693b      	ldr	r3, [r7, #16]
 80029e6:	4313      	orrs	r3, r2
 80029e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80029ea:	4a34      	ldr	r2, [pc, #208]	@ (8002abc <HAL_GPIO_Init+0x354>)
 80029ec:	69bb      	ldr	r3, [r7, #24]
 80029ee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80029f0:	4b32      	ldr	r3, [pc, #200]	@ (8002abc <HAL_GPIO_Init+0x354>)
 80029f2:	68db      	ldr	r3, [r3, #12]
 80029f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029f6:	693b      	ldr	r3, [r7, #16]
 80029f8:	43db      	mvns	r3, r3
 80029fa:	69ba      	ldr	r2, [r7, #24]
 80029fc:	4013      	ands	r3, r2
 80029fe:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	685b      	ldr	r3, [r3, #4]
 8002a04:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d003      	beq.n	8002a14 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002a0c:	69ba      	ldr	r2, [r7, #24]
 8002a0e:	693b      	ldr	r3, [r7, #16]
 8002a10:	4313      	orrs	r3, r2
 8002a12:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002a14:	4a29      	ldr	r2, [pc, #164]	@ (8002abc <HAL_GPIO_Init+0x354>)
 8002a16:	69bb      	ldr	r3, [r7, #24]
 8002a18:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002a1a:	4b28      	ldr	r3, [pc, #160]	@ (8002abc <HAL_GPIO_Init+0x354>)
 8002a1c:	685b      	ldr	r3, [r3, #4]
 8002a1e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a20:	693b      	ldr	r3, [r7, #16]
 8002a22:	43db      	mvns	r3, r3
 8002a24:	69ba      	ldr	r2, [r7, #24]
 8002a26:	4013      	ands	r3, r2
 8002a28:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	685b      	ldr	r3, [r3, #4]
 8002a2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d003      	beq.n	8002a3e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002a36:	69ba      	ldr	r2, [r7, #24]
 8002a38:	693b      	ldr	r3, [r7, #16]
 8002a3a:	4313      	orrs	r3, r2
 8002a3c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002a3e:	4a1f      	ldr	r2, [pc, #124]	@ (8002abc <HAL_GPIO_Init+0x354>)
 8002a40:	69bb      	ldr	r3, [r7, #24]
 8002a42:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002a44:	4b1d      	ldr	r3, [pc, #116]	@ (8002abc <HAL_GPIO_Init+0x354>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a4a:	693b      	ldr	r3, [r7, #16]
 8002a4c:	43db      	mvns	r3, r3
 8002a4e:	69ba      	ldr	r2, [r7, #24]
 8002a50:	4013      	ands	r3, r2
 8002a52:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	685b      	ldr	r3, [r3, #4]
 8002a58:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d003      	beq.n	8002a68 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002a60:	69ba      	ldr	r2, [r7, #24]
 8002a62:	693b      	ldr	r3, [r7, #16]
 8002a64:	4313      	orrs	r3, r2
 8002a66:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002a68:	4a14      	ldr	r2, [pc, #80]	@ (8002abc <HAL_GPIO_Init+0x354>)
 8002a6a:	69bb      	ldr	r3, [r7, #24]
 8002a6c:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8002a6e:	69fb      	ldr	r3, [r7, #28]
 8002a70:	3301      	adds	r3, #1
 8002a72:	61fb      	str	r3, [r7, #28]
 8002a74:	69fb      	ldr	r3, [r7, #28]
 8002a76:	2b0f      	cmp	r3, #15
 8002a78:	f67f ae86 	bls.w	8002788 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002a7c:	bf00      	nop
 8002a7e:	bf00      	nop
 8002a80:	3724      	adds	r7, #36	@ 0x24
 8002a82:	46bd      	mov	sp, r7
 8002a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a88:	4770      	bx	lr
 8002a8a:	bf00      	nop
 8002a8c:	40023800 	.word	0x40023800
 8002a90:	40013800 	.word	0x40013800
 8002a94:	40020000 	.word	0x40020000
 8002a98:	40020400 	.word	0x40020400
 8002a9c:	40020800 	.word	0x40020800
 8002aa0:	40020c00 	.word	0x40020c00
 8002aa4:	40021000 	.word	0x40021000
 8002aa8:	40021400 	.word	0x40021400
 8002aac:	40021800 	.word	0x40021800
 8002ab0:	40021c00 	.word	0x40021c00
 8002ab4:	40022000 	.word	0x40022000
 8002ab8:	40022400 	.word	0x40022400
 8002abc:	40013c00 	.word	0x40013c00

08002ac0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ac0:	b480      	push	{r7}
 8002ac2:	b083      	sub	sp, #12
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
 8002ac8:	460b      	mov	r3, r1
 8002aca:	807b      	strh	r3, [r7, #2]
 8002acc:	4613      	mov	r3, r2
 8002ace:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002ad0:	787b      	ldrb	r3, [r7, #1]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d003      	beq.n	8002ade <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002ad6:	887a      	ldrh	r2, [r7, #2]
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002adc:	e003      	b.n	8002ae6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002ade:	887b      	ldrh	r3, [r7, #2]
 8002ae0:	041a      	lsls	r2, r3, #16
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	619a      	str	r2, [r3, #24]
}
 8002ae6:	bf00      	nop
 8002ae8:	370c      	adds	r7, #12
 8002aea:	46bd      	mov	sp, r7
 8002aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af0:	4770      	bx	lr
	...

08002af4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b082      	sub	sp, #8
 8002af8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8002afa:	2300      	movs	r3, #0
 8002afc:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002afe:	4b23      	ldr	r3, [pc, #140]	@ (8002b8c <HAL_PWREx_EnableOverDrive+0x98>)
 8002b00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b02:	4a22      	ldr	r2, [pc, #136]	@ (8002b8c <HAL_PWREx_EnableOverDrive+0x98>)
 8002b04:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002b08:	6413      	str	r3, [r2, #64]	@ 0x40
 8002b0a:	4b20      	ldr	r3, [pc, #128]	@ (8002b8c <HAL_PWREx_EnableOverDrive+0x98>)
 8002b0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b0e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b12:	603b      	str	r3, [r7, #0]
 8002b14:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002b16:	4b1e      	ldr	r3, [pc, #120]	@ (8002b90 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	4a1d      	ldr	r2, [pc, #116]	@ (8002b90 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002b1c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b20:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002b22:	f7ff f911 	bl	8001d48 <HAL_GetTick>
 8002b26:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002b28:	e009      	b.n	8002b3e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002b2a:	f7ff f90d 	bl	8001d48 <HAL_GetTick>
 8002b2e:	4602      	mov	r2, r0
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	1ad3      	subs	r3, r2, r3
 8002b34:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002b38:	d901      	bls.n	8002b3e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8002b3a:	2303      	movs	r3, #3
 8002b3c:	e022      	b.n	8002b84 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002b3e:	4b14      	ldr	r3, [pc, #80]	@ (8002b90 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002b46:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002b4a:	d1ee      	bne.n	8002b2a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002b4c:	4b10      	ldr	r3, [pc, #64]	@ (8002b90 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4a0f      	ldr	r2, [pc, #60]	@ (8002b90 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002b52:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002b56:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002b58:	f7ff f8f6 	bl	8001d48 <HAL_GetTick>
 8002b5c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002b5e:	e009      	b.n	8002b74 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002b60:	f7ff f8f2 	bl	8001d48 <HAL_GetTick>
 8002b64:	4602      	mov	r2, r0
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	1ad3      	subs	r3, r2, r3
 8002b6a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002b6e:	d901      	bls.n	8002b74 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002b70:	2303      	movs	r3, #3
 8002b72:	e007      	b.n	8002b84 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002b74:	4b06      	ldr	r3, [pc, #24]	@ (8002b90 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002b76:	685b      	ldr	r3, [r3, #4]
 8002b78:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b7c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002b80:	d1ee      	bne.n	8002b60 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8002b82:	2300      	movs	r3, #0
}
 8002b84:	4618      	mov	r0, r3
 8002b86:	3708      	adds	r7, #8
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	bd80      	pop	{r7, pc}
 8002b8c:	40023800 	.word	0x40023800
 8002b90:	40007000 	.word	0x40007000

08002b94 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b086      	sub	sp, #24
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d101      	bne.n	8002baa <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	e29b      	b.n	80030e2 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f003 0301 	and.w	r3, r3, #1
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	f000 8087 	beq.w	8002cc6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002bb8:	4b96      	ldr	r3, [pc, #600]	@ (8002e14 <HAL_RCC_OscConfig+0x280>)
 8002bba:	689b      	ldr	r3, [r3, #8]
 8002bbc:	f003 030c 	and.w	r3, r3, #12
 8002bc0:	2b04      	cmp	r3, #4
 8002bc2:	d00c      	beq.n	8002bde <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002bc4:	4b93      	ldr	r3, [pc, #588]	@ (8002e14 <HAL_RCC_OscConfig+0x280>)
 8002bc6:	689b      	ldr	r3, [r3, #8]
 8002bc8:	f003 030c 	and.w	r3, r3, #12
 8002bcc:	2b08      	cmp	r3, #8
 8002bce:	d112      	bne.n	8002bf6 <HAL_RCC_OscConfig+0x62>
 8002bd0:	4b90      	ldr	r3, [pc, #576]	@ (8002e14 <HAL_RCC_OscConfig+0x280>)
 8002bd2:	685b      	ldr	r3, [r3, #4]
 8002bd4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002bd8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002bdc:	d10b      	bne.n	8002bf6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bde:	4b8d      	ldr	r3, [pc, #564]	@ (8002e14 <HAL_RCC_OscConfig+0x280>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d06c      	beq.n	8002cc4 <HAL_RCC_OscConfig+0x130>
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	685b      	ldr	r3, [r3, #4]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d168      	bne.n	8002cc4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	e275      	b.n	80030e2 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	685b      	ldr	r3, [r3, #4]
 8002bfa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002bfe:	d106      	bne.n	8002c0e <HAL_RCC_OscConfig+0x7a>
 8002c00:	4b84      	ldr	r3, [pc, #528]	@ (8002e14 <HAL_RCC_OscConfig+0x280>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4a83      	ldr	r2, [pc, #524]	@ (8002e14 <HAL_RCC_OscConfig+0x280>)
 8002c06:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c0a:	6013      	str	r3, [r2, #0]
 8002c0c:	e02e      	b.n	8002c6c <HAL_RCC_OscConfig+0xd8>
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	685b      	ldr	r3, [r3, #4]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d10c      	bne.n	8002c30 <HAL_RCC_OscConfig+0x9c>
 8002c16:	4b7f      	ldr	r3, [pc, #508]	@ (8002e14 <HAL_RCC_OscConfig+0x280>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	4a7e      	ldr	r2, [pc, #504]	@ (8002e14 <HAL_RCC_OscConfig+0x280>)
 8002c1c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002c20:	6013      	str	r3, [r2, #0]
 8002c22:	4b7c      	ldr	r3, [pc, #496]	@ (8002e14 <HAL_RCC_OscConfig+0x280>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	4a7b      	ldr	r2, [pc, #492]	@ (8002e14 <HAL_RCC_OscConfig+0x280>)
 8002c28:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002c2c:	6013      	str	r3, [r2, #0]
 8002c2e:	e01d      	b.n	8002c6c <HAL_RCC_OscConfig+0xd8>
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002c38:	d10c      	bne.n	8002c54 <HAL_RCC_OscConfig+0xc0>
 8002c3a:	4b76      	ldr	r3, [pc, #472]	@ (8002e14 <HAL_RCC_OscConfig+0x280>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	4a75      	ldr	r2, [pc, #468]	@ (8002e14 <HAL_RCC_OscConfig+0x280>)
 8002c40:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002c44:	6013      	str	r3, [r2, #0]
 8002c46:	4b73      	ldr	r3, [pc, #460]	@ (8002e14 <HAL_RCC_OscConfig+0x280>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	4a72      	ldr	r2, [pc, #456]	@ (8002e14 <HAL_RCC_OscConfig+0x280>)
 8002c4c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c50:	6013      	str	r3, [r2, #0]
 8002c52:	e00b      	b.n	8002c6c <HAL_RCC_OscConfig+0xd8>
 8002c54:	4b6f      	ldr	r3, [pc, #444]	@ (8002e14 <HAL_RCC_OscConfig+0x280>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4a6e      	ldr	r2, [pc, #440]	@ (8002e14 <HAL_RCC_OscConfig+0x280>)
 8002c5a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002c5e:	6013      	str	r3, [r2, #0]
 8002c60:	4b6c      	ldr	r3, [pc, #432]	@ (8002e14 <HAL_RCC_OscConfig+0x280>)
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4a6b      	ldr	r2, [pc, #428]	@ (8002e14 <HAL_RCC_OscConfig+0x280>)
 8002c66:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002c6a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	685b      	ldr	r3, [r3, #4]
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d013      	beq.n	8002c9c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c74:	f7ff f868 	bl	8001d48 <HAL_GetTick>
 8002c78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c7a:	e008      	b.n	8002c8e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c7c:	f7ff f864 	bl	8001d48 <HAL_GetTick>
 8002c80:	4602      	mov	r2, r0
 8002c82:	693b      	ldr	r3, [r7, #16]
 8002c84:	1ad3      	subs	r3, r2, r3
 8002c86:	2b64      	cmp	r3, #100	@ 0x64
 8002c88:	d901      	bls.n	8002c8e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002c8a:	2303      	movs	r3, #3
 8002c8c:	e229      	b.n	80030e2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c8e:	4b61      	ldr	r3, [pc, #388]	@ (8002e14 <HAL_RCC_OscConfig+0x280>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d0f0      	beq.n	8002c7c <HAL_RCC_OscConfig+0xe8>
 8002c9a:	e014      	b.n	8002cc6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c9c:	f7ff f854 	bl	8001d48 <HAL_GetTick>
 8002ca0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ca2:	e008      	b.n	8002cb6 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ca4:	f7ff f850 	bl	8001d48 <HAL_GetTick>
 8002ca8:	4602      	mov	r2, r0
 8002caa:	693b      	ldr	r3, [r7, #16]
 8002cac:	1ad3      	subs	r3, r2, r3
 8002cae:	2b64      	cmp	r3, #100	@ 0x64
 8002cb0:	d901      	bls.n	8002cb6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002cb2:	2303      	movs	r3, #3
 8002cb4:	e215      	b.n	80030e2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cb6:	4b57      	ldr	r3, [pc, #348]	@ (8002e14 <HAL_RCC_OscConfig+0x280>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d1f0      	bne.n	8002ca4 <HAL_RCC_OscConfig+0x110>
 8002cc2:	e000      	b.n	8002cc6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cc4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f003 0302 	and.w	r3, r3, #2
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d069      	beq.n	8002da6 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002cd2:	4b50      	ldr	r3, [pc, #320]	@ (8002e14 <HAL_RCC_OscConfig+0x280>)
 8002cd4:	689b      	ldr	r3, [r3, #8]
 8002cd6:	f003 030c 	and.w	r3, r3, #12
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d00b      	beq.n	8002cf6 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002cde:	4b4d      	ldr	r3, [pc, #308]	@ (8002e14 <HAL_RCC_OscConfig+0x280>)
 8002ce0:	689b      	ldr	r3, [r3, #8]
 8002ce2:	f003 030c 	and.w	r3, r3, #12
 8002ce6:	2b08      	cmp	r3, #8
 8002ce8:	d11c      	bne.n	8002d24 <HAL_RCC_OscConfig+0x190>
 8002cea:	4b4a      	ldr	r3, [pc, #296]	@ (8002e14 <HAL_RCC_OscConfig+0x280>)
 8002cec:	685b      	ldr	r3, [r3, #4]
 8002cee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d116      	bne.n	8002d24 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cf6:	4b47      	ldr	r3, [pc, #284]	@ (8002e14 <HAL_RCC_OscConfig+0x280>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f003 0302 	and.w	r3, r3, #2
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d005      	beq.n	8002d0e <HAL_RCC_OscConfig+0x17a>
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	68db      	ldr	r3, [r3, #12]
 8002d06:	2b01      	cmp	r3, #1
 8002d08:	d001      	beq.n	8002d0e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	e1e9      	b.n	80030e2 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d0e:	4b41      	ldr	r3, [pc, #260]	@ (8002e14 <HAL_RCC_OscConfig+0x280>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	691b      	ldr	r3, [r3, #16]
 8002d1a:	00db      	lsls	r3, r3, #3
 8002d1c:	493d      	ldr	r1, [pc, #244]	@ (8002e14 <HAL_RCC_OscConfig+0x280>)
 8002d1e:	4313      	orrs	r3, r2
 8002d20:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d22:	e040      	b.n	8002da6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	68db      	ldr	r3, [r3, #12]
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d023      	beq.n	8002d74 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d2c:	4b39      	ldr	r3, [pc, #228]	@ (8002e14 <HAL_RCC_OscConfig+0x280>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4a38      	ldr	r2, [pc, #224]	@ (8002e14 <HAL_RCC_OscConfig+0x280>)
 8002d32:	f043 0301 	orr.w	r3, r3, #1
 8002d36:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d38:	f7ff f806 	bl	8001d48 <HAL_GetTick>
 8002d3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d3e:	e008      	b.n	8002d52 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d40:	f7ff f802 	bl	8001d48 <HAL_GetTick>
 8002d44:	4602      	mov	r2, r0
 8002d46:	693b      	ldr	r3, [r7, #16]
 8002d48:	1ad3      	subs	r3, r2, r3
 8002d4a:	2b02      	cmp	r3, #2
 8002d4c:	d901      	bls.n	8002d52 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002d4e:	2303      	movs	r3, #3
 8002d50:	e1c7      	b.n	80030e2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d52:	4b30      	ldr	r3, [pc, #192]	@ (8002e14 <HAL_RCC_OscConfig+0x280>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f003 0302 	and.w	r3, r3, #2
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d0f0      	beq.n	8002d40 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d5e:	4b2d      	ldr	r3, [pc, #180]	@ (8002e14 <HAL_RCC_OscConfig+0x280>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	691b      	ldr	r3, [r3, #16]
 8002d6a:	00db      	lsls	r3, r3, #3
 8002d6c:	4929      	ldr	r1, [pc, #164]	@ (8002e14 <HAL_RCC_OscConfig+0x280>)
 8002d6e:	4313      	orrs	r3, r2
 8002d70:	600b      	str	r3, [r1, #0]
 8002d72:	e018      	b.n	8002da6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d74:	4b27      	ldr	r3, [pc, #156]	@ (8002e14 <HAL_RCC_OscConfig+0x280>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4a26      	ldr	r2, [pc, #152]	@ (8002e14 <HAL_RCC_OscConfig+0x280>)
 8002d7a:	f023 0301 	bic.w	r3, r3, #1
 8002d7e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d80:	f7fe ffe2 	bl	8001d48 <HAL_GetTick>
 8002d84:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d86:	e008      	b.n	8002d9a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d88:	f7fe ffde 	bl	8001d48 <HAL_GetTick>
 8002d8c:	4602      	mov	r2, r0
 8002d8e:	693b      	ldr	r3, [r7, #16]
 8002d90:	1ad3      	subs	r3, r2, r3
 8002d92:	2b02      	cmp	r3, #2
 8002d94:	d901      	bls.n	8002d9a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002d96:	2303      	movs	r3, #3
 8002d98:	e1a3      	b.n	80030e2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d9a:	4b1e      	ldr	r3, [pc, #120]	@ (8002e14 <HAL_RCC_OscConfig+0x280>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f003 0302 	and.w	r3, r3, #2
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d1f0      	bne.n	8002d88 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f003 0308 	and.w	r3, r3, #8
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d038      	beq.n	8002e24 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	695b      	ldr	r3, [r3, #20]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d019      	beq.n	8002dee <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002dba:	4b16      	ldr	r3, [pc, #88]	@ (8002e14 <HAL_RCC_OscConfig+0x280>)
 8002dbc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002dbe:	4a15      	ldr	r2, [pc, #84]	@ (8002e14 <HAL_RCC_OscConfig+0x280>)
 8002dc0:	f043 0301 	orr.w	r3, r3, #1
 8002dc4:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dc6:	f7fe ffbf 	bl	8001d48 <HAL_GetTick>
 8002dca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002dcc:	e008      	b.n	8002de0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002dce:	f7fe ffbb 	bl	8001d48 <HAL_GetTick>
 8002dd2:	4602      	mov	r2, r0
 8002dd4:	693b      	ldr	r3, [r7, #16]
 8002dd6:	1ad3      	subs	r3, r2, r3
 8002dd8:	2b02      	cmp	r3, #2
 8002dda:	d901      	bls.n	8002de0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002ddc:	2303      	movs	r3, #3
 8002dde:	e180      	b.n	80030e2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002de0:	4b0c      	ldr	r3, [pc, #48]	@ (8002e14 <HAL_RCC_OscConfig+0x280>)
 8002de2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002de4:	f003 0302 	and.w	r3, r3, #2
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d0f0      	beq.n	8002dce <HAL_RCC_OscConfig+0x23a>
 8002dec:	e01a      	b.n	8002e24 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002dee:	4b09      	ldr	r3, [pc, #36]	@ (8002e14 <HAL_RCC_OscConfig+0x280>)
 8002df0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002df2:	4a08      	ldr	r2, [pc, #32]	@ (8002e14 <HAL_RCC_OscConfig+0x280>)
 8002df4:	f023 0301 	bic.w	r3, r3, #1
 8002df8:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dfa:	f7fe ffa5 	bl	8001d48 <HAL_GetTick>
 8002dfe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e00:	e00a      	b.n	8002e18 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e02:	f7fe ffa1 	bl	8001d48 <HAL_GetTick>
 8002e06:	4602      	mov	r2, r0
 8002e08:	693b      	ldr	r3, [r7, #16]
 8002e0a:	1ad3      	subs	r3, r2, r3
 8002e0c:	2b02      	cmp	r3, #2
 8002e0e:	d903      	bls.n	8002e18 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002e10:	2303      	movs	r3, #3
 8002e12:	e166      	b.n	80030e2 <HAL_RCC_OscConfig+0x54e>
 8002e14:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e18:	4b92      	ldr	r3, [pc, #584]	@ (8003064 <HAL_RCC_OscConfig+0x4d0>)
 8002e1a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002e1c:	f003 0302 	and.w	r3, r3, #2
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d1ee      	bne.n	8002e02 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f003 0304 	and.w	r3, r3, #4
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	f000 80a4 	beq.w	8002f7a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e32:	4b8c      	ldr	r3, [pc, #560]	@ (8003064 <HAL_RCC_OscConfig+0x4d0>)
 8002e34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e36:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d10d      	bne.n	8002e5a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e3e:	4b89      	ldr	r3, [pc, #548]	@ (8003064 <HAL_RCC_OscConfig+0x4d0>)
 8002e40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e42:	4a88      	ldr	r2, [pc, #544]	@ (8003064 <HAL_RCC_OscConfig+0x4d0>)
 8002e44:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002e48:	6413      	str	r3, [r2, #64]	@ 0x40
 8002e4a:	4b86      	ldr	r3, [pc, #536]	@ (8003064 <HAL_RCC_OscConfig+0x4d0>)
 8002e4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e4e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e52:	60bb      	str	r3, [r7, #8]
 8002e54:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e56:	2301      	movs	r3, #1
 8002e58:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e5a:	4b83      	ldr	r3, [pc, #524]	@ (8003068 <HAL_RCC_OscConfig+0x4d4>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d118      	bne.n	8002e98 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002e66:	4b80      	ldr	r3, [pc, #512]	@ (8003068 <HAL_RCC_OscConfig+0x4d4>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	4a7f      	ldr	r2, [pc, #508]	@ (8003068 <HAL_RCC_OscConfig+0x4d4>)
 8002e6c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002e70:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e72:	f7fe ff69 	bl	8001d48 <HAL_GetTick>
 8002e76:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e78:	e008      	b.n	8002e8c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e7a:	f7fe ff65 	bl	8001d48 <HAL_GetTick>
 8002e7e:	4602      	mov	r2, r0
 8002e80:	693b      	ldr	r3, [r7, #16]
 8002e82:	1ad3      	subs	r3, r2, r3
 8002e84:	2b64      	cmp	r3, #100	@ 0x64
 8002e86:	d901      	bls.n	8002e8c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002e88:	2303      	movs	r3, #3
 8002e8a:	e12a      	b.n	80030e2 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e8c:	4b76      	ldr	r3, [pc, #472]	@ (8003068 <HAL_RCC_OscConfig+0x4d4>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d0f0      	beq.n	8002e7a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	689b      	ldr	r3, [r3, #8]
 8002e9c:	2b01      	cmp	r3, #1
 8002e9e:	d106      	bne.n	8002eae <HAL_RCC_OscConfig+0x31a>
 8002ea0:	4b70      	ldr	r3, [pc, #448]	@ (8003064 <HAL_RCC_OscConfig+0x4d0>)
 8002ea2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ea4:	4a6f      	ldr	r2, [pc, #444]	@ (8003064 <HAL_RCC_OscConfig+0x4d0>)
 8002ea6:	f043 0301 	orr.w	r3, r3, #1
 8002eaa:	6713      	str	r3, [r2, #112]	@ 0x70
 8002eac:	e02d      	b.n	8002f0a <HAL_RCC_OscConfig+0x376>
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	689b      	ldr	r3, [r3, #8]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d10c      	bne.n	8002ed0 <HAL_RCC_OscConfig+0x33c>
 8002eb6:	4b6b      	ldr	r3, [pc, #428]	@ (8003064 <HAL_RCC_OscConfig+0x4d0>)
 8002eb8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002eba:	4a6a      	ldr	r2, [pc, #424]	@ (8003064 <HAL_RCC_OscConfig+0x4d0>)
 8002ebc:	f023 0301 	bic.w	r3, r3, #1
 8002ec0:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ec2:	4b68      	ldr	r3, [pc, #416]	@ (8003064 <HAL_RCC_OscConfig+0x4d0>)
 8002ec4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ec6:	4a67      	ldr	r2, [pc, #412]	@ (8003064 <HAL_RCC_OscConfig+0x4d0>)
 8002ec8:	f023 0304 	bic.w	r3, r3, #4
 8002ecc:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ece:	e01c      	b.n	8002f0a <HAL_RCC_OscConfig+0x376>
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	689b      	ldr	r3, [r3, #8]
 8002ed4:	2b05      	cmp	r3, #5
 8002ed6:	d10c      	bne.n	8002ef2 <HAL_RCC_OscConfig+0x35e>
 8002ed8:	4b62      	ldr	r3, [pc, #392]	@ (8003064 <HAL_RCC_OscConfig+0x4d0>)
 8002eda:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002edc:	4a61      	ldr	r2, [pc, #388]	@ (8003064 <HAL_RCC_OscConfig+0x4d0>)
 8002ede:	f043 0304 	orr.w	r3, r3, #4
 8002ee2:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ee4:	4b5f      	ldr	r3, [pc, #380]	@ (8003064 <HAL_RCC_OscConfig+0x4d0>)
 8002ee6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ee8:	4a5e      	ldr	r2, [pc, #376]	@ (8003064 <HAL_RCC_OscConfig+0x4d0>)
 8002eea:	f043 0301 	orr.w	r3, r3, #1
 8002eee:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ef0:	e00b      	b.n	8002f0a <HAL_RCC_OscConfig+0x376>
 8002ef2:	4b5c      	ldr	r3, [pc, #368]	@ (8003064 <HAL_RCC_OscConfig+0x4d0>)
 8002ef4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ef6:	4a5b      	ldr	r2, [pc, #364]	@ (8003064 <HAL_RCC_OscConfig+0x4d0>)
 8002ef8:	f023 0301 	bic.w	r3, r3, #1
 8002efc:	6713      	str	r3, [r2, #112]	@ 0x70
 8002efe:	4b59      	ldr	r3, [pc, #356]	@ (8003064 <HAL_RCC_OscConfig+0x4d0>)
 8002f00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f02:	4a58      	ldr	r2, [pc, #352]	@ (8003064 <HAL_RCC_OscConfig+0x4d0>)
 8002f04:	f023 0304 	bic.w	r3, r3, #4
 8002f08:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	689b      	ldr	r3, [r3, #8]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d015      	beq.n	8002f3e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f12:	f7fe ff19 	bl	8001d48 <HAL_GetTick>
 8002f16:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f18:	e00a      	b.n	8002f30 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f1a:	f7fe ff15 	bl	8001d48 <HAL_GetTick>
 8002f1e:	4602      	mov	r2, r0
 8002f20:	693b      	ldr	r3, [r7, #16]
 8002f22:	1ad3      	subs	r3, r2, r3
 8002f24:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f28:	4293      	cmp	r3, r2
 8002f2a:	d901      	bls.n	8002f30 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002f2c:	2303      	movs	r3, #3
 8002f2e:	e0d8      	b.n	80030e2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f30:	4b4c      	ldr	r3, [pc, #304]	@ (8003064 <HAL_RCC_OscConfig+0x4d0>)
 8002f32:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f34:	f003 0302 	and.w	r3, r3, #2
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d0ee      	beq.n	8002f1a <HAL_RCC_OscConfig+0x386>
 8002f3c:	e014      	b.n	8002f68 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f3e:	f7fe ff03 	bl	8001d48 <HAL_GetTick>
 8002f42:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f44:	e00a      	b.n	8002f5c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f46:	f7fe feff 	bl	8001d48 <HAL_GetTick>
 8002f4a:	4602      	mov	r2, r0
 8002f4c:	693b      	ldr	r3, [r7, #16]
 8002f4e:	1ad3      	subs	r3, r2, r3
 8002f50:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f54:	4293      	cmp	r3, r2
 8002f56:	d901      	bls.n	8002f5c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002f58:	2303      	movs	r3, #3
 8002f5a:	e0c2      	b.n	80030e2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f5c:	4b41      	ldr	r3, [pc, #260]	@ (8003064 <HAL_RCC_OscConfig+0x4d0>)
 8002f5e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f60:	f003 0302 	and.w	r3, r3, #2
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d1ee      	bne.n	8002f46 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002f68:	7dfb      	ldrb	r3, [r7, #23]
 8002f6a:	2b01      	cmp	r3, #1
 8002f6c:	d105      	bne.n	8002f7a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f6e:	4b3d      	ldr	r3, [pc, #244]	@ (8003064 <HAL_RCC_OscConfig+0x4d0>)
 8002f70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f72:	4a3c      	ldr	r2, [pc, #240]	@ (8003064 <HAL_RCC_OscConfig+0x4d0>)
 8002f74:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002f78:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	699b      	ldr	r3, [r3, #24]
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	f000 80ae 	beq.w	80030e0 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002f84:	4b37      	ldr	r3, [pc, #220]	@ (8003064 <HAL_RCC_OscConfig+0x4d0>)
 8002f86:	689b      	ldr	r3, [r3, #8]
 8002f88:	f003 030c 	and.w	r3, r3, #12
 8002f8c:	2b08      	cmp	r3, #8
 8002f8e:	d06d      	beq.n	800306c <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	699b      	ldr	r3, [r3, #24]
 8002f94:	2b02      	cmp	r3, #2
 8002f96:	d14b      	bne.n	8003030 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f98:	4b32      	ldr	r3, [pc, #200]	@ (8003064 <HAL_RCC_OscConfig+0x4d0>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4a31      	ldr	r2, [pc, #196]	@ (8003064 <HAL_RCC_OscConfig+0x4d0>)
 8002f9e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002fa2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fa4:	f7fe fed0 	bl	8001d48 <HAL_GetTick>
 8002fa8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002faa:	e008      	b.n	8002fbe <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fac:	f7fe fecc 	bl	8001d48 <HAL_GetTick>
 8002fb0:	4602      	mov	r2, r0
 8002fb2:	693b      	ldr	r3, [r7, #16]
 8002fb4:	1ad3      	subs	r3, r2, r3
 8002fb6:	2b02      	cmp	r3, #2
 8002fb8:	d901      	bls.n	8002fbe <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002fba:	2303      	movs	r3, #3
 8002fbc:	e091      	b.n	80030e2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fbe:	4b29      	ldr	r3, [pc, #164]	@ (8003064 <HAL_RCC_OscConfig+0x4d0>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d1f0      	bne.n	8002fac <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	69da      	ldr	r2, [r3, #28]
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6a1b      	ldr	r3, [r3, #32]
 8002fd2:	431a      	orrs	r2, r3
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fd8:	019b      	lsls	r3, r3, #6
 8002fda:	431a      	orrs	r2, r3
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fe0:	085b      	lsrs	r3, r3, #1
 8002fe2:	3b01      	subs	r3, #1
 8002fe4:	041b      	lsls	r3, r3, #16
 8002fe6:	431a      	orrs	r2, r3
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fec:	061b      	lsls	r3, r3, #24
 8002fee:	431a      	orrs	r2, r3
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ff4:	071b      	lsls	r3, r3, #28
 8002ff6:	491b      	ldr	r1, [pc, #108]	@ (8003064 <HAL_RCC_OscConfig+0x4d0>)
 8002ff8:	4313      	orrs	r3, r2
 8002ffa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ffc:	4b19      	ldr	r3, [pc, #100]	@ (8003064 <HAL_RCC_OscConfig+0x4d0>)
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	4a18      	ldr	r2, [pc, #96]	@ (8003064 <HAL_RCC_OscConfig+0x4d0>)
 8003002:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003006:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003008:	f7fe fe9e 	bl	8001d48 <HAL_GetTick>
 800300c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800300e:	e008      	b.n	8003022 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003010:	f7fe fe9a 	bl	8001d48 <HAL_GetTick>
 8003014:	4602      	mov	r2, r0
 8003016:	693b      	ldr	r3, [r7, #16]
 8003018:	1ad3      	subs	r3, r2, r3
 800301a:	2b02      	cmp	r3, #2
 800301c:	d901      	bls.n	8003022 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800301e:	2303      	movs	r3, #3
 8003020:	e05f      	b.n	80030e2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003022:	4b10      	ldr	r3, [pc, #64]	@ (8003064 <HAL_RCC_OscConfig+0x4d0>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800302a:	2b00      	cmp	r3, #0
 800302c:	d0f0      	beq.n	8003010 <HAL_RCC_OscConfig+0x47c>
 800302e:	e057      	b.n	80030e0 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003030:	4b0c      	ldr	r3, [pc, #48]	@ (8003064 <HAL_RCC_OscConfig+0x4d0>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	4a0b      	ldr	r2, [pc, #44]	@ (8003064 <HAL_RCC_OscConfig+0x4d0>)
 8003036:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800303a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800303c:	f7fe fe84 	bl	8001d48 <HAL_GetTick>
 8003040:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003042:	e008      	b.n	8003056 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003044:	f7fe fe80 	bl	8001d48 <HAL_GetTick>
 8003048:	4602      	mov	r2, r0
 800304a:	693b      	ldr	r3, [r7, #16]
 800304c:	1ad3      	subs	r3, r2, r3
 800304e:	2b02      	cmp	r3, #2
 8003050:	d901      	bls.n	8003056 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8003052:	2303      	movs	r3, #3
 8003054:	e045      	b.n	80030e2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003056:	4b03      	ldr	r3, [pc, #12]	@ (8003064 <HAL_RCC_OscConfig+0x4d0>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800305e:	2b00      	cmp	r3, #0
 8003060:	d1f0      	bne.n	8003044 <HAL_RCC_OscConfig+0x4b0>
 8003062:	e03d      	b.n	80030e0 <HAL_RCC_OscConfig+0x54c>
 8003064:	40023800 	.word	0x40023800
 8003068:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800306c:	4b1f      	ldr	r3, [pc, #124]	@ (80030ec <HAL_RCC_OscConfig+0x558>)
 800306e:	685b      	ldr	r3, [r3, #4]
 8003070:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	699b      	ldr	r3, [r3, #24]
 8003076:	2b01      	cmp	r3, #1
 8003078:	d030      	beq.n	80030dc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003084:	429a      	cmp	r2, r3
 8003086:	d129      	bne.n	80030dc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003092:	429a      	cmp	r2, r3
 8003094:	d122      	bne.n	80030dc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003096:	68fa      	ldr	r2, [r7, #12]
 8003098:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800309c:	4013      	ands	r3, r2
 800309e:	687a      	ldr	r2, [r7, #4]
 80030a0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80030a2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80030a4:	4293      	cmp	r3, r2
 80030a6:	d119      	bne.n	80030dc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030b2:	085b      	lsrs	r3, r3, #1
 80030b4:	3b01      	subs	r3, #1
 80030b6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80030b8:	429a      	cmp	r2, r3
 80030ba:	d10f      	bne.n	80030dc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030c6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80030c8:	429a      	cmp	r2, r3
 80030ca:	d107      	bne.n	80030dc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030d6:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80030d8:	429a      	cmp	r2, r3
 80030da:	d001      	beq.n	80030e0 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80030dc:	2301      	movs	r3, #1
 80030de:	e000      	b.n	80030e2 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80030e0:	2300      	movs	r3, #0
}
 80030e2:	4618      	mov	r0, r3
 80030e4:	3718      	adds	r7, #24
 80030e6:	46bd      	mov	sp, r7
 80030e8:	bd80      	pop	{r7, pc}
 80030ea:	bf00      	nop
 80030ec:	40023800 	.word	0x40023800

080030f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b084      	sub	sp, #16
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
 80030f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80030fa:	2300      	movs	r3, #0
 80030fc:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	2b00      	cmp	r3, #0
 8003102:	d101      	bne.n	8003108 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003104:	2301      	movs	r3, #1
 8003106:	e0d0      	b.n	80032aa <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003108:	4b6a      	ldr	r3, [pc, #424]	@ (80032b4 <HAL_RCC_ClockConfig+0x1c4>)
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f003 030f 	and.w	r3, r3, #15
 8003110:	683a      	ldr	r2, [r7, #0]
 8003112:	429a      	cmp	r2, r3
 8003114:	d910      	bls.n	8003138 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003116:	4b67      	ldr	r3, [pc, #412]	@ (80032b4 <HAL_RCC_ClockConfig+0x1c4>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f023 020f 	bic.w	r2, r3, #15
 800311e:	4965      	ldr	r1, [pc, #404]	@ (80032b4 <HAL_RCC_ClockConfig+0x1c4>)
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	4313      	orrs	r3, r2
 8003124:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003126:	4b63      	ldr	r3, [pc, #396]	@ (80032b4 <HAL_RCC_ClockConfig+0x1c4>)
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f003 030f 	and.w	r3, r3, #15
 800312e:	683a      	ldr	r2, [r7, #0]
 8003130:	429a      	cmp	r2, r3
 8003132:	d001      	beq.n	8003138 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003134:	2301      	movs	r3, #1
 8003136:	e0b8      	b.n	80032aa <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f003 0302 	and.w	r3, r3, #2
 8003140:	2b00      	cmp	r3, #0
 8003142:	d020      	beq.n	8003186 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f003 0304 	and.w	r3, r3, #4
 800314c:	2b00      	cmp	r3, #0
 800314e:	d005      	beq.n	800315c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003150:	4b59      	ldr	r3, [pc, #356]	@ (80032b8 <HAL_RCC_ClockConfig+0x1c8>)
 8003152:	689b      	ldr	r3, [r3, #8]
 8003154:	4a58      	ldr	r2, [pc, #352]	@ (80032b8 <HAL_RCC_ClockConfig+0x1c8>)
 8003156:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800315a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f003 0308 	and.w	r3, r3, #8
 8003164:	2b00      	cmp	r3, #0
 8003166:	d005      	beq.n	8003174 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003168:	4b53      	ldr	r3, [pc, #332]	@ (80032b8 <HAL_RCC_ClockConfig+0x1c8>)
 800316a:	689b      	ldr	r3, [r3, #8]
 800316c:	4a52      	ldr	r2, [pc, #328]	@ (80032b8 <HAL_RCC_ClockConfig+0x1c8>)
 800316e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003172:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003174:	4b50      	ldr	r3, [pc, #320]	@ (80032b8 <HAL_RCC_ClockConfig+0x1c8>)
 8003176:	689b      	ldr	r3, [r3, #8]
 8003178:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	689b      	ldr	r3, [r3, #8]
 8003180:	494d      	ldr	r1, [pc, #308]	@ (80032b8 <HAL_RCC_ClockConfig+0x1c8>)
 8003182:	4313      	orrs	r3, r2
 8003184:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f003 0301 	and.w	r3, r3, #1
 800318e:	2b00      	cmp	r3, #0
 8003190:	d040      	beq.n	8003214 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	685b      	ldr	r3, [r3, #4]
 8003196:	2b01      	cmp	r3, #1
 8003198:	d107      	bne.n	80031aa <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800319a:	4b47      	ldr	r3, [pc, #284]	@ (80032b8 <HAL_RCC_ClockConfig+0x1c8>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d115      	bne.n	80031d2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80031a6:	2301      	movs	r3, #1
 80031a8:	e07f      	b.n	80032aa <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	685b      	ldr	r3, [r3, #4]
 80031ae:	2b02      	cmp	r3, #2
 80031b0:	d107      	bne.n	80031c2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031b2:	4b41      	ldr	r3, [pc, #260]	@ (80032b8 <HAL_RCC_ClockConfig+0x1c8>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d109      	bne.n	80031d2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80031be:	2301      	movs	r3, #1
 80031c0:	e073      	b.n	80032aa <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031c2:	4b3d      	ldr	r3, [pc, #244]	@ (80032b8 <HAL_RCC_ClockConfig+0x1c8>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f003 0302 	and.w	r3, r3, #2
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d101      	bne.n	80031d2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80031ce:	2301      	movs	r3, #1
 80031d0:	e06b      	b.n	80032aa <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80031d2:	4b39      	ldr	r3, [pc, #228]	@ (80032b8 <HAL_RCC_ClockConfig+0x1c8>)
 80031d4:	689b      	ldr	r3, [r3, #8]
 80031d6:	f023 0203 	bic.w	r2, r3, #3
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	685b      	ldr	r3, [r3, #4]
 80031de:	4936      	ldr	r1, [pc, #216]	@ (80032b8 <HAL_RCC_ClockConfig+0x1c8>)
 80031e0:	4313      	orrs	r3, r2
 80031e2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80031e4:	f7fe fdb0 	bl	8001d48 <HAL_GetTick>
 80031e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031ea:	e00a      	b.n	8003202 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031ec:	f7fe fdac 	bl	8001d48 <HAL_GetTick>
 80031f0:	4602      	mov	r2, r0
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	1ad3      	subs	r3, r2, r3
 80031f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d901      	bls.n	8003202 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80031fe:	2303      	movs	r3, #3
 8003200:	e053      	b.n	80032aa <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003202:	4b2d      	ldr	r3, [pc, #180]	@ (80032b8 <HAL_RCC_ClockConfig+0x1c8>)
 8003204:	689b      	ldr	r3, [r3, #8]
 8003206:	f003 020c 	and.w	r2, r3, #12
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	685b      	ldr	r3, [r3, #4]
 800320e:	009b      	lsls	r3, r3, #2
 8003210:	429a      	cmp	r2, r3
 8003212:	d1eb      	bne.n	80031ec <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003214:	4b27      	ldr	r3, [pc, #156]	@ (80032b4 <HAL_RCC_ClockConfig+0x1c4>)
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f003 030f 	and.w	r3, r3, #15
 800321c:	683a      	ldr	r2, [r7, #0]
 800321e:	429a      	cmp	r2, r3
 8003220:	d210      	bcs.n	8003244 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003222:	4b24      	ldr	r3, [pc, #144]	@ (80032b4 <HAL_RCC_ClockConfig+0x1c4>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f023 020f 	bic.w	r2, r3, #15
 800322a:	4922      	ldr	r1, [pc, #136]	@ (80032b4 <HAL_RCC_ClockConfig+0x1c4>)
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	4313      	orrs	r3, r2
 8003230:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003232:	4b20      	ldr	r3, [pc, #128]	@ (80032b4 <HAL_RCC_ClockConfig+0x1c4>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f003 030f 	and.w	r3, r3, #15
 800323a:	683a      	ldr	r2, [r7, #0]
 800323c:	429a      	cmp	r2, r3
 800323e:	d001      	beq.n	8003244 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003240:	2301      	movs	r3, #1
 8003242:	e032      	b.n	80032aa <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f003 0304 	and.w	r3, r3, #4
 800324c:	2b00      	cmp	r3, #0
 800324e:	d008      	beq.n	8003262 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003250:	4b19      	ldr	r3, [pc, #100]	@ (80032b8 <HAL_RCC_ClockConfig+0x1c8>)
 8003252:	689b      	ldr	r3, [r3, #8]
 8003254:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	68db      	ldr	r3, [r3, #12]
 800325c:	4916      	ldr	r1, [pc, #88]	@ (80032b8 <HAL_RCC_ClockConfig+0x1c8>)
 800325e:	4313      	orrs	r3, r2
 8003260:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f003 0308 	and.w	r3, r3, #8
 800326a:	2b00      	cmp	r3, #0
 800326c:	d009      	beq.n	8003282 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800326e:	4b12      	ldr	r3, [pc, #72]	@ (80032b8 <HAL_RCC_ClockConfig+0x1c8>)
 8003270:	689b      	ldr	r3, [r3, #8]
 8003272:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	691b      	ldr	r3, [r3, #16]
 800327a:	00db      	lsls	r3, r3, #3
 800327c:	490e      	ldr	r1, [pc, #56]	@ (80032b8 <HAL_RCC_ClockConfig+0x1c8>)
 800327e:	4313      	orrs	r3, r2
 8003280:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003282:	f000 f821 	bl	80032c8 <HAL_RCC_GetSysClockFreq>
 8003286:	4602      	mov	r2, r0
 8003288:	4b0b      	ldr	r3, [pc, #44]	@ (80032b8 <HAL_RCC_ClockConfig+0x1c8>)
 800328a:	689b      	ldr	r3, [r3, #8]
 800328c:	091b      	lsrs	r3, r3, #4
 800328e:	f003 030f 	and.w	r3, r3, #15
 8003292:	490a      	ldr	r1, [pc, #40]	@ (80032bc <HAL_RCC_ClockConfig+0x1cc>)
 8003294:	5ccb      	ldrb	r3, [r1, r3]
 8003296:	fa22 f303 	lsr.w	r3, r2, r3
 800329a:	4a09      	ldr	r2, [pc, #36]	@ (80032c0 <HAL_RCC_ClockConfig+0x1d0>)
 800329c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800329e:	4b09      	ldr	r3, [pc, #36]	@ (80032c4 <HAL_RCC_ClockConfig+0x1d4>)
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	4618      	mov	r0, r3
 80032a4:	f7fe fd0c 	bl	8001cc0 <HAL_InitTick>

  return HAL_OK;
 80032a8:	2300      	movs	r3, #0
}
 80032aa:	4618      	mov	r0, r3
 80032ac:	3710      	adds	r7, #16
 80032ae:	46bd      	mov	sp, r7
 80032b0:	bd80      	pop	{r7, pc}
 80032b2:	bf00      	nop
 80032b4:	40023c00 	.word	0x40023c00
 80032b8:	40023800 	.word	0x40023800
 80032bc:	08005d9c 	.word	0x08005d9c
 80032c0:	20000008 	.word	0x20000008
 80032c4:	20000010 	.word	0x20000010

080032c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80032c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80032cc:	b090      	sub	sp, #64	@ 0x40
 80032ce:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80032d0:	2300      	movs	r3, #0
 80032d2:	637b      	str	r3, [r7, #52]	@ 0x34
 80032d4:	2300      	movs	r3, #0
 80032d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80032d8:	2300      	movs	r3, #0
 80032da:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 80032dc:	2300      	movs	r3, #0
 80032de:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80032e0:	4b59      	ldr	r3, [pc, #356]	@ (8003448 <HAL_RCC_GetSysClockFreq+0x180>)
 80032e2:	689b      	ldr	r3, [r3, #8]
 80032e4:	f003 030c 	and.w	r3, r3, #12
 80032e8:	2b08      	cmp	r3, #8
 80032ea:	d00d      	beq.n	8003308 <HAL_RCC_GetSysClockFreq+0x40>
 80032ec:	2b08      	cmp	r3, #8
 80032ee:	f200 80a1 	bhi.w	8003434 <HAL_RCC_GetSysClockFreq+0x16c>
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d002      	beq.n	80032fc <HAL_RCC_GetSysClockFreq+0x34>
 80032f6:	2b04      	cmp	r3, #4
 80032f8:	d003      	beq.n	8003302 <HAL_RCC_GetSysClockFreq+0x3a>
 80032fa:	e09b      	b.n	8003434 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80032fc:	4b53      	ldr	r3, [pc, #332]	@ (800344c <HAL_RCC_GetSysClockFreq+0x184>)
 80032fe:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003300:	e09b      	b.n	800343a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003302:	4b53      	ldr	r3, [pc, #332]	@ (8003450 <HAL_RCC_GetSysClockFreq+0x188>)
 8003304:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003306:	e098      	b.n	800343a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003308:	4b4f      	ldr	r3, [pc, #316]	@ (8003448 <HAL_RCC_GetSysClockFreq+0x180>)
 800330a:	685b      	ldr	r3, [r3, #4]
 800330c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003310:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003312:	4b4d      	ldr	r3, [pc, #308]	@ (8003448 <HAL_RCC_GetSysClockFreq+0x180>)
 8003314:	685b      	ldr	r3, [r3, #4]
 8003316:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800331a:	2b00      	cmp	r3, #0
 800331c:	d028      	beq.n	8003370 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800331e:	4b4a      	ldr	r3, [pc, #296]	@ (8003448 <HAL_RCC_GetSysClockFreq+0x180>)
 8003320:	685b      	ldr	r3, [r3, #4]
 8003322:	099b      	lsrs	r3, r3, #6
 8003324:	2200      	movs	r2, #0
 8003326:	623b      	str	r3, [r7, #32]
 8003328:	627a      	str	r2, [r7, #36]	@ 0x24
 800332a:	6a3b      	ldr	r3, [r7, #32]
 800332c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003330:	2100      	movs	r1, #0
 8003332:	4b47      	ldr	r3, [pc, #284]	@ (8003450 <HAL_RCC_GetSysClockFreq+0x188>)
 8003334:	fb03 f201 	mul.w	r2, r3, r1
 8003338:	2300      	movs	r3, #0
 800333a:	fb00 f303 	mul.w	r3, r0, r3
 800333e:	4413      	add	r3, r2
 8003340:	4a43      	ldr	r2, [pc, #268]	@ (8003450 <HAL_RCC_GetSysClockFreq+0x188>)
 8003342:	fba0 1202 	umull	r1, r2, r0, r2
 8003346:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003348:	460a      	mov	r2, r1
 800334a:	62ba      	str	r2, [r7, #40]	@ 0x28
 800334c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800334e:	4413      	add	r3, r2
 8003350:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003352:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003354:	2200      	movs	r2, #0
 8003356:	61bb      	str	r3, [r7, #24]
 8003358:	61fa      	str	r2, [r7, #28]
 800335a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800335e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8003362:	f7fc ffbd 	bl	80002e0 <__aeabi_uldivmod>
 8003366:	4602      	mov	r2, r0
 8003368:	460b      	mov	r3, r1
 800336a:	4613      	mov	r3, r2
 800336c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800336e:	e053      	b.n	8003418 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003370:	4b35      	ldr	r3, [pc, #212]	@ (8003448 <HAL_RCC_GetSysClockFreq+0x180>)
 8003372:	685b      	ldr	r3, [r3, #4]
 8003374:	099b      	lsrs	r3, r3, #6
 8003376:	2200      	movs	r2, #0
 8003378:	613b      	str	r3, [r7, #16]
 800337a:	617a      	str	r2, [r7, #20]
 800337c:	693b      	ldr	r3, [r7, #16]
 800337e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003382:	f04f 0b00 	mov.w	fp, #0
 8003386:	4652      	mov	r2, sl
 8003388:	465b      	mov	r3, fp
 800338a:	f04f 0000 	mov.w	r0, #0
 800338e:	f04f 0100 	mov.w	r1, #0
 8003392:	0159      	lsls	r1, r3, #5
 8003394:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003398:	0150      	lsls	r0, r2, #5
 800339a:	4602      	mov	r2, r0
 800339c:	460b      	mov	r3, r1
 800339e:	ebb2 080a 	subs.w	r8, r2, sl
 80033a2:	eb63 090b 	sbc.w	r9, r3, fp
 80033a6:	f04f 0200 	mov.w	r2, #0
 80033aa:	f04f 0300 	mov.w	r3, #0
 80033ae:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80033b2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80033b6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80033ba:	ebb2 0408 	subs.w	r4, r2, r8
 80033be:	eb63 0509 	sbc.w	r5, r3, r9
 80033c2:	f04f 0200 	mov.w	r2, #0
 80033c6:	f04f 0300 	mov.w	r3, #0
 80033ca:	00eb      	lsls	r3, r5, #3
 80033cc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80033d0:	00e2      	lsls	r2, r4, #3
 80033d2:	4614      	mov	r4, r2
 80033d4:	461d      	mov	r5, r3
 80033d6:	eb14 030a 	adds.w	r3, r4, sl
 80033da:	603b      	str	r3, [r7, #0]
 80033dc:	eb45 030b 	adc.w	r3, r5, fp
 80033e0:	607b      	str	r3, [r7, #4]
 80033e2:	f04f 0200 	mov.w	r2, #0
 80033e6:	f04f 0300 	mov.w	r3, #0
 80033ea:	e9d7 4500 	ldrd	r4, r5, [r7]
 80033ee:	4629      	mov	r1, r5
 80033f0:	028b      	lsls	r3, r1, #10
 80033f2:	4621      	mov	r1, r4
 80033f4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80033f8:	4621      	mov	r1, r4
 80033fa:	028a      	lsls	r2, r1, #10
 80033fc:	4610      	mov	r0, r2
 80033fe:	4619      	mov	r1, r3
 8003400:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003402:	2200      	movs	r2, #0
 8003404:	60bb      	str	r3, [r7, #8]
 8003406:	60fa      	str	r2, [r7, #12]
 8003408:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800340c:	f7fc ff68 	bl	80002e0 <__aeabi_uldivmod>
 8003410:	4602      	mov	r2, r0
 8003412:	460b      	mov	r3, r1
 8003414:	4613      	mov	r3, r2
 8003416:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003418:	4b0b      	ldr	r3, [pc, #44]	@ (8003448 <HAL_RCC_GetSysClockFreq+0x180>)
 800341a:	685b      	ldr	r3, [r3, #4]
 800341c:	0c1b      	lsrs	r3, r3, #16
 800341e:	f003 0303 	and.w	r3, r3, #3
 8003422:	3301      	adds	r3, #1
 8003424:	005b      	lsls	r3, r3, #1
 8003426:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8003428:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800342a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800342c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003430:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003432:	e002      	b.n	800343a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003434:	4b05      	ldr	r3, [pc, #20]	@ (800344c <HAL_RCC_GetSysClockFreq+0x184>)
 8003436:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003438:	bf00      	nop
    }
  }
  return sysclockfreq;
 800343a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 800343c:	4618      	mov	r0, r3
 800343e:	3740      	adds	r7, #64	@ 0x40
 8003440:	46bd      	mov	sp, r7
 8003442:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003446:	bf00      	nop
 8003448:	40023800 	.word	0x40023800
 800344c:	00f42400 	.word	0x00f42400
 8003450:	017d7840 	.word	0x017d7840

08003454 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	b088      	sub	sp, #32
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800345c:	2300      	movs	r3, #0
 800345e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003460:	2300      	movs	r3, #0
 8003462:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003464:	2300      	movs	r3, #0
 8003466:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003468:	2300      	movs	r3, #0
 800346a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800346c:	2300      	movs	r3, #0
 800346e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f003 0301 	and.w	r3, r3, #1
 8003478:	2b00      	cmp	r3, #0
 800347a:	d012      	beq.n	80034a2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800347c:	4b69      	ldr	r3, [pc, #420]	@ (8003624 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800347e:	689b      	ldr	r3, [r3, #8]
 8003480:	4a68      	ldr	r2, [pc, #416]	@ (8003624 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003482:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8003486:	6093      	str	r3, [r2, #8]
 8003488:	4b66      	ldr	r3, [pc, #408]	@ (8003624 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800348a:	689a      	ldr	r2, [r3, #8]
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003490:	4964      	ldr	r1, [pc, #400]	@ (8003624 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003492:	4313      	orrs	r3, r2
 8003494:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800349a:	2b00      	cmp	r3, #0
 800349c:	d101      	bne.n	80034a2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800349e:	2301      	movs	r3, #1
 80034a0:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d017      	beq.n	80034de <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80034ae:	4b5d      	ldr	r3, [pc, #372]	@ (8003624 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80034b4:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034bc:	4959      	ldr	r1, [pc, #356]	@ (8003624 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034be:	4313      	orrs	r3, r2
 80034c0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034c8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80034cc:	d101      	bne.n	80034d2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80034ce:	2301      	movs	r3, #1
 80034d0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d101      	bne.n	80034de <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80034da:	2301      	movs	r3, #1
 80034dc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d017      	beq.n	800351a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80034ea:	4b4e      	ldr	r3, [pc, #312]	@ (8003624 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80034f0:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034f8:	494a      	ldr	r1, [pc, #296]	@ (8003624 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034fa:	4313      	orrs	r3, r2
 80034fc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003504:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003508:	d101      	bne.n	800350e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800350a:	2301      	movs	r3, #1
 800350c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003512:	2b00      	cmp	r3, #0
 8003514:	d101      	bne.n	800351a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003516:	2301      	movs	r3, #1
 8003518:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003522:	2b00      	cmp	r3, #0
 8003524:	d001      	beq.n	800352a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003526:	2301      	movs	r3, #1
 8003528:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f003 0320 	and.w	r3, r3, #32
 8003532:	2b00      	cmp	r3, #0
 8003534:	f000 808b 	beq.w	800364e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003538:	4b3a      	ldr	r3, [pc, #232]	@ (8003624 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800353a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800353c:	4a39      	ldr	r2, [pc, #228]	@ (8003624 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800353e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003542:	6413      	str	r3, [r2, #64]	@ 0x40
 8003544:	4b37      	ldr	r3, [pc, #220]	@ (8003624 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003546:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003548:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800354c:	60bb      	str	r3, [r7, #8]
 800354e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003550:	4b35      	ldr	r3, [pc, #212]	@ (8003628 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	4a34      	ldr	r2, [pc, #208]	@ (8003628 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003556:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800355a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800355c:	f7fe fbf4 	bl	8001d48 <HAL_GetTick>
 8003560:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003562:	e008      	b.n	8003576 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003564:	f7fe fbf0 	bl	8001d48 <HAL_GetTick>
 8003568:	4602      	mov	r2, r0
 800356a:	697b      	ldr	r3, [r7, #20]
 800356c:	1ad3      	subs	r3, r2, r3
 800356e:	2b64      	cmp	r3, #100	@ 0x64
 8003570:	d901      	bls.n	8003576 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003572:	2303      	movs	r3, #3
 8003574:	e38f      	b.n	8003c96 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003576:	4b2c      	ldr	r3, [pc, #176]	@ (8003628 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800357e:	2b00      	cmp	r3, #0
 8003580:	d0f0      	beq.n	8003564 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003582:	4b28      	ldr	r3, [pc, #160]	@ (8003624 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003584:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003586:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800358a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800358c:	693b      	ldr	r3, [r7, #16]
 800358e:	2b00      	cmp	r3, #0
 8003590:	d035      	beq.n	80035fe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003596:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800359a:	693a      	ldr	r2, [r7, #16]
 800359c:	429a      	cmp	r2, r3
 800359e:	d02e      	beq.n	80035fe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80035a0:	4b20      	ldr	r3, [pc, #128]	@ (8003624 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035a4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80035a8:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80035aa:	4b1e      	ldr	r3, [pc, #120]	@ (8003624 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035ae:	4a1d      	ldr	r2, [pc, #116]	@ (8003624 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035b0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80035b4:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80035b6:	4b1b      	ldr	r3, [pc, #108]	@ (8003624 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035ba:	4a1a      	ldr	r2, [pc, #104]	@ (8003624 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035bc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80035c0:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80035c2:	4a18      	ldr	r2, [pc, #96]	@ (8003624 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035c4:	693b      	ldr	r3, [r7, #16]
 80035c6:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80035c8:	4b16      	ldr	r3, [pc, #88]	@ (8003624 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035cc:	f003 0301 	and.w	r3, r3, #1
 80035d0:	2b01      	cmp	r3, #1
 80035d2:	d114      	bne.n	80035fe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035d4:	f7fe fbb8 	bl	8001d48 <HAL_GetTick>
 80035d8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035da:	e00a      	b.n	80035f2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80035dc:	f7fe fbb4 	bl	8001d48 <HAL_GetTick>
 80035e0:	4602      	mov	r2, r0
 80035e2:	697b      	ldr	r3, [r7, #20]
 80035e4:	1ad3      	subs	r3, r2, r3
 80035e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d901      	bls.n	80035f2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80035ee:	2303      	movs	r3, #3
 80035f0:	e351      	b.n	8003c96 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035f2:	4b0c      	ldr	r3, [pc, #48]	@ (8003624 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035f6:	f003 0302 	and.w	r3, r3, #2
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d0ee      	beq.n	80035dc <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003602:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003606:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800360a:	d111      	bne.n	8003630 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800360c:	4b05      	ldr	r3, [pc, #20]	@ (8003624 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800360e:	689b      	ldr	r3, [r3, #8]
 8003610:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003618:	4b04      	ldr	r3, [pc, #16]	@ (800362c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800361a:	400b      	ands	r3, r1
 800361c:	4901      	ldr	r1, [pc, #4]	@ (8003624 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800361e:	4313      	orrs	r3, r2
 8003620:	608b      	str	r3, [r1, #8]
 8003622:	e00b      	b.n	800363c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003624:	40023800 	.word	0x40023800
 8003628:	40007000 	.word	0x40007000
 800362c:	0ffffcff 	.word	0x0ffffcff
 8003630:	4bac      	ldr	r3, [pc, #688]	@ (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003632:	689b      	ldr	r3, [r3, #8]
 8003634:	4aab      	ldr	r2, [pc, #684]	@ (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003636:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800363a:	6093      	str	r3, [r2, #8]
 800363c:	4ba9      	ldr	r3, [pc, #676]	@ (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800363e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003644:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003648:	49a6      	ldr	r1, [pc, #664]	@ (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800364a:	4313      	orrs	r3, r2
 800364c:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f003 0310 	and.w	r3, r3, #16
 8003656:	2b00      	cmp	r3, #0
 8003658:	d010      	beq.n	800367c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800365a:	4ba2      	ldr	r3, [pc, #648]	@ (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800365c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003660:	4aa0      	ldr	r2, [pc, #640]	@ (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003662:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003666:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800366a:	4b9e      	ldr	r3, [pc, #632]	@ (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800366c:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003674:	499b      	ldr	r1, [pc, #620]	@ (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003676:	4313      	orrs	r3, r2
 8003678:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003684:	2b00      	cmp	r3, #0
 8003686:	d00a      	beq.n	800369e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003688:	4b96      	ldr	r3, [pc, #600]	@ (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800368a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800368e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003696:	4993      	ldr	r1, [pc, #588]	@ (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003698:	4313      	orrs	r3, r2
 800369a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d00a      	beq.n	80036c0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80036aa:	4b8e      	ldr	r3, [pc, #568]	@ (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80036ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036b0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80036b8:	498a      	ldr	r1, [pc, #552]	@ (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80036ba:	4313      	orrs	r3, r2
 80036bc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d00a      	beq.n	80036e2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80036cc:	4b85      	ldr	r3, [pc, #532]	@ (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80036ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036d2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80036da:	4982      	ldr	r1, [pc, #520]	@ (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80036dc:	4313      	orrs	r3, r2
 80036de:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d00a      	beq.n	8003704 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80036ee:	4b7d      	ldr	r3, [pc, #500]	@ (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80036f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036f4:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036fc:	4979      	ldr	r1, [pc, #484]	@ (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80036fe:	4313      	orrs	r3, r2
 8003700:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800370c:	2b00      	cmp	r3, #0
 800370e:	d00a      	beq.n	8003726 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003710:	4b74      	ldr	r3, [pc, #464]	@ (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003712:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003716:	f023 0203 	bic.w	r2, r3, #3
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800371e:	4971      	ldr	r1, [pc, #452]	@ (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003720:	4313      	orrs	r3, r2
 8003722:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800372e:	2b00      	cmp	r3, #0
 8003730:	d00a      	beq.n	8003748 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003732:	4b6c      	ldr	r3, [pc, #432]	@ (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003734:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003738:	f023 020c 	bic.w	r2, r3, #12
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003740:	4968      	ldr	r1, [pc, #416]	@ (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003742:	4313      	orrs	r3, r2
 8003744:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003750:	2b00      	cmp	r3, #0
 8003752:	d00a      	beq.n	800376a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003754:	4b63      	ldr	r3, [pc, #396]	@ (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003756:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800375a:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003762:	4960      	ldr	r1, [pc, #384]	@ (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003764:	4313      	orrs	r3, r2
 8003766:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003772:	2b00      	cmp	r3, #0
 8003774:	d00a      	beq.n	800378c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003776:	4b5b      	ldr	r3, [pc, #364]	@ (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003778:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800377c:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003784:	4957      	ldr	r1, [pc, #348]	@ (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003786:	4313      	orrs	r3, r2
 8003788:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003794:	2b00      	cmp	r3, #0
 8003796:	d00a      	beq.n	80037ae <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003798:	4b52      	ldr	r3, [pc, #328]	@ (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800379a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800379e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037a6:	494f      	ldr	r1, [pc, #316]	@ (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80037a8:	4313      	orrs	r3, r2
 80037aa:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d00a      	beq.n	80037d0 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80037ba:	4b4a      	ldr	r3, [pc, #296]	@ (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80037bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037c0:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037c8:	4946      	ldr	r1, [pc, #280]	@ (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80037ca:	4313      	orrs	r3, r2
 80037cc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d00a      	beq.n	80037f2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80037dc:	4b41      	ldr	r3, [pc, #260]	@ (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80037de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037e2:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037ea:	493e      	ldr	r1, [pc, #248]	@ (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80037ec:	4313      	orrs	r3, r2
 80037ee:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d00a      	beq.n	8003814 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80037fe:	4b39      	ldr	r3, [pc, #228]	@ (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003800:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003804:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800380c:	4935      	ldr	r1, [pc, #212]	@ (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800380e:	4313      	orrs	r3, r2
 8003810:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800381c:	2b00      	cmp	r3, #0
 800381e:	d00a      	beq.n	8003836 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003820:	4b30      	ldr	r3, [pc, #192]	@ (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003822:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003826:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800382e:	492d      	ldr	r1, [pc, #180]	@ (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003830:	4313      	orrs	r3, r2
 8003832:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800383e:	2b00      	cmp	r3, #0
 8003840:	d011      	beq.n	8003866 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003842:	4b28      	ldr	r3, [pc, #160]	@ (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003844:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003848:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003850:	4924      	ldr	r1, [pc, #144]	@ (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003852:	4313      	orrs	r3, r2
 8003854:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800385c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003860:	d101      	bne.n	8003866 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003862:	2301      	movs	r3, #1
 8003864:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f003 0308 	and.w	r3, r3, #8
 800386e:	2b00      	cmp	r3, #0
 8003870:	d001      	beq.n	8003876 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003872:	2301      	movs	r3, #1
 8003874:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800387e:	2b00      	cmp	r3, #0
 8003880:	d00a      	beq.n	8003898 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003882:	4b18      	ldr	r3, [pc, #96]	@ (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003884:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003888:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003890:	4914      	ldr	r1, [pc, #80]	@ (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003892:	4313      	orrs	r3, r2
 8003894:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d00b      	beq.n	80038bc <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80038a4:	4b0f      	ldr	r3, [pc, #60]	@ (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80038a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80038aa:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80038b4:	490b      	ldr	r1, [pc, #44]	@ (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80038b6:	4313      	orrs	r3, r2
 80038b8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d00f      	beq.n	80038e8 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80038c8:	4b06      	ldr	r3, [pc, #24]	@ (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80038ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80038ce:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80038d8:	4902      	ldr	r1, [pc, #8]	@ (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80038da:	4313      	orrs	r3, r2
 80038dc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80038e0:	e002      	b.n	80038e8 <HAL_RCCEx_PeriphCLKConfig+0x494>
 80038e2:	bf00      	nop
 80038e4:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d00b      	beq.n	800390c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80038f4:	4b8a      	ldr	r3, [pc, #552]	@ (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80038f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80038fa:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003904:	4986      	ldr	r1, [pc, #536]	@ (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003906:	4313      	orrs	r3, r2
 8003908:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003914:	2b00      	cmp	r3, #0
 8003916:	d00b      	beq.n	8003930 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003918:	4b81      	ldr	r3, [pc, #516]	@ (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800391a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800391e:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003928:	497d      	ldr	r1, [pc, #500]	@ (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800392a:	4313      	orrs	r3, r2
 800392c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003930:	69fb      	ldr	r3, [r7, #28]
 8003932:	2b01      	cmp	r3, #1
 8003934:	d006      	beq.n	8003944 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800393e:	2b00      	cmp	r3, #0
 8003940:	f000 80d6 	beq.w	8003af0 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003944:	4b76      	ldr	r3, [pc, #472]	@ (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	4a75      	ldr	r2, [pc, #468]	@ (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800394a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800394e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003950:	f7fe f9fa 	bl	8001d48 <HAL_GetTick>
 8003954:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003956:	e008      	b.n	800396a <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003958:	f7fe f9f6 	bl	8001d48 <HAL_GetTick>
 800395c:	4602      	mov	r2, r0
 800395e:	697b      	ldr	r3, [r7, #20]
 8003960:	1ad3      	subs	r3, r2, r3
 8003962:	2b64      	cmp	r3, #100	@ 0x64
 8003964:	d901      	bls.n	800396a <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003966:	2303      	movs	r3, #3
 8003968:	e195      	b.n	8003c96 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800396a:	4b6d      	ldr	r3, [pc, #436]	@ (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003972:	2b00      	cmp	r3, #0
 8003974:	d1f0      	bne.n	8003958 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f003 0301 	and.w	r3, r3, #1
 800397e:	2b00      	cmp	r3, #0
 8003980:	d021      	beq.n	80039c6 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003986:	2b00      	cmp	r3, #0
 8003988:	d11d      	bne.n	80039c6 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800398a:	4b65      	ldr	r3, [pc, #404]	@ (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800398c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003990:	0c1b      	lsrs	r3, r3, #16
 8003992:	f003 0303 	and.w	r3, r3, #3
 8003996:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003998:	4b61      	ldr	r3, [pc, #388]	@ (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800399a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800399e:	0e1b      	lsrs	r3, r3, #24
 80039a0:	f003 030f 	and.w	r3, r3, #15
 80039a4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	685b      	ldr	r3, [r3, #4]
 80039aa:	019a      	lsls	r2, r3, #6
 80039ac:	693b      	ldr	r3, [r7, #16]
 80039ae:	041b      	lsls	r3, r3, #16
 80039b0:	431a      	orrs	r2, r3
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	061b      	lsls	r3, r3, #24
 80039b6:	431a      	orrs	r2, r3
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	689b      	ldr	r3, [r3, #8]
 80039bc:	071b      	lsls	r3, r3, #28
 80039be:	4958      	ldr	r1, [pc, #352]	@ (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80039c0:	4313      	orrs	r3, r2
 80039c2:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d004      	beq.n	80039dc <HAL_RCCEx_PeriphCLKConfig+0x588>
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039d6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80039da:	d00a      	beq.n	80039f2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d02e      	beq.n	8003a46 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039ec:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80039f0:	d129      	bne.n	8003a46 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80039f2:	4b4b      	ldr	r3, [pc, #300]	@ (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80039f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80039f8:	0c1b      	lsrs	r3, r3, #16
 80039fa:	f003 0303 	and.w	r3, r3, #3
 80039fe:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003a00:	4b47      	ldr	r3, [pc, #284]	@ (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003a02:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003a06:	0f1b      	lsrs	r3, r3, #28
 8003a08:	f003 0307 	and.w	r3, r3, #7
 8003a0c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	685b      	ldr	r3, [r3, #4]
 8003a12:	019a      	lsls	r2, r3, #6
 8003a14:	693b      	ldr	r3, [r7, #16]
 8003a16:	041b      	lsls	r3, r3, #16
 8003a18:	431a      	orrs	r2, r3
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	68db      	ldr	r3, [r3, #12]
 8003a1e:	061b      	lsls	r3, r3, #24
 8003a20:	431a      	orrs	r2, r3
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	071b      	lsls	r3, r3, #28
 8003a26:	493e      	ldr	r1, [pc, #248]	@ (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003a28:	4313      	orrs	r3, r2
 8003a2a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003a2e:	4b3c      	ldr	r3, [pc, #240]	@ (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003a30:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003a34:	f023 021f 	bic.w	r2, r3, #31
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a3c:	3b01      	subs	r3, #1
 8003a3e:	4938      	ldr	r1, [pc, #224]	@ (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003a40:	4313      	orrs	r3, r2
 8003a42:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d01d      	beq.n	8003a8e <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003a52:	4b33      	ldr	r3, [pc, #204]	@ (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003a54:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003a58:	0e1b      	lsrs	r3, r3, #24
 8003a5a:	f003 030f 	and.w	r3, r3, #15
 8003a5e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003a60:	4b2f      	ldr	r3, [pc, #188]	@ (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003a62:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003a66:	0f1b      	lsrs	r3, r3, #28
 8003a68:	f003 0307 	and.w	r3, r3, #7
 8003a6c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	685b      	ldr	r3, [r3, #4]
 8003a72:	019a      	lsls	r2, r3, #6
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	691b      	ldr	r3, [r3, #16]
 8003a78:	041b      	lsls	r3, r3, #16
 8003a7a:	431a      	orrs	r2, r3
 8003a7c:	693b      	ldr	r3, [r7, #16]
 8003a7e:	061b      	lsls	r3, r3, #24
 8003a80:	431a      	orrs	r2, r3
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	071b      	lsls	r3, r3, #28
 8003a86:	4926      	ldr	r1, [pc, #152]	@ (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003a88:	4313      	orrs	r3, r2
 8003a8a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d011      	beq.n	8003abe <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	685b      	ldr	r3, [r3, #4]
 8003a9e:	019a      	lsls	r2, r3, #6
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	691b      	ldr	r3, [r3, #16]
 8003aa4:	041b      	lsls	r3, r3, #16
 8003aa6:	431a      	orrs	r2, r3
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	68db      	ldr	r3, [r3, #12]
 8003aac:	061b      	lsls	r3, r3, #24
 8003aae:	431a      	orrs	r2, r3
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	689b      	ldr	r3, [r3, #8]
 8003ab4:	071b      	lsls	r3, r3, #28
 8003ab6:	491a      	ldr	r1, [pc, #104]	@ (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ab8:	4313      	orrs	r3, r2
 8003aba:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003abe:	4b18      	ldr	r3, [pc, #96]	@ (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	4a17      	ldr	r2, [pc, #92]	@ (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ac4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003ac8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003aca:	f7fe f93d 	bl	8001d48 <HAL_GetTick>
 8003ace:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003ad0:	e008      	b.n	8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003ad2:	f7fe f939 	bl	8001d48 <HAL_GetTick>
 8003ad6:	4602      	mov	r2, r0
 8003ad8:	697b      	ldr	r3, [r7, #20]
 8003ada:	1ad3      	subs	r3, r2, r3
 8003adc:	2b64      	cmp	r3, #100	@ 0x64
 8003ade:	d901      	bls.n	8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003ae0:	2303      	movs	r3, #3
 8003ae2:	e0d8      	b.n	8003c96 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003ae4:	4b0e      	ldr	r3, [pc, #56]	@ (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d0f0      	beq.n	8003ad2 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003af0:	69bb      	ldr	r3, [r7, #24]
 8003af2:	2b01      	cmp	r3, #1
 8003af4:	f040 80ce 	bne.w	8003c94 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003af8:	4b09      	ldr	r3, [pc, #36]	@ (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	4a08      	ldr	r2, [pc, #32]	@ (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003afe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003b02:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b04:	f7fe f920 	bl	8001d48 <HAL_GetTick>
 8003b08:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003b0a:	e00b      	b.n	8003b24 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003b0c:	f7fe f91c 	bl	8001d48 <HAL_GetTick>
 8003b10:	4602      	mov	r2, r0
 8003b12:	697b      	ldr	r3, [r7, #20]
 8003b14:	1ad3      	subs	r3, r2, r3
 8003b16:	2b64      	cmp	r3, #100	@ 0x64
 8003b18:	d904      	bls.n	8003b24 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003b1a:	2303      	movs	r3, #3
 8003b1c:	e0bb      	b.n	8003c96 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8003b1e:	bf00      	nop
 8003b20:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003b24:	4b5e      	ldr	r3, [pc, #376]	@ (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003b2c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003b30:	d0ec      	beq.n	8003b0c <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d003      	beq.n	8003b46 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d009      	beq.n	8003b5a <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d02e      	beq.n	8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d12a      	bne.n	8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003b5a:	4b51      	ldr	r3, [pc, #324]	@ (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003b5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b60:	0c1b      	lsrs	r3, r3, #16
 8003b62:	f003 0303 	and.w	r3, r3, #3
 8003b66:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003b68:	4b4d      	ldr	r3, [pc, #308]	@ (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003b6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b6e:	0f1b      	lsrs	r3, r3, #28
 8003b70:	f003 0307 	and.w	r3, r3, #7
 8003b74:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	695b      	ldr	r3, [r3, #20]
 8003b7a:	019a      	lsls	r2, r3, #6
 8003b7c:	693b      	ldr	r3, [r7, #16]
 8003b7e:	041b      	lsls	r3, r3, #16
 8003b80:	431a      	orrs	r2, r3
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	699b      	ldr	r3, [r3, #24]
 8003b86:	061b      	lsls	r3, r3, #24
 8003b88:	431a      	orrs	r2, r3
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	071b      	lsls	r3, r3, #28
 8003b8e:	4944      	ldr	r1, [pc, #272]	@ (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003b90:	4313      	orrs	r3, r2
 8003b92:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003b96:	4b42      	ldr	r3, [pc, #264]	@ (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003b98:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003b9c:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ba4:	3b01      	subs	r3, #1
 8003ba6:	021b      	lsls	r3, r3, #8
 8003ba8:	493d      	ldr	r1, [pc, #244]	@ (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003baa:	4313      	orrs	r3, r2
 8003bac:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d022      	beq.n	8003c02 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003bc0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003bc4:	d11d      	bne.n	8003c02 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003bc6:	4b36      	ldr	r3, [pc, #216]	@ (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003bc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003bcc:	0e1b      	lsrs	r3, r3, #24
 8003bce:	f003 030f 	and.w	r3, r3, #15
 8003bd2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003bd4:	4b32      	ldr	r3, [pc, #200]	@ (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003bd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003bda:	0f1b      	lsrs	r3, r3, #28
 8003bdc:	f003 0307 	and.w	r3, r3, #7
 8003be0:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	695b      	ldr	r3, [r3, #20]
 8003be6:	019a      	lsls	r2, r3, #6
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6a1b      	ldr	r3, [r3, #32]
 8003bec:	041b      	lsls	r3, r3, #16
 8003bee:	431a      	orrs	r2, r3
 8003bf0:	693b      	ldr	r3, [r7, #16]
 8003bf2:	061b      	lsls	r3, r3, #24
 8003bf4:	431a      	orrs	r2, r3
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	071b      	lsls	r3, r3, #28
 8003bfa:	4929      	ldr	r1, [pc, #164]	@ (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003bfc:	4313      	orrs	r3, r2
 8003bfe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f003 0308 	and.w	r3, r3, #8
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d028      	beq.n	8003c60 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003c0e:	4b24      	ldr	r3, [pc, #144]	@ (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003c10:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c14:	0e1b      	lsrs	r3, r3, #24
 8003c16:	f003 030f 	and.w	r3, r3, #15
 8003c1a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003c1c:	4b20      	ldr	r3, [pc, #128]	@ (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003c1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c22:	0c1b      	lsrs	r3, r3, #16
 8003c24:	f003 0303 	and.w	r3, r3, #3
 8003c28:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	695b      	ldr	r3, [r3, #20]
 8003c2e:	019a      	lsls	r2, r3, #6
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	041b      	lsls	r3, r3, #16
 8003c34:	431a      	orrs	r2, r3
 8003c36:	693b      	ldr	r3, [r7, #16]
 8003c38:	061b      	lsls	r3, r3, #24
 8003c3a:	431a      	orrs	r2, r3
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	69db      	ldr	r3, [r3, #28]
 8003c40:	071b      	lsls	r3, r3, #28
 8003c42:	4917      	ldr	r1, [pc, #92]	@ (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003c44:	4313      	orrs	r3, r2
 8003c46:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003c4a:	4b15      	ldr	r3, [pc, #84]	@ (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003c4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003c50:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c58:	4911      	ldr	r1, [pc, #68]	@ (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003c5a:	4313      	orrs	r3, r2
 8003c5c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003c60:	4b0f      	ldr	r3, [pc, #60]	@ (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	4a0e      	ldr	r2, [pc, #56]	@ (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003c66:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003c6a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c6c:	f7fe f86c 	bl	8001d48 <HAL_GetTick>
 8003c70:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003c72:	e008      	b.n	8003c86 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003c74:	f7fe f868 	bl	8001d48 <HAL_GetTick>
 8003c78:	4602      	mov	r2, r0
 8003c7a:	697b      	ldr	r3, [r7, #20]
 8003c7c:	1ad3      	subs	r3, r2, r3
 8003c7e:	2b64      	cmp	r3, #100	@ 0x64
 8003c80:	d901      	bls.n	8003c86 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003c82:	2303      	movs	r3, #3
 8003c84:	e007      	b.n	8003c96 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003c86:	4b06      	ldr	r3, [pc, #24]	@ (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003c8e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003c92:	d1ef      	bne.n	8003c74 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8003c94:	2300      	movs	r3, #0
}
 8003c96:	4618      	mov	r0, r3
 8003c98:	3720      	adds	r7, #32
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	bd80      	pop	{r7, pc}
 8003c9e:	bf00      	nop
 8003ca0:	40023800 	.word	0x40023800

08003ca4 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b082      	sub	sp, #8
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d101      	bne.n	8003cb6 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8003cb2:	2301      	movs	r3, #1
 8003cb4:	e01c      	b.n	8003cf0 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	795b      	ldrb	r3, [r3, #5]
 8003cba:	b2db      	uxtb	r3, r3
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d105      	bne.n	8003ccc <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8003cc6:	6878      	ldr	r0, [r7, #4]
 8003cc8:	f7fd f902 	bl	8000ed0 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2202      	movs	r2, #2
 8003cd0:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	681a      	ldr	r2, [r3, #0]
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f042 0204 	orr.w	r2, r2, #4
 8003ce0:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2201      	movs	r2, #1
 8003ce6:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2200      	movs	r2, #0
 8003cec:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 8003cee:	2300      	movs	r3, #0
}
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	3708      	adds	r7, #8
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	bd80      	pop	{r7, pc}

08003cf8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b084      	sub	sp, #16
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d101      	bne.n	8003d0a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003d06:	2301      	movs	r3, #1
 8003d08:	e09d      	b.n	8003e46 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d108      	bne.n	8003d24 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	685b      	ldr	r3, [r3, #4]
 8003d16:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003d1a:	d009      	beq.n	8003d30 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2200      	movs	r2, #0
 8003d20:	61da      	str	r2, [r3, #28]
 8003d22:	e005      	b.n	8003d30 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2200      	movs	r2, #0
 8003d28:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2200      	movs	r2, #0
 8003d34:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003d3c:	b2db      	uxtb	r3, r3
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d106      	bne.n	8003d50 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	2200      	movs	r2, #0
 8003d46:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003d4a:	6878      	ldr	r0, [r7, #4]
 8003d4c:	f7fd f8f4 	bl	8000f38 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2202      	movs	r2, #2
 8003d54:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	681a      	ldr	r2, [r3, #0]
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003d66:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	68db      	ldr	r3, [r3, #12]
 8003d6c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003d70:	d902      	bls.n	8003d78 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003d72:	2300      	movs	r3, #0
 8003d74:	60fb      	str	r3, [r7, #12]
 8003d76:	e002      	b.n	8003d7e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003d78:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003d7c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	68db      	ldr	r3, [r3, #12]
 8003d82:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8003d86:	d007      	beq.n	8003d98 <HAL_SPI_Init+0xa0>
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	68db      	ldr	r3, [r3, #12]
 8003d8c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003d90:	d002      	beq.n	8003d98 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	2200      	movs	r2, #0
 8003d96:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	685b      	ldr	r3, [r3, #4]
 8003d9c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	689b      	ldr	r3, [r3, #8]
 8003da4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003da8:	431a      	orrs	r2, r3
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	691b      	ldr	r3, [r3, #16]
 8003dae:	f003 0302 	and.w	r3, r3, #2
 8003db2:	431a      	orrs	r2, r3
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	695b      	ldr	r3, [r3, #20]
 8003db8:	f003 0301 	and.w	r3, r3, #1
 8003dbc:	431a      	orrs	r2, r3
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	699b      	ldr	r3, [r3, #24]
 8003dc2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003dc6:	431a      	orrs	r2, r3
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	69db      	ldr	r3, [r3, #28]
 8003dcc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003dd0:	431a      	orrs	r2, r3
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6a1b      	ldr	r3, [r3, #32]
 8003dd6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003dda:	ea42 0103 	orr.w	r1, r2, r3
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003de2:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	430a      	orrs	r2, r1
 8003dec:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	699b      	ldr	r3, [r3, #24]
 8003df2:	0c1b      	lsrs	r3, r3, #16
 8003df4:	f003 0204 	and.w	r2, r3, #4
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dfc:	f003 0310 	and.w	r3, r3, #16
 8003e00:	431a      	orrs	r2, r3
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e06:	f003 0308 	and.w	r3, r3, #8
 8003e0a:	431a      	orrs	r2, r3
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	68db      	ldr	r3, [r3, #12]
 8003e10:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8003e14:	ea42 0103 	orr.w	r1, r2, r3
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	430a      	orrs	r2, r1
 8003e24:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	69da      	ldr	r2, [r3, #28]
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003e34:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	2200      	movs	r2, #0
 8003e3a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2201      	movs	r2, #1
 8003e40:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8003e44:	2300      	movs	r3, #0
}
 8003e46:	4618      	mov	r0, r3
 8003e48:	3710      	adds	r7, #16
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	bd80      	pop	{r7, pc}

08003e4e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e4e:	b580      	push	{r7, lr}
 8003e50:	b088      	sub	sp, #32
 8003e52:	af00      	add	r7, sp, #0
 8003e54:	60f8      	str	r0, [r7, #12]
 8003e56:	60b9      	str	r1, [r7, #8]
 8003e58:	603b      	str	r3, [r7, #0]
 8003e5a:	4613      	mov	r3, r2
 8003e5c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003e5e:	2300      	movs	r3, #0
 8003e60:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003e68:	2b01      	cmp	r3, #1
 8003e6a:	d101      	bne.n	8003e70 <HAL_SPI_Transmit+0x22>
 8003e6c:	2302      	movs	r3, #2
 8003e6e:	e15f      	b.n	8004130 <HAL_SPI_Transmit+0x2e2>
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	2201      	movs	r2, #1
 8003e74:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003e78:	f7fd ff66 	bl	8001d48 <HAL_GetTick>
 8003e7c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003e7e:	88fb      	ldrh	r3, [r7, #6]
 8003e80:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003e88:	b2db      	uxtb	r3, r3
 8003e8a:	2b01      	cmp	r3, #1
 8003e8c:	d002      	beq.n	8003e94 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003e8e:	2302      	movs	r3, #2
 8003e90:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003e92:	e148      	b.n	8004126 <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8003e94:	68bb      	ldr	r3, [r7, #8]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d002      	beq.n	8003ea0 <HAL_SPI_Transmit+0x52>
 8003e9a:	88fb      	ldrh	r3, [r7, #6]
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d102      	bne.n	8003ea6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003ea0:	2301      	movs	r3, #1
 8003ea2:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003ea4:	e13f      	b.n	8004126 <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	2203      	movs	r2, #3
 8003eaa:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	68ba      	ldr	r2, [r7, #8]
 8003eb8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	88fa      	ldrh	r2, [r7, #6]
 8003ebe:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	88fa      	ldrh	r2, [r7, #6]
 8003ec4:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	2200      	movs	r2, #0
 8003eca:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	2200      	movs	r2, #0
 8003ed0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	2200      	movs	r2, #0
 8003ee0:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	689b      	ldr	r3, [r3, #8]
 8003eec:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003ef0:	d10f      	bne.n	8003f12 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	681a      	ldr	r2, [r3, #0]
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003f00:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	681a      	ldr	r2, [r3, #0]
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003f10:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f1c:	2b40      	cmp	r3, #64	@ 0x40
 8003f1e:	d007      	beq.n	8003f30 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	681a      	ldr	r2, [r3, #0]
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003f2e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	68db      	ldr	r3, [r3, #12]
 8003f34:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003f38:	d94f      	bls.n	8003fda <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	685b      	ldr	r3, [r3, #4]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d002      	beq.n	8003f48 <HAL_SPI_Transmit+0xfa>
 8003f42:	8afb      	ldrh	r3, [r7, #22]
 8003f44:	2b01      	cmp	r3, #1
 8003f46:	d142      	bne.n	8003fce <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f4c:	881a      	ldrh	r2, [r3, #0]
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f58:	1c9a      	adds	r2, r3, #2
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003f62:	b29b      	uxth	r3, r3
 8003f64:	3b01      	subs	r3, #1
 8003f66:	b29a      	uxth	r2, r3
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003f6c:	e02f      	b.n	8003fce <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	689b      	ldr	r3, [r3, #8]
 8003f74:	f003 0302 	and.w	r3, r3, #2
 8003f78:	2b02      	cmp	r3, #2
 8003f7a:	d112      	bne.n	8003fa2 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f80:	881a      	ldrh	r2, [r3, #0]
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f8c:	1c9a      	adds	r2, r3, #2
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003f96:	b29b      	uxth	r3, r3
 8003f98:	3b01      	subs	r3, #1
 8003f9a:	b29a      	uxth	r2, r3
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003fa0:	e015      	b.n	8003fce <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003fa2:	f7fd fed1 	bl	8001d48 <HAL_GetTick>
 8003fa6:	4602      	mov	r2, r0
 8003fa8:	69bb      	ldr	r3, [r7, #24]
 8003faa:	1ad3      	subs	r3, r2, r3
 8003fac:	683a      	ldr	r2, [r7, #0]
 8003fae:	429a      	cmp	r2, r3
 8003fb0:	d803      	bhi.n	8003fba <HAL_SPI_Transmit+0x16c>
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fb8:	d102      	bne.n	8003fc0 <HAL_SPI_Transmit+0x172>
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d106      	bne.n	8003fce <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8003fc0:	2303      	movs	r3, #3
 8003fc2:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	2201      	movs	r2, #1
 8003fc8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8003fcc:	e0ab      	b.n	8004126 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003fd2:	b29b      	uxth	r3, r3
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d1ca      	bne.n	8003f6e <HAL_SPI_Transmit+0x120>
 8003fd8:	e080      	b.n	80040dc <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	685b      	ldr	r3, [r3, #4]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d002      	beq.n	8003fe8 <HAL_SPI_Transmit+0x19a>
 8003fe2:	8afb      	ldrh	r3, [r7, #22]
 8003fe4:	2b01      	cmp	r3, #1
 8003fe6:	d174      	bne.n	80040d2 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003fec:	b29b      	uxth	r3, r3
 8003fee:	2b01      	cmp	r3, #1
 8003ff0:	d912      	bls.n	8004018 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ff6:	881a      	ldrh	r2, [r3, #0]
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004002:	1c9a      	adds	r2, r3, #2
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800400c:	b29b      	uxth	r3, r3
 800400e:	3b02      	subs	r3, #2
 8004010:	b29a      	uxth	r2, r3
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004016:	e05c      	b.n	80040d2 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	330c      	adds	r3, #12
 8004022:	7812      	ldrb	r2, [r2, #0]
 8004024:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800402a:	1c5a      	adds	r2, r3, #1
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004034:	b29b      	uxth	r3, r3
 8004036:	3b01      	subs	r3, #1
 8004038:	b29a      	uxth	r2, r3
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800403e:	e048      	b.n	80040d2 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	689b      	ldr	r3, [r3, #8]
 8004046:	f003 0302 	and.w	r3, r3, #2
 800404a:	2b02      	cmp	r3, #2
 800404c:	d12b      	bne.n	80040a6 <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004052:	b29b      	uxth	r3, r3
 8004054:	2b01      	cmp	r3, #1
 8004056:	d912      	bls.n	800407e <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800405c:	881a      	ldrh	r2, [r3, #0]
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004068:	1c9a      	adds	r2, r3, #2
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004072:	b29b      	uxth	r3, r3
 8004074:	3b02      	subs	r3, #2
 8004076:	b29a      	uxth	r2, r3
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800407c:	e029      	b.n	80040d2 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	330c      	adds	r3, #12
 8004088:	7812      	ldrb	r2, [r2, #0]
 800408a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004090:	1c5a      	adds	r2, r3, #1
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800409a:	b29b      	uxth	r3, r3
 800409c:	3b01      	subs	r3, #1
 800409e:	b29a      	uxth	r2, r3
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80040a4:	e015      	b.n	80040d2 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80040a6:	f7fd fe4f 	bl	8001d48 <HAL_GetTick>
 80040aa:	4602      	mov	r2, r0
 80040ac:	69bb      	ldr	r3, [r7, #24]
 80040ae:	1ad3      	subs	r3, r2, r3
 80040b0:	683a      	ldr	r2, [r7, #0]
 80040b2:	429a      	cmp	r2, r3
 80040b4:	d803      	bhi.n	80040be <HAL_SPI_Transmit+0x270>
 80040b6:	683b      	ldr	r3, [r7, #0]
 80040b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040bc:	d102      	bne.n	80040c4 <HAL_SPI_Transmit+0x276>
 80040be:	683b      	ldr	r3, [r7, #0]
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d106      	bne.n	80040d2 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 80040c4:	2303      	movs	r3, #3
 80040c6:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	2201      	movs	r2, #1
 80040cc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 80040d0:	e029      	b.n	8004126 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80040d6:	b29b      	uxth	r3, r3
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d1b1      	bne.n	8004040 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80040dc:	69ba      	ldr	r2, [r7, #24]
 80040de:	6839      	ldr	r1, [r7, #0]
 80040e0:	68f8      	ldr	r0, [r7, #12]
 80040e2:	f000 f947 	bl	8004374 <SPI_EndRxTxTransaction>
 80040e6:	4603      	mov	r3, r0
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d002      	beq.n	80040f2 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	2220      	movs	r2, #32
 80040f0:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	689b      	ldr	r3, [r3, #8]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d10a      	bne.n	8004110 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80040fa:	2300      	movs	r3, #0
 80040fc:	613b      	str	r3, [r7, #16]
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	68db      	ldr	r3, [r3, #12]
 8004104:	613b      	str	r3, [r7, #16]
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	689b      	ldr	r3, [r3, #8]
 800410c:	613b      	str	r3, [r7, #16]
 800410e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004114:	2b00      	cmp	r3, #0
 8004116:	d002      	beq.n	800411e <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8004118:	2301      	movs	r3, #1
 800411a:	77fb      	strb	r3, [r7, #31]
 800411c:	e003      	b.n	8004126 <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	2201      	movs	r2, #1
 8004122:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	2200      	movs	r2, #0
 800412a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 800412e:	7ffb      	ldrb	r3, [r7, #31]
}
 8004130:	4618      	mov	r0, r3
 8004132:	3720      	adds	r7, #32
 8004134:	46bd      	mov	sp, r7
 8004136:	bd80      	pop	{r7, pc}

08004138 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004138:	b580      	push	{r7, lr}
 800413a:	b088      	sub	sp, #32
 800413c:	af00      	add	r7, sp, #0
 800413e:	60f8      	str	r0, [r7, #12]
 8004140:	60b9      	str	r1, [r7, #8]
 8004142:	603b      	str	r3, [r7, #0]
 8004144:	4613      	mov	r3, r2
 8004146:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004148:	f7fd fdfe 	bl	8001d48 <HAL_GetTick>
 800414c:	4602      	mov	r2, r0
 800414e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004150:	1a9b      	subs	r3, r3, r2
 8004152:	683a      	ldr	r2, [r7, #0]
 8004154:	4413      	add	r3, r2
 8004156:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004158:	f7fd fdf6 	bl	8001d48 <HAL_GetTick>
 800415c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800415e:	4b39      	ldr	r3, [pc, #228]	@ (8004244 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	015b      	lsls	r3, r3, #5
 8004164:	0d1b      	lsrs	r3, r3, #20
 8004166:	69fa      	ldr	r2, [r7, #28]
 8004168:	fb02 f303 	mul.w	r3, r2, r3
 800416c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800416e:	e054      	b.n	800421a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004176:	d050      	beq.n	800421a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004178:	f7fd fde6 	bl	8001d48 <HAL_GetTick>
 800417c:	4602      	mov	r2, r0
 800417e:	69bb      	ldr	r3, [r7, #24]
 8004180:	1ad3      	subs	r3, r2, r3
 8004182:	69fa      	ldr	r2, [r7, #28]
 8004184:	429a      	cmp	r2, r3
 8004186:	d902      	bls.n	800418e <SPI_WaitFlagStateUntilTimeout+0x56>
 8004188:	69fb      	ldr	r3, [r7, #28]
 800418a:	2b00      	cmp	r3, #0
 800418c:	d13d      	bne.n	800420a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	685a      	ldr	r2, [r3, #4]
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800419c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	685b      	ldr	r3, [r3, #4]
 80041a2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80041a6:	d111      	bne.n	80041cc <SPI_WaitFlagStateUntilTimeout+0x94>
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	689b      	ldr	r3, [r3, #8]
 80041ac:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80041b0:	d004      	beq.n	80041bc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	689b      	ldr	r3, [r3, #8]
 80041b6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80041ba:	d107      	bne.n	80041cc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	681a      	ldr	r2, [r3, #0]
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80041ca:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041d0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80041d4:	d10f      	bne.n	80041f6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	681a      	ldr	r2, [r3, #0]
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80041e4:	601a      	str	r2, [r3, #0]
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	681a      	ldr	r2, [r3, #0]
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80041f4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	2201      	movs	r2, #1
 80041fa:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	2200      	movs	r2, #0
 8004202:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8004206:	2303      	movs	r3, #3
 8004208:	e017      	b.n	800423a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800420a:	697b      	ldr	r3, [r7, #20]
 800420c:	2b00      	cmp	r3, #0
 800420e:	d101      	bne.n	8004214 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004210:	2300      	movs	r3, #0
 8004212:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004214:	697b      	ldr	r3, [r7, #20]
 8004216:	3b01      	subs	r3, #1
 8004218:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	689a      	ldr	r2, [r3, #8]
 8004220:	68bb      	ldr	r3, [r7, #8]
 8004222:	4013      	ands	r3, r2
 8004224:	68ba      	ldr	r2, [r7, #8]
 8004226:	429a      	cmp	r2, r3
 8004228:	bf0c      	ite	eq
 800422a:	2301      	moveq	r3, #1
 800422c:	2300      	movne	r3, #0
 800422e:	b2db      	uxtb	r3, r3
 8004230:	461a      	mov	r2, r3
 8004232:	79fb      	ldrb	r3, [r7, #7]
 8004234:	429a      	cmp	r2, r3
 8004236:	d19b      	bne.n	8004170 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004238:	2300      	movs	r3, #0
}
 800423a:	4618      	mov	r0, r3
 800423c:	3720      	adds	r7, #32
 800423e:	46bd      	mov	sp, r7
 8004240:	bd80      	pop	{r7, pc}
 8004242:	bf00      	nop
 8004244:	20000008 	.word	0x20000008

08004248 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004248:	b580      	push	{r7, lr}
 800424a:	b08a      	sub	sp, #40	@ 0x28
 800424c:	af00      	add	r7, sp, #0
 800424e:	60f8      	str	r0, [r7, #12]
 8004250:	60b9      	str	r1, [r7, #8]
 8004252:	607a      	str	r2, [r7, #4]
 8004254:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004256:	2300      	movs	r3, #0
 8004258:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800425a:	f7fd fd75 	bl	8001d48 <HAL_GetTick>
 800425e:	4602      	mov	r2, r0
 8004260:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004262:	1a9b      	subs	r3, r3, r2
 8004264:	683a      	ldr	r2, [r7, #0]
 8004266:	4413      	add	r3, r2
 8004268:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800426a:	f7fd fd6d 	bl	8001d48 <HAL_GetTick>
 800426e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	330c      	adds	r3, #12
 8004276:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004278:	4b3d      	ldr	r3, [pc, #244]	@ (8004370 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800427a:	681a      	ldr	r2, [r3, #0]
 800427c:	4613      	mov	r3, r2
 800427e:	009b      	lsls	r3, r3, #2
 8004280:	4413      	add	r3, r2
 8004282:	00da      	lsls	r2, r3, #3
 8004284:	1ad3      	subs	r3, r2, r3
 8004286:	0d1b      	lsrs	r3, r3, #20
 8004288:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800428a:	fb02 f303 	mul.w	r3, r2, r3
 800428e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004290:	e060      	b.n	8004354 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004292:	68bb      	ldr	r3, [r7, #8]
 8004294:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8004298:	d107      	bne.n	80042aa <SPI_WaitFifoStateUntilTimeout+0x62>
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	2b00      	cmp	r3, #0
 800429e:	d104      	bne.n	80042aa <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80042a0:	69fb      	ldr	r3, [r7, #28]
 80042a2:	781b      	ldrb	r3, [r3, #0]
 80042a4:	b2db      	uxtb	r3, r3
 80042a6:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80042a8:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042b0:	d050      	beq.n	8004354 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80042b2:	f7fd fd49 	bl	8001d48 <HAL_GetTick>
 80042b6:	4602      	mov	r2, r0
 80042b8:	6a3b      	ldr	r3, [r7, #32]
 80042ba:	1ad3      	subs	r3, r2, r3
 80042bc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80042be:	429a      	cmp	r2, r3
 80042c0:	d902      	bls.n	80042c8 <SPI_WaitFifoStateUntilTimeout+0x80>
 80042c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d13d      	bne.n	8004344 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	685a      	ldr	r2, [r3, #4]
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80042d6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	685b      	ldr	r3, [r3, #4]
 80042dc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80042e0:	d111      	bne.n	8004306 <SPI_WaitFifoStateUntilTimeout+0xbe>
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	689b      	ldr	r3, [r3, #8]
 80042e6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80042ea:	d004      	beq.n	80042f6 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	689b      	ldr	r3, [r3, #8]
 80042f0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80042f4:	d107      	bne.n	8004306 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	681a      	ldr	r2, [r3, #0]
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004304:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800430a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800430e:	d10f      	bne.n	8004330 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	681a      	ldr	r2, [r3, #0]
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800431e:	601a      	str	r2, [r3, #0]
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	681a      	ldr	r2, [r3, #0]
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800432e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	2201      	movs	r2, #1
 8004334:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	2200      	movs	r2, #0
 800433c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8004340:	2303      	movs	r3, #3
 8004342:	e010      	b.n	8004366 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004344:	69bb      	ldr	r3, [r7, #24]
 8004346:	2b00      	cmp	r3, #0
 8004348:	d101      	bne.n	800434e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800434a:	2300      	movs	r3, #0
 800434c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800434e:	69bb      	ldr	r3, [r7, #24]
 8004350:	3b01      	subs	r3, #1
 8004352:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	689a      	ldr	r2, [r3, #8]
 800435a:	68bb      	ldr	r3, [r7, #8]
 800435c:	4013      	ands	r3, r2
 800435e:	687a      	ldr	r2, [r7, #4]
 8004360:	429a      	cmp	r2, r3
 8004362:	d196      	bne.n	8004292 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8004364:	2300      	movs	r3, #0
}
 8004366:	4618      	mov	r0, r3
 8004368:	3728      	adds	r7, #40	@ 0x28
 800436a:	46bd      	mov	sp, r7
 800436c:	bd80      	pop	{r7, pc}
 800436e:	bf00      	nop
 8004370:	20000008 	.word	0x20000008

08004374 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004374:	b580      	push	{r7, lr}
 8004376:	b088      	sub	sp, #32
 8004378:	af02      	add	r7, sp, #8
 800437a:	60f8      	str	r0, [r7, #12]
 800437c:	60b9      	str	r1, [r7, #8]
 800437e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	9300      	str	r3, [sp, #0]
 8004384:	68bb      	ldr	r3, [r7, #8]
 8004386:	2200      	movs	r2, #0
 8004388:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 800438c:	68f8      	ldr	r0, [r7, #12]
 800438e:	f7ff ff5b 	bl	8004248 <SPI_WaitFifoStateUntilTimeout>
 8004392:	4603      	mov	r3, r0
 8004394:	2b00      	cmp	r3, #0
 8004396:	d007      	beq.n	80043a8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800439c:	f043 0220 	orr.w	r2, r3, #32
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80043a4:	2303      	movs	r3, #3
 80043a6:	e046      	b.n	8004436 <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80043a8:	4b25      	ldr	r3, [pc, #148]	@ (8004440 <SPI_EndRxTxTransaction+0xcc>)
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	4a25      	ldr	r2, [pc, #148]	@ (8004444 <SPI_EndRxTxTransaction+0xd0>)
 80043ae:	fba2 2303 	umull	r2, r3, r2, r3
 80043b2:	0d5b      	lsrs	r3, r3, #21
 80043b4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80043b8:	fb02 f303 	mul.w	r3, r2, r3
 80043bc:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	685b      	ldr	r3, [r3, #4]
 80043c2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80043c6:	d112      	bne.n	80043ee <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	9300      	str	r3, [sp, #0]
 80043cc:	68bb      	ldr	r3, [r7, #8]
 80043ce:	2200      	movs	r2, #0
 80043d0:	2180      	movs	r1, #128	@ 0x80
 80043d2:	68f8      	ldr	r0, [r7, #12]
 80043d4:	f7ff feb0 	bl	8004138 <SPI_WaitFlagStateUntilTimeout>
 80043d8:	4603      	mov	r3, r0
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d016      	beq.n	800440c <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80043e2:	f043 0220 	orr.w	r2, r3, #32
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 80043ea:	2303      	movs	r3, #3
 80043ec:	e023      	b.n	8004436 <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80043ee:	697b      	ldr	r3, [r7, #20]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d00a      	beq.n	800440a <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 80043f4:	697b      	ldr	r3, [r7, #20]
 80043f6:	3b01      	subs	r3, #1
 80043f8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	689b      	ldr	r3, [r3, #8]
 8004400:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004404:	2b80      	cmp	r3, #128	@ 0x80
 8004406:	d0f2      	beq.n	80043ee <SPI_EndRxTxTransaction+0x7a>
 8004408:	e000      	b.n	800440c <SPI_EndRxTxTransaction+0x98>
        break;
 800440a:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	9300      	str	r3, [sp, #0]
 8004410:	68bb      	ldr	r3, [r7, #8]
 8004412:	2200      	movs	r2, #0
 8004414:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8004418:	68f8      	ldr	r0, [r7, #12]
 800441a:	f7ff ff15 	bl	8004248 <SPI_WaitFifoStateUntilTimeout>
 800441e:	4603      	mov	r3, r0
 8004420:	2b00      	cmp	r3, #0
 8004422:	d007      	beq.n	8004434 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004428:	f043 0220 	orr.w	r2, r3, #32
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004430:	2303      	movs	r3, #3
 8004432:	e000      	b.n	8004436 <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 8004434:	2300      	movs	r3, #0
}
 8004436:	4618      	mov	r0, r3
 8004438:	3718      	adds	r7, #24
 800443a:	46bd      	mov	sp, r7
 800443c:	bd80      	pop	{r7, pc}
 800443e:	bf00      	nop
 8004440:	20000008 	.word	0x20000008
 8004444:	165e9f81 	.word	0x165e9f81

08004448 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004448:	b580      	push	{r7, lr}
 800444a:	b082      	sub	sp, #8
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2b00      	cmp	r3, #0
 8004454:	d101      	bne.n	800445a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004456:	2301      	movs	r3, #1
 8004458:	e049      	b.n	80044ee <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004460:	b2db      	uxtb	r3, r3
 8004462:	2b00      	cmp	r3, #0
 8004464:	d106      	bne.n	8004474 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	2200      	movs	r2, #0
 800446a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800446e:	6878      	ldr	r0, [r7, #4]
 8004470:	f7fc fda6 	bl	8000fc0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2202      	movs	r2, #2
 8004478:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681a      	ldr	r2, [r3, #0]
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	3304      	adds	r3, #4
 8004484:	4619      	mov	r1, r3
 8004486:	4610      	mov	r0, r2
 8004488:	f000 fb6e 	bl	8004b68 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2201      	movs	r2, #1
 8004490:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2201      	movs	r2, #1
 8004498:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2201      	movs	r2, #1
 80044a0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2201      	movs	r2, #1
 80044a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2201      	movs	r2, #1
 80044b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2201      	movs	r2, #1
 80044b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2201      	movs	r2, #1
 80044c0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2201      	movs	r2, #1
 80044c8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2201      	movs	r2, #1
 80044d0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2201      	movs	r2, #1
 80044d8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2201      	movs	r2, #1
 80044e0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2201      	movs	r2, #1
 80044e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80044ec:	2300      	movs	r3, #0
}
 80044ee:	4618      	mov	r0, r3
 80044f0:	3708      	adds	r7, #8
 80044f2:	46bd      	mov	sp, r7
 80044f4:	bd80      	pop	{r7, pc}

080044f6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80044f6:	b580      	push	{r7, lr}
 80044f8:	b082      	sub	sp, #8
 80044fa:	af00      	add	r7, sp, #0
 80044fc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	2b00      	cmp	r3, #0
 8004502:	d101      	bne.n	8004508 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004504:	2301      	movs	r3, #1
 8004506:	e049      	b.n	800459c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800450e:	b2db      	uxtb	r3, r3
 8004510:	2b00      	cmp	r3, #0
 8004512:	d106      	bne.n	8004522 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2200      	movs	r2, #0
 8004518:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800451c:	6878      	ldr	r0, [r7, #4]
 800451e:	f000 f841 	bl	80045a4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	2202      	movs	r2, #2
 8004526:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681a      	ldr	r2, [r3, #0]
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	3304      	adds	r3, #4
 8004532:	4619      	mov	r1, r3
 8004534:	4610      	mov	r0, r2
 8004536:	f000 fb17 	bl	8004b68 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	2201      	movs	r2, #1
 800453e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	2201      	movs	r2, #1
 8004546:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	2201      	movs	r2, #1
 800454e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2201      	movs	r2, #1
 8004556:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	2201      	movs	r2, #1
 800455e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	2201      	movs	r2, #1
 8004566:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	2201      	movs	r2, #1
 800456e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	2201      	movs	r2, #1
 8004576:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	2201      	movs	r2, #1
 800457e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	2201      	movs	r2, #1
 8004586:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	2201      	movs	r2, #1
 800458e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	2201      	movs	r2, #1
 8004596:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800459a:	2300      	movs	r3, #0
}
 800459c:	4618      	mov	r0, r3
 800459e:	3708      	adds	r7, #8
 80045a0:	46bd      	mov	sp, r7
 80045a2:	bd80      	pop	{r7, pc}

080045a4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80045a4:	b480      	push	{r7}
 80045a6:	b083      	sub	sp, #12
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80045ac:	bf00      	nop
 80045ae:	370c      	adds	r7, #12
 80045b0:	46bd      	mov	sp, r7
 80045b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b6:	4770      	bx	lr

080045b8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80045b8:	b580      	push	{r7, lr}
 80045ba:	b084      	sub	sp, #16
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
 80045c0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80045c2:	683b      	ldr	r3, [r7, #0]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d109      	bne.n	80045dc <HAL_TIM_PWM_Start+0x24>
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80045ce:	b2db      	uxtb	r3, r3
 80045d0:	2b01      	cmp	r3, #1
 80045d2:	bf14      	ite	ne
 80045d4:	2301      	movne	r3, #1
 80045d6:	2300      	moveq	r3, #0
 80045d8:	b2db      	uxtb	r3, r3
 80045da:	e03c      	b.n	8004656 <HAL_TIM_PWM_Start+0x9e>
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	2b04      	cmp	r3, #4
 80045e0:	d109      	bne.n	80045f6 <HAL_TIM_PWM_Start+0x3e>
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80045e8:	b2db      	uxtb	r3, r3
 80045ea:	2b01      	cmp	r3, #1
 80045ec:	bf14      	ite	ne
 80045ee:	2301      	movne	r3, #1
 80045f0:	2300      	moveq	r3, #0
 80045f2:	b2db      	uxtb	r3, r3
 80045f4:	e02f      	b.n	8004656 <HAL_TIM_PWM_Start+0x9e>
 80045f6:	683b      	ldr	r3, [r7, #0]
 80045f8:	2b08      	cmp	r3, #8
 80045fa:	d109      	bne.n	8004610 <HAL_TIM_PWM_Start+0x58>
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004602:	b2db      	uxtb	r3, r3
 8004604:	2b01      	cmp	r3, #1
 8004606:	bf14      	ite	ne
 8004608:	2301      	movne	r3, #1
 800460a:	2300      	moveq	r3, #0
 800460c:	b2db      	uxtb	r3, r3
 800460e:	e022      	b.n	8004656 <HAL_TIM_PWM_Start+0x9e>
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	2b0c      	cmp	r3, #12
 8004614:	d109      	bne.n	800462a <HAL_TIM_PWM_Start+0x72>
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800461c:	b2db      	uxtb	r3, r3
 800461e:	2b01      	cmp	r3, #1
 8004620:	bf14      	ite	ne
 8004622:	2301      	movne	r3, #1
 8004624:	2300      	moveq	r3, #0
 8004626:	b2db      	uxtb	r3, r3
 8004628:	e015      	b.n	8004656 <HAL_TIM_PWM_Start+0x9e>
 800462a:	683b      	ldr	r3, [r7, #0]
 800462c:	2b10      	cmp	r3, #16
 800462e:	d109      	bne.n	8004644 <HAL_TIM_PWM_Start+0x8c>
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004636:	b2db      	uxtb	r3, r3
 8004638:	2b01      	cmp	r3, #1
 800463a:	bf14      	ite	ne
 800463c:	2301      	movne	r3, #1
 800463e:	2300      	moveq	r3, #0
 8004640:	b2db      	uxtb	r3, r3
 8004642:	e008      	b.n	8004656 <HAL_TIM_PWM_Start+0x9e>
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800464a:	b2db      	uxtb	r3, r3
 800464c:	2b01      	cmp	r3, #1
 800464e:	bf14      	ite	ne
 8004650:	2301      	movne	r3, #1
 8004652:	2300      	moveq	r3, #0
 8004654:	b2db      	uxtb	r3, r3
 8004656:	2b00      	cmp	r3, #0
 8004658:	d001      	beq.n	800465e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800465a:	2301      	movs	r3, #1
 800465c:	e092      	b.n	8004784 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	2b00      	cmp	r3, #0
 8004662:	d104      	bne.n	800466e <HAL_TIM_PWM_Start+0xb6>
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2202      	movs	r2, #2
 8004668:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800466c:	e023      	b.n	80046b6 <HAL_TIM_PWM_Start+0xfe>
 800466e:	683b      	ldr	r3, [r7, #0]
 8004670:	2b04      	cmp	r3, #4
 8004672:	d104      	bne.n	800467e <HAL_TIM_PWM_Start+0xc6>
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2202      	movs	r2, #2
 8004678:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800467c:	e01b      	b.n	80046b6 <HAL_TIM_PWM_Start+0xfe>
 800467e:	683b      	ldr	r3, [r7, #0]
 8004680:	2b08      	cmp	r3, #8
 8004682:	d104      	bne.n	800468e <HAL_TIM_PWM_Start+0xd6>
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2202      	movs	r2, #2
 8004688:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800468c:	e013      	b.n	80046b6 <HAL_TIM_PWM_Start+0xfe>
 800468e:	683b      	ldr	r3, [r7, #0]
 8004690:	2b0c      	cmp	r3, #12
 8004692:	d104      	bne.n	800469e <HAL_TIM_PWM_Start+0xe6>
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2202      	movs	r2, #2
 8004698:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800469c:	e00b      	b.n	80046b6 <HAL_TIM_PWM_Start+0xfe>
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	2b10      	cmp	r3, #16
 80046a2:	d104      	bne.n	80046ae <HAL_TIM_PWM_Start+0xf6>
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2202      	movs	r2, #2
 80046a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80046ac:	e003      	b.n	80046b6 <HAL_TIM_PWM_Start+0xfe>
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	2202      	movs	r2, #2
 80046b2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	2201      	movs	r2, #1
 80046bc:	6839      	ldr	r1, [r7, #0]
 80046be:	4618      	mov	r0, r3
 80046c0:	f000 fdf6 	bl	80052b0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	4a30      	ldr	r2, [pc, #192]	@ (800478c <HAL_TIM_PWM_Start+0x1d4>)
 80046ca:	4293      	cmp	r3, r2
 80046cc:	d004      	beq.n	80046d8 <HAL_TIM_PWM_Start+0x120>
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	4a2f      	ldr	r2, [pc, #188]	@ (8004790 <HAL_TIM_PWM_Start+0x1d8>)
 80046d4:	4293      	cmp	r3, r2
 80046d6:	d101      	bne.n	80046dc <HAL_TIM_PWM_Start+0x124>
 80046d8:	2301      	movs	r3, #1
 80046da:	e000      	b.n	80046de <HAL_TIM_PWM_Start+0x126>
 80046dc:	2300      	movs	r3, #0
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d007      	beq.n	80046f2 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80046f0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	4a25      	ldr	r2, [pc, #148]	@ (800478c <HAL_TIM_PWM_Start+0x1d4>)
 80046f8:	4293      	cmp	r3, r2
 80046fa:	d022      	beq.n	8004742 <HAL_TIM_PWM_Start+0x18a>
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004704:	d01d      	beq.n	8004742 <HAL_TIM_PWM_Start+0x18a>
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	4a22      	ldr	r2, [pc, #136]	@ (8004794 <HAL_TIM_PWM_Start+0x1dc>)
 800470c:	4293      	cmp	r3, r2
 800470e:	d018      	beq.n	8004742 <HAL_TIM_PWM_Start+0x18a>
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	4a20      	ldr	r2, [pc, #128]	@ (8004798 <HAL_TIM_PWM_Start+0x1e0>)
 8004716:	4293      	cmp	r3, r2
 8004718:	d013      	beq.n	8004742 <HAL_TIM_PWM_Start+0x18a>
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	4a1f      	ldr	r2, [pc, #124]	@ (800479c <HAL_TIM_PWM_Start+0x1e4>)
 8004720:	4293      	cmp	r3, r2
 8004722:	d00e      	beq.n	8004742 <HAL_TIM_PWM_Start+0x18a>
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	4a19      	ldr	r2, [pc, #100]	@ (8004790 <HAL_TIM_PWM_Start+0x1d8>)
 800472a:	4293      	cmp	r3, r2
 800472c:	d009      	beq.n	8004742 <HAL_TIM_PWM_Start+0x18a>
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	4a1b      	ldr	r2, [pc, #108]	@ (80047a0 <HAL_TIM_PWM_Start+0x1e8>)
 8004734:	4293      	cmp	r3, r2
 8004736:	d004      	beq.n	8004742 <HAL_TIM_PWM_Start+0x18a>
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	4a19      	ldr	r2, [pc, #100]	@ (80047a4 <HAL_TIM_PWM_Start+0x1ec>)
 800473e:	4293      	cmp	r3, r2
 8004740:	d115      	bne.n	800476e <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	689a      	ldr	r2, [r3, #8]
 8004748:	4b17      	ldr	r3, [pc, #92]	@ (80047a8 <HAL_TIM_PWM_Start+0x1f0>)
 800474a:	4013      	ands	r3, r2
 800474c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	2b06      	cmp	r3, #6
 8004752:	d015      	beq.n	8004780 <HAL_TIM_PWM_Start+0x1c8>
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800475a:	d011      	beq.n	8004780 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	681a      	ldr	r2, [r3, #0]
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f042 0201 	orr.w	r2, r2, #1
 800476a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800476c:	e008      	b.n	8004780 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	681a      	ldr	r2, [r3, #0]
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f042 0201 	orr.w	r2, r2, #1
 800477c:	601a      	str	r2, [r3, #0]
 800477e:	e000      	b.n	8004782 <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004780:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004782:	2300      	movs	r3, #0
}
 8004784:	4618      	mov	r0, r3
 8004786:	3710      	adds	r7, #16
 8004788:	46bd      	mov	sp, r7
 800478a:	bd80      	pop	{r7, pc}
 800478c:	40010000 	.word	0x40010000
 8004790:	40010400 	.word	0x40010400
 8004794:	40000400 	.word	0x40000400
 8004798:	40000800 	.word	0x40000800
 800479c:	40000c00 	.word	0x40000c00
 80047a0:	40014000 	.word	0x40014000
 80047a4:	40001800 	.word	0x40001800
 80047a8:	00010007 	.word	0x00010007

080047ac <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80047ac:	b580      	push	{r7, lr}
 80047ae:	b086      	sub	sp, #24
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	60f8      	str	r0, [r7, #12]
 80047b4:	60b9      	str	r1, [r7, #8]
 80047b6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80047b8:	2300      	movs	r3, #0
 80047ba:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80047c2:	2b01      	cmp	r3, #1
 80047c4:	d101      	bne.n	80047ca <HAL_TIM_PWM_ConfigChannel+0x1e>
 80047c6:	2302      	movs	r3, #2
 80047c8:	e0ff      	b.n	80049ca <HAL_TIM_PWM_ConfigChannel+0x21e>
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	2201      	movs	r2, #1
 80047ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	2b14      	cmp	r3, #20
 80047d6:	f200 80f0 	bhi.w	80049ba <HAL_TIM_PWM_ConfigChannel+0x20e>
 80047da:	a201      	add	r2, pc, #4	@ (adr r2, 80047e0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80047dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047e0:	08004835 	.word	0x08004835
 80047e4:	080049bb 	.word	0x080049bb
 80047e8:	080049bb 	.word	0x080049bb
 80047ec:	080049bb 	.word	0x080049bb
 80047f0:	08004875 	.word	0x08004875
 80047f4:	080049bb 	.word	0x080049bb
 80047f8:	080049bb 	.word	0x080049bb
 80047fc:	080049bb 	.word	0x080049bb
 8004800:	080048b7 	.word	0x080048b7
 8004804:	080049bb 	.word	0x080049bb
 8004808:	080049bb 	.word	0x080049bb
 800480c:	080049bb 	.word	0x080049bb
 8004810:	080048f7 	.word	0x080048f7
 8004814:	080049bb 	.word	0x080049bb
 8004818:	080049bb 	.word	0x080049bb
 800481c:	080049bb 	.word	0x080049bb
 8004820:	08004939 	.word	0x08004939
 8004824:	080049bb 	.word	0x080049bb
 8004828:	080049bb 	.word	0x080049bb
 800482c:	080049bb 	.word	0x080049bb
 8004830:	08004979 	.word	0x08004979
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	68b9      	ldr	r1, [r7, #8]
 800483a:	4618      	mov	r0, r3
 800483c:	f000 fa40 	bl	8004cc0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	699a      	ldr	r2, [r3, #24]
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f042 0208 	orr.w	r2, r2, #8
 800484e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	699a      	ldr	r2, [r3, #24]
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f022 0204 	bic.w	r2, r2, #4
 800485e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	6999      	ldr	r1, [r3, #24]
 8004866:	68bb      	ldr	r3, [r7, #8]
 8004868:	691a      	ldr	r2, [r3, #16]
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	430a      	orrs	r2, r1
 8004870:	619a      	str	r2, [r3, #24]
      break;
 8004872:	e0a5      	b.n	80049c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	68b9      	ldr	r1, [r7, #8]
 800487a:	4618      	mov	r0, r3
 800487c:	f000 fa92 	bl	8004da4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	699a      	ldr	r2, [r3, #24]
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800488e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	699a      	ldr	r2, [r3, #24]
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800489e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	6999      	ldr	r1, [r3, #24]
 80048a6:	68bb      	ldr	r3, [r7, #8]
 80048a8:	691b      	ldr	r3, [r3, #16]
 80048aa:	021a      	lsls	r2, r3, #8
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	430a      	orrs	r2, r1
 80048b2:	619a      	str	r2, [r3, #24]
      break;
 80048b4:	e084      	b.n	80049c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	68b9      	ldr	r1, [r7, #8]
 80048bc:	4618      	mov	r0, r3
 80048be:	f000 fae9 	bl	8004e94 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	69da      	ldr	r2, [r3, #28]
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f042 0208 	orr.w	r2, r2, #8
 80048d0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	69da      	ldr	r2, [r3, #28]
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f022 0204 	bic.w	r2, r2, #4
 80048e0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	69d9      	ldr	r1, [r3, #28]
 80048e8:	68bb      	ldr	r3, [r7, #8]
 80048ea:	691a      	ldr	r2, [r3, #16]
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	430a      	orrs	r2, r1
 80048f2:	61da      	str	r2, [r3, #28]
      break;
 80048f4:	e064      	b.n	80049c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	68b9      	ldr	r1, [r7, #8]
 80048fc:	4618      	mov	r0, r3
 80048fe:	f000 fb3f 	bl	8004f80 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	69da      	ldr	r2, [r3, #28]
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004910:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	69da      	ldr	r2, [r3, #28]
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004920:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	69d9      	ldr	r1, [r3, #28]
 8004928:	68bb      	ldr	r3, [r7, #8]
 800492a:	691b      	ldr	r3, [r3, #16]
 800492c:	021a      	lsls	r2, r3, #8
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	430a      	orrs	r2, r1
 8004934:	61da      	str	r2, [r3, #28]
      break;
 8004936:	e043      	b.n	80049c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	68b9      	ldr	r1, [r7, #8]
 800493e:	4618      	mov	r0, r3
 8004940:	f000 fb76 	bl	8005030 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f042 0208 	orr.w	r2, r2, #8
 8004952:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f022 0204 	bic.w	r2, r2, #4
 8004962:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800496a:	68bb      	ldr	r3, [r7, #8]
 800496c:	691a      	ldr	r2, [r3, #16]
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	430a      	orrs	r2, r1
 8004974:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8004976:	e023      	b.n	80049c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	68b9      	ldr	r1, [r7, #8]
 800497e:	4618      	mov	r0, r3
 8004980:	f000 fba8 	bl	80050d4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004992:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80049a2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80049aa:	68bb      	ldr	r3, [r7, #8]
 80049ac:	691b      	ldr	r3, [r3, #16]
 80049ae:	021a      	lsls	r2, r3, #8
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	430a      	orrs	r2, r1
 80049b6:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80049b8:	e002      	b.n	80049c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80049ba:	2301      	movs	r3, #1
 80049bc:	75fb      	strb	r3, [r7, #23]
      break;
 80049be:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	2200      	movs	r2, #0
 80049c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80049c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80049ca:	4618      	mov	r0, r3
 80049cc:	3718      	adds	r7, #24
 80049ce:	46bd      	mov	sp, r7
 80049d0:	bd80      	pop	{r7, pc}
 80049d2:	bf00      	nop

080049d4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80049d4:	b580      	push	{r7, lr}
 80049d6:	b084      	sub	sp, #16
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
 80049dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80049de:	2300      	movs	r3, #0
 80049e0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80049e8:	2b01      	cmp	r3, #1
 80049ea:	d101      	bne.n	80049f0 <HAL_TIM_ConfigClockSource+0x1c>
 80049ec:	2302      	movs	r3, #2
 80049ee:	e0b4      	b.n	8004b5a <HAL_TIM_ConfigClockSource+0x186>
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2201      	movs	r2, #1
 80049f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2202      	movs	r2, #2
 80049fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	689b      	ldr	r3, [r3, #8]
 8004a06:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004a08:	68ba      	ldr	r2, [r7, #8]
 8004a0a:	4b56      	ldr	r3, [pc, #344]	@ (8004b64 <HAL_TIM_ConfigClockSource+0x190>)
 8004a0c:	4013      	ands	r3, r2
 8004a0e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004a10:	68bb      	ldr	r3, [r7, #8]
 8004a12:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004a16:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	68ba      	ldr	r2, [r7, #8]
 8004a1e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004a20:	683b      	ldr	r3, [r7, #0]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004a28:	d03e      	beq.n	8004aa8 <HAL_TIM_ConfigClockSource+0xd4>
 8004a2a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004a2e:	f200 8087 	bhi.w	8004b40 <HAL_TIM_ConfigClockSource+0x16c>
 8004a32:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004a36:	f000 8086 	beq.w	8004b46 <HAL_TIM_ConfigClockSource+0x172>
 8004a3a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004a3e:	d87f      	bhi.n	8004b40 <HAL_TIM_ConfigClockSource+0x16c>
 8004a40:	2b70      	cmp	r3, #112	@ 0x70
 8004a42:	d01a      	beq.n	8004a7a <HAL_TIM_ConfigClockSource+0xa6>
 8004a44:	2b70      	cmp	r3, #112	@ 0x70
 8004a46:	d87b      	bhi.n	8004b40 <HAL_TIM_ConfigClockSource+0x16c>
 8004a48:	2b60      	cmp	r3, #96	@ 0x60
 8004a4a:	d050      	beq.n	8004aee <HAL_TIM_ConfigClockSource+0x11a>
 8004a4c:	2b60      	cmp	r3, #96	@ 0x60
 8004a4e:	d877      	bhi.n	8004b40 <HAL_TIM_ConfigClockSource+0x16c>
 8004a50:	2b50      	cmp	r3, #80	@ 0x50
 8004a52:	d03c      	beq.n	8004ace <HAL_TIM_ConfigClockSource+0xfa>
 8004a54:	2b50      	cmp	r3, #80	@ 0x50
 8004a56:	d873      	bhi.n	8004b40 <HAL_TIM_ConfigClockSource+0x16c>
 8004a58:	2b40      	cmp	r3, #64	@ 0x40
 8004a5a:	d058      	beq.n	8004b0e <HAL_TIM_ConfigClockSource+0x13a>
 8004a5c:	2b40      	cmp	r3, #64	@ 0x40
 8004a5e:	d86f      	bhi.n	8004b40 <HAL_TIM_ConfigClockSource+0x16c>
 8004a60:	2b30      	cmp	r3, #48	@ 0x30
 8004a62:	d064      	beq.n	8004b2e <HAL_TIM_ConfigClockSource+0x15a>
 8004a64:	2b30      	cmp	r3, #48	@ 0x30
 8004a66:	d86b      	bhi.n	8004b40 <HAL_TIM_ConfigClockSource+0x16c>
 8004a68:	2b20      	cmp	r3, #32
 8004a6a:	d060      	beq.n	8004b2e <HAL_TIM_ConfigClockSource+0x15a>
 8004a6c:	2b20      	cmp	r3, #32
 8004a6e:	d867      	bhi.n	8004b40 <HAL_TIM_ConfigClockSource+0x16c>
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d05c      	beq.n	8004b2e <HAL_TIM_ConfigClockSource+0x15a>
 8004a74:	2b10      	cmp	r3, #16
 8004a76:	d05a      	beq.n	8004b2e <HAL_TIM_ConfigClockSource+0x15a>
 8004a78:	e062      	b.n	8004b40 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004a7e:	683b      	ldr	r3, [r7, #0]
 8004a80:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004a82:	683b      	ldr	r3, [r7, #0]
 8004a84:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004a86:	683b      	ldr	r3, [r7, #0]
 8004a88:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004a8a:	f000 fbf1 	bl	8005270 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	689b      	ldr	r3, [r3, #8]
 8004a94:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004a96:	68bb      	ldr	r3, [r7, #8]
 8004a98:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004a9c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	68ba      	ldr	r2, [r7, #8]
 8004aa4:	609a      	str	r2, [r3, #8]
      break;
 8004aa6:	e04f      	b.n	8004b48 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004aac:	683b      	ldr	r3, [r7, #0]
 8004aae:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004ab0:	683b      	ldr	r3, [r7, #0]
 8004ab2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004ab8:	f000 fbda 	bl	8005270 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	689a      	ldr	r2, [r3, #8]
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004aca:	609a      	str	r2, [r3, #8]
      break;
 8004acc:	e03c      	b.n	8004b48 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004ad2:	683b      	ldr	r3, [r7, #0]
 8004ad4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004ad6:	683b      	ldr	r3, [r7, #0]
 8004ad8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ada:	461a      	mov	r2, r3
 8004adc:	f000 fb4e 	bl	800517c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	2150      	movs	r1, #80	@ 0x50
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	f000 fba7 	bl	800523a <TIM_ITRx_SetConfig>
      break;
 8004aec:	e02c      	b.n	8004b48 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004af2:	683b      	ldr	r3, [r7, #0]
 8004af4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004af6:	683b      	ldr	r3, [r7, #0]
 8004af8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004afa:	461a      	mov	r2, r3
 8004afc:	f000 fb6d 	bl	80051da <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	2160      	movs	r1, #96	@ 0x60
 8004b06:	4618      	mov	r0, r3
 8004b08:	f000 fb97 	bl	800523a <TIM_ITRx_SetConfig>
      break;
 8004b0c:	e01c      	b.n	8004b48 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004b12:	683b      	ldr	r3, [r7, #0]
 8004b14:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004b16:	683b      	ldr	r3, [r7, #0]
 8004b18:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b1a:	461a      	mov	r2, r3
 8004b1c:	f000 fb2e 	bl	800517c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	2140      	movs	r1, #64	@ 0x40
 8004b26:	4618      	mov	r0, r3
 8004b28:	f000 fb87 	bl	800523a <TIM_ITRx_SetConfig>
      break;
 8004b2c:	e00c      	b.n	8004b48 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681a      	ldr	r2, [r3, #0]
 8004b32:	683b      	ldr	r3, [r7, #0]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	4619      	mov	r1, r3
 8004b38:	4610      	mov	r0, r2
 8004b3a:	f000 fb7e 	bl	800523a <TIM_ITRx_SetConfig>
      break;
 8004b3e:	e003      	b.n	8004b48 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004b40:	2301      	movs	r3, #1
 8004b42:	73fb      	strb	r3, [r7, #15]
      break;
 8004b44:	e000      	b.n	8004b48 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004b46:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2201      	movs	r2, #1
 8004b4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2200      	movs	r2, #0
 8004b54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004b58:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	3710      	adds	r7, #16
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	bd80      	pop	{r7, pc}
 8004b62:	bf00      	nop
 8004b64:	fffeff88 	.word	0xfffeff88

08004b68 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004b68:	b480      	push	{r7}
 8004b6a:	b085      	sub	sp, #20
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
 8004b70:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	4a46      	ldr	r2, [pc, #280]	@ (8004c94 <TIM_Base_SetConfig+0x12c>)
 8004b7c:	4293      	cmp	r3, r2
 8004b7e:	d013      	beq.n	8004ba8 <TIM_Base_SetConfig+0x40>
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004b86:	d00f      	beq.n	8004ba8 <TIM_Base_SetConfig+0x40>
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	4a43      	ldr	r2, [pc, #268]	@ (8004c98 <TIM_Base_SetConfig+0x130>)
 8004b8c:	4293      	cmp	r3, r2
 8004b8e:	d00b      	beq.n	8004ba8 <TIM_Base_SetConfig+0x40>
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	4a42      	ldr	r2, [pc, #264]	@ (8004c9c <TIM_Base_SetConfig+0x134>)
 8004b94:	4293      	cmp	r3, r2
 8004b96:	d007      	beq.n	8004ba8 <TIM_Base_SetConfig+0x40>
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	4a41      	ldr	r2, [pc, #260]	@ (8004ca0 <TIM_Base_SetConfig+0x138>)
 8004b9c:	4293      	cmp	r3, r2
 8004b9e:	d003      	beq.n	8004ba8 <TIM_Base_SetConfig+0x40>
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	4a40      	ldr	r2, [pc, #256]	@ (8004ca4 <TIM_Base_SetConfig+0x13c>)
 8004ba4:	4293      	cmp	r3, r2
 8004ba6:	d108      	bne.n	8004bba <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004bae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	685b      	ldr	r3, [r3, #4]
 8004bb4:	68fa      	ldr	r2, [r7, #12]
 8004bb6:	4313      	orrs	r3, r2
 8004bb8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	4a35      	ldr	r2, [pc, #212]	@ (8004c94 <TIM_Base_SetConfig+0x12c>)
 8004bbe:	4293      	cmp	r3, r2
 8004bc0:	d02b      	beq.n	8004c1a <TIM_Base_SetConfig+0xb2>
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004bc8:	d027      	beq.n	8004c1a <TIM_Base_SetConfig+0xb2>
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	4a32      	ldr	r2, [pc, #200]	@ (8004c98 <TIM_Base_SetConfig+0x130>)
 8004bce:	4293      	cmp	r3, r2
 8004bd0:	d023      	beq.n	8004c1a <TIM_Base_SetConfig+0xb2>
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	4a31      	ldr	r2, [pc, #196]	@ (8004c9c <TIM_Base_SetConfig+0x134>)
 8004bd6:	4293      	cmp	r3, r2
 8004bd8:	d01f      	beq.n	8004c1a <TIM_Base_SetConfig+0xb2>
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	4a30      	ldr	r2, [pc, #192]	@ (8004ca0 <TIM_Base_SetConfig+0x138>)
 8004bde:	4293      	cmp	r3, r2
 8004be0:	d01b      	beq.n	8004c1a <TIM_Base_SetConfig+0xb2>
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	4a2f      	ldr	r2, [pc, #188]	@ (8004ca4 <TIM_Base_SetConfig+0x13c>)
 8004be6:	4293      	cmp	r3, r2
 8004be8:	d017      	beq.n	8004c1a <TIM_Base_SetConfig+0xb2>
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	4a2e      	ldr	r2, [pc, #184]	@ (8004ca8 <TIM_Base_SetConfig+0x140>)
 8004bee:	4293      	cmp	r3, r2
 8004bf0:	d013      	beq.n	8004c1a <TIM_Base_SetConfig+0xb2>
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	4a2d      	ldr	r2, [pc, #180]	@ (8004cac <TIM_Base_SetConfig+0x144>)
 8004bf6:	4293      	cmp	r3, r2
 8004bf8:	d00f      	beq.n	8004c1a <TIM_Base_SetConfig+0xb2>
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	4a2c      	ldr	r2, [pc, #176]	@ (8004cb0 <TIM_Base_SetConfig+0x148>)
 8004bfe:	4293      	cmp	r3, r2
 8004c00:	d00b      	beq.n	8004c1a <TIM_Base_SetConfig+0xb2>
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	4a2b      	ldr	r2, [pc, #172]	@ (8004cb4 <TIM_Base_SetConfig+0x14c>)
 8004c06:	4293      	cmp	r3, r2
 8004c08:	d007      	beq.n	8004c1a <TIM_Base_SetConfig+0xb2>
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	4a2a      	ldr	r2, [pc, #168]	@ (8004cb8 <TIM_Base_SetConfig+0x150>)
 8004c0e:	4293      	cmp	r3, r2
 8004c10:	d003      	beq.n	8004c1a <TIM_Base_SetConfig+0xb2>
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	4a29      	ldr	r2, [pc, #164]	@ (8004cbc <TIM_Base_SetConfig+0x154>)
 8004c16:	4293      	cmp	r3, r2
 8004c18:	d108      	bne.n	8004c2c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004c20:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004c22:	683b      	ldr	r3, [r7, #0]
 8004c24:	68db      	ldr	r3, [r3, #12]
 8004c26:	68fa      	ldr	r2, [r7, #12]
 8004c28:	4313      	orrs	r3, r2
 8004c2a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004c32:	683b      	ldr	r3, [r7, #0]
 8004c34:	695b      	ldr	r3, [r3, #20]
 8004c36:	4313      	orrs	r3, r2
 8004c38:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	68fa      	ldr	r2, [r7, #12]
 8004c3e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004c40:	683b      	ldr	r3, [r7, #0]
 8004c42:	689a      	ldr	r2, [r3, #8]
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004c48:	683b      	ldr	r3, [r7, #0]
 8004c4a:	681a      	ldr	r2, [r3, #0]
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	4a10      	ldr	r2, [pc, #64]	@ (8004c94 <TIM_Base_SetConfig+0x12c>)
 8004c54:	4293      	cmp	r3, r2
 8004c56:	d003      	beq.n	8004c60 <TIM_Base_SetConfig+0xf8>
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	4a12      	ldr	r2, [pc, #72]	@ (8004ca4 <TIM_Base_SetConfig+0x13c>)
 8004c5c:	4293      	cmp	r3, r2
 8004c5e:	d103      	bne.n	8004c68 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004c60:	683b      	ldr	r3, [r7, #0]
 8004c62:	691a      	ldr	r2, [r3, #16]
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2201      	movs	r2, #1
 8004c6c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	691b      	ldr	r3, [r3, #16]
 8004c72:	f003 0301 	and.w	r3, r3, #1
 8004c76:	2b01      	cmp	r3, #1
 8004c78:	d105      	bne.n	8004c86 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	691b      	ldr	r3, [r3, #16]
 8004c7e:	f023 0201 	bic.w	r2, r3, #1
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	611a      	str	r2, [r3, #16]
  }
}
 8004c86:	bf00      	nop
 8004c88:	3714      	adds	r7, #20
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c90:	4770      	bx	lr
 8004c92:	bf00      	nop
 8004c94:	40010000 	.word	0x40010000
 8004c98:	40000400 	.word	0x40000400
 8004c9c:	40000800 	.word	0x40000800
 8004ca0:	40000c00 	.word	0x40000c00
 8004ca4:	40010400 	.word	0x40010400
 8004ca8:	40014000 	.word	0x40014000
 8004cac:	40014400 	.word	0x40014400
 8004cb0:	40014800 	.word	0x40014800
 8004cb4:	40001800 	.word	0x40001800
 8004cb8:	40001c00 	.word	0x40001c00
 8004cbc:	40002000 	.word	0x40002000

08004cc0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004cc0:	b480      	push	{r7}
 8004cc2:	b087      	sub	sp, #28
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]
 8004cc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6a1b      	ldr	r3, [r3, #32]
 8004cce:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	6a1b      	ldr	r3, [r3, #32]
 8004cd4:	f023 0201 	bic.w	r2, r3, #1
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	685b      	ldr	r3, [r3, #4]
 8004ce0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	699b      	ldr	r3, [r3, #24]
 8004ce6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004ce8:	68fa      	ldr	r2, [r7, #12]
 8004cea:	4b2b      	ldr	r3, [pc, #172]	@ (8004d98 <TIM_OC1_SetConfig+0xd8>)
 8004cec:	4013      	ands	r3, r2
 8004cee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	f023 0303 	bic.w	r3, r3, #3
 8004cf6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004cf8:	683b      	ldr	r3, [r7, #0]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	68fa      	ldr	r2, [r7, #12]
 8004cfe:	4313      	orrs	r3, r2
 8004d00:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004d02:	697b      	ldr	r3, [r7, #20]
 8004d04:	f023 0302 	bic.w	r3, r3, #2
 8004d08:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004d0a:	683b      	ldr	r3, [r7, #0]
 8004d0c:	689b      	ldr	r3, [r3, #8]
 8004d0e:	697a      	ldr	r2, [r7, #20]
 8004d10:	4313      	orrs	r3, r2
 8004d12:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	4a21      	ldr	r2, [pc, #132]	@ (8004d9c <TIM_OC1_SetConfig+0xdc>)
 8004d18:	4293      	cmp	r3, r2
 8004d1a:	d003      	beq.n	8004d24 <TIM_OC1_SetConfig+0x64>
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	4a20      	ldr	r2, [pc, #128]	@ (8004da0 <TIM_OC1_SetConfig+0xe0>)
 8004d20:	4293      	cmp	r3, r2
 8004d22:	d10c      	bne.n	8004d3e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004d24:	697b      	ldr	r3, [r7, #20]
 8004d26:	f023 0308 	bic.w	r3, r3, #8
 8004d2a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004d2c:	683b      	ldr	r3, [r7, #0]
 8004d2e:	68db      	ldr	r3, [r3, #12]
 8004d30:	697a      	ldr	r2, [r7, #20]
 8004d32:	4313      	orrs	r3, r2
 8004d34:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004d36:	697b      	ldr	r3, [r7, #20]
 8004d38:	f023 0304 	bic.w	r3, r3, #4
 8004d3c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	4a16      	ldr	r2, [pc, #88]	@ (8004d9c <TIM_OC1_SetConfig+0xdc>)
 8004d42:	4293      	cmp	r3, r2
 8004d44:	d003      	beq.n	8004d4e <TIM_OC1_SetConfig+0x8e>
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	4a15      	ldr	r2, [pc, #84]	@ (8004da0 <TIM_OC1_SetConfig+0xe0>)
 8004d4a:	4293      	cmp	r3, r2
 8004d4c:	d111      	bne.n	8004d72 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004d4e:	693b      	ldr	r3, [r7, #16]
 8004d50:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004d54:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004d56:	693b      	ldr	r3, [r7, #16]
 8004d58:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004d5c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004d5e:	683b      	ldr	r3, [r7, #0]
 8004d60:	695b      	ldr	r3, [r3, #20]
 8004d62:	693a      	ldr	r2, [r7, #16]
 8004d64:	4313      	orrs	r3, r2
 8004d66:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004d68:	683b      	ldr	r3, [r7, #0]
 8004d6a:	699b      	ldr	r3, [r3, #24]
 8004d6c:	693a      	ldr	r2, [r7, #16]
 8004d6e:	4313      	orrs	r3, r2
 8004d70:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	693a      	ldr	r2, [r7, #16]
 8004d76:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	68fa      	ldr	r2, [r7, #12]
 8004d7c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004d7e:	683b      	ldr	r3, [r7, #0]
 8004d80:	685a      	ldr	r2, [r3, #4]
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	697a      	ldr	r2, [r7, #20]
 8004d8a:	621a      	str	r2, [r3, #32]
}
 8004d8c:	bf00      	nop
 8004d8e:	371c      	adds	r7, #28
 8004d90:	46bd      	mov	sp, r7
 8004d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d96:	4770      	bx	lr
 8004d98:	fffeff8f 	.word	0xfffeff8f
 8004d9c:	40010000 	.word	0x40010000
 8004da0:	40010400 	.word	0x40010400

08004da4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004da4:	b480      	push	{r7}
 8004da6:	b087      	sub	sp, #28
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
 8004dac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	6a1b      	ldr	r3, [r3, #32]
 8004db2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	6a1b      	ldr	r3, [r3, #32]
 8004db8:	f023 0210 	bic.w	r2, r3, #16
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	685b      	ldr	r3, [r3, #4]
 8004dc4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	699b      	ldr	r3, [r3, #24]
 8004dca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004dcc:	68fa      	ldr	r2, [r7, #12]
 8004dce:	4b2e      	ldr	r3, [pc, #184]	@ (8004e88 <TIM_OC2_SetConfig+0xe4>)
 8004dd0:	4013      	ands	r3, r2
 8004dd2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004dda:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004ddc:	683b      	ldr	r3, [r7, #0]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	021b      	lsls	r3, r3, #8
 8004de2:	68fa      	ldr	r2, [r7, #12]
 8004de4:	4313      	orrs	r3, r2
 8004de6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004de8:	697b      	ldr	r3, [r7, #20]
 8004dea:	f023 0320 	bic.w	r3, r3, #32
 8004dee:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	689b      	ldr	r3, [r3, #8]
 8004df4:	011b      	lsls	r3, r3, #4
 8004df6:	697a      	ldr	r2, [r7, #20]
 8004df8:	4313      	orrs	r3, r2
 8004dfa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	4a23      	ldr	r2, [pc, #140]	@ (8004e8c <TIM_OC2_SetConfig+0xe8>)
 8004e00:	4293      	cmp	r3, r2
 8004e02:	d003      	beq.n	8004e0c <TIM_OC2_SetConfig+0x68>
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	4a22      	ldr	r2, [pc, #136]	@ (8004e90 <TIM_OC2_SetConfig+0xec>)
 8004e08:	4293      	cmp	r3, r2
 8004e0a:	d10d      	bne.n	8004e28 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004e0c:	697b      	ldr	r3, [r7, #20]
 8004e0e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004e12:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004e14:	683b      	ldr	r3, [r7, #0]
 8004e16:	68db      	ldr	r3, [r3, #12]
 8004e18:	011b      	lsls	r3, r3, #4
 8004e1a:	697a      	ldr	r2, [r7, #20]
 8004e1c:	4313      	orrs	r3, r2
 8004e1e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004e20:	697b      	ldr	r3, [r7, #20]
 8004e22:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004e26:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	4a18      	ldr	r2, [pc, #96]	@ (8004e8c <TIM_OC2_SetConfig+0xe8>)
 8004e2c:	4293      	cmp	r3, r2
 8004e2e:	d003      	beq.n	8004e38 <TIM_OC2_SetConfig+0x94>
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	4a17      	ldr	r2, [pc, #92]	@ (8004e90 <TIM_OC2_SetConfig+0xec>)
 8004e34:	4293      	cmp	r3, r2
 8004e36:	d113      	bne.n	8004e60 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004e38:	693b      	ldr	r3, [r7, #16]
 8004e3a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004e3e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004e40:	693b      	ldr	r3, [r7, #16]
 8004e42:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004e46:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004e48:	683b      	ldr	r3, [r7, #0]
 8004e4a:	695b      	ldr	r3, [r3, #20]
 8004e4c:	009b      	lsls	r3, r3, #2
 8004e4e:	693a      	ldr	r2, [r7, #16]
 8004e50:	4313      	orrs	r3, r2
 8004e52:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004e54:	683b      	ldr	r3, [r7, #0]
 8004e56:	699b      	ldr	r3, [r3, #24]
 8004e58:	009b      	lsls	r3, r3, #2
 8004e5a:	693a      	ldr	r2, [r7, #16]
 8004e5c:	4313      	orrs	r3, r2
 8004e5e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	693a      	ldr	r2, [r7, #16]
 8004e64:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	68fa      	ldr	r2, [r7, #12]
 8004e6a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004e6c:	683b      	ldr	r3, [r7, #0]
 8004e6e:	685a      	ldr	r2, [r3, #4]
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	697a      	ldr	r2, [r7, #20]
 8004e78:	621a      	str	r2, [r3, #32]
}
 8004e7a:	bf00      	nop
 8004e7c:	371c      	adds	r7, #28
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e84:	4770      	bx	lr
 8004e86:	bf00      	nop
 8004e88:	feff8fff 	.word	0xfeff8fff
 8004e8c:	40010000 	.word	0x40010000
 8004e90:	40010400 	.word	0x40010400

08004e94 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004e94:	b480      	push	{r7}
 8004e96:	b087      	sub	sp, #28
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
 8004e9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	6a1b      	ldr	r3, [r3, #32]
 8004ea2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	6a1b      	ldr	r3, [r3, #32]
 8004ea8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	685b      	ldr	r3, [r3, #4]
 8004eb4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	69db      	ldr	r3, [r3, #28]
 8004eba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004ebc:	68fa      	ldr	r2, [r7, #12]
 8004ebe:	4b2d      	ldr	r3, [pc, #180]	@ (8004f74 <TIM_OC3_SetConfig+0xe0>)
 8004ec0:	4013      	ands	r3, r2
 8004ec2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	f023 0303 	bic.w	r3, r3, #3
 8004eca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004ecc:	683b      	ldr	r3, [r7, #0]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	68fa      	ldr	r2, [r7, #12]
 8004ed2:	4313      	orrs	r3, r2
 8004ed4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004ed6:	697b      	ldr	r3, [r7, #20]
 8004ed8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004edc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004ede:	683b      	ldr	r3, [r7, #0]
 8004ee0:	689b      	ldr	r3, [r3, #8]
 8004ee2:	021b      	lsls	r3, r3, #8
 8004ee4:	697a      	ldr	r2, [r7, #20]
 8004ee6:	4313      	orrs	r3, r2
 8004ee8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	4a22      	ldr	r2, [pc, #136]	@ (8004f78 <TIM_OC3_SetConfig+0xe4>)
 8004eee:	4293      	cmp	r3, r2
 8004ef0:	d003      	beq.n	8004efa <TIM_OC3_SetConfig+0x66>
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	4a21      	ldr	r2, [pc, #132]	@ (8004f7c <TIM_OC3_SetConfig+0xe8>)
 8004ef6:	4293      	cmp	r3, r2
 8004ef8:	d10d      	bne.n	8004f16 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004efa:	697b      	ldr	r3, [r7, #20]
 8004efc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004f00:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004f02:	683b      	ldr	r3, [r7, #0]
 8004f04:	68db      	ldr	r3, [r3, #12]
 8004f06:	021b      	lsls	r3, r3, #8
 8004f08:	697a      	ldr	r2, [r7, #20]
 8004f0a:	4313      	orrs	r3, r2
 8004f0c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004f0e:	697b      	ldr	r3, [r7, #20]
 8004f10:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004f14:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	4a17      	ldr	r2, [pc, #92]	@ (8004f78 <TIM_OC3_SetConfig+0xe4>)
 8004f1a:	4293      	cmp	r3, r2
 8004f1c:	d003      	beq.n	8004f26 <TIM_OC3_SetConfig+0x92>
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	4a16      	ldr	r2, [pc, #88]	@ (8004f7c <TIM_OC3_SetConfig+0xe8>)
 8004f22:	4293      	cmp	r3, r2
 8004f24:	d113      	bne.n	8004f4e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004f26:	693b      	ldr	r3, [r7, #16]
 8004f28:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004f2c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004f2e:	693b      	ldr	r3, [r7, #16]
 8004f30:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004f34:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004f36:	683b      	ldr	r3, [r7, #0]
 8004f38:	695b      	ldr	r3, [r3, #20]
 8004f3a:	011b      	lsls	r3, r3, #4
 8004f3c:	693a      	ldr	r2, [r7, #16]
 8004f3e:	4313      	orrs	r3, r2
 8004f40:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004f42:	683b      	ldr	r3, [r7, #0]
 8004f44:	699b      	ldr	r3, [r3, #24]
 8004f46:	011b      	lsls	r3, r3, #4
 8004f48:	693a      	ldr	r2, [r7, #16]
 8004f4a:	4313      	orrs	r3, r2
 8004f4c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	693a      	ldr	r2, [r7, #16]
 8004f52:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	68fa      	ldr	r2, [r7, #12]
 8004f58:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004f5a:	683b      	ldr	r3, [r7, #0]
 8004f5c:	685a      	ldr	r2, [r3, #4]
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	697a      	ldr	r2, [r7, #20]
 8004f66:	621a      	str	r2, [r3, #32]
}
 8004f68:	bf00      	nop
 8004f6a:	371c      	adds	r7, #28
 8004f6c:	46bd      	mov	sp, r7
 8004f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f72:	4770      	bx	lr
 8004f74:	fffeff8f 	.word	0xfffeff8f
 8004f78:	40010000 	.word	0x40010000
 8004f7c:	40010400 	.word	0x40010400

08004f80 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004f80:	b480      	push	{r7}
 8004f82:	b087      	sub	sp, #28
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]
 8004f88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	6a1b      	ldr	r3, [r3, #32]
 8004f8e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	6a1b      	ldr	r3, [r3, #32]
 8004f94:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	685b      	ldr	r3, [r3, #4]
 8004fa0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	69db      	ldr	r3, [r3, #28]
 8004fa6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004fa8:	68fa      	ldr	r2, [r7, #12]
 8004faa:	4b1e      	ldr	r3, [pc, #120]	@ (8005024 <TIM_OC4_SetConfig+0xa4>)
 8004fac:	4013      	ands	r3, r2
 8004fae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004fb6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004fb8:	683b      	ldr	r3, [r7, #0]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	021b      	lsls	r3, r3, #8
 8004fbe:	68fa      	ldr	r2, [r7, #12]
 8004fc0:	4313      	orrs	r3, r2
 8004fc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004fc4:	693b      	ldr	r3, [r7, #16]
 8004fc6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004fca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004fcc:	683b      	ldr	r3, [r7, #0]
 8004fce:	689b      	ldr	r3, [r3, #8]
 8004fd0:	031b      	lsls	r3, r3, #12
 8004fd2:	693a      	ldr	r2, [r7, #16]
 8004fd4:	4313      	orrs	r3, r2
 8004fd6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	4a13      	ldr	r2, [pc, #76]	@ (8005028 <TIM_OC4_SetConfig+0xa8>)
 8004fdc:	4293      	cmp	r3, r2
 8004fde:	d003      	beq.n	8004fe8 <TIM_OC4_SetConfig+0x68>
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	4a12      	ldr	r2, [pc, #72]	@ (800502c <TIM_OC4_SetConfig+0xac>)
 8004fe4:	4293      	cmp	r3, r2
 8004fe6:	d109      	bne.n	8004ffc <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004fe8:	697b      	ldr	r3, [r7, #20]
 8004fea:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004fee:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004ff0:	683b      	ldr	r3, [r7, #0]
 8004ff2:	695b      	ldr	r3, [r3, #20]
 8004ff4:	019b      	lsls	r3, r3, #6
 8004ff6:	697a      	ldr	r2, [r7, #20]
 8004ff8:	4313      	orrs	r3, r2
 8004ffa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	697a      	ldr	r2, [r7, #20]
 8005000:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	68fa      	ldr	r2, [r7, #12]
 8005006:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005008:	683b      	ldr	r3, [r7, #0]
 800500a:	685a      	ldr	r2, [r3, #4]
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	693a      	ldr	r2, [r7, #16]
 8005014:	621a      	str	r2, [r3, #32]
}
 8005016:	bf00      	nop
 8005018:	371c      	adds	r7, #28
 800501a:	46bd      	mov	sp, r7
 800501c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005020:	4770      	bx	lr
 8005022:	bf00      	nop
 8005024:	feff8fff 	.word	0xfeff8fff
 8005028:	40010000 	.word	0x40010000
 800502c:	40010400 	.word	0x40010400

08005030 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005030:	b480      	push	{r7}
 8005032:	b087      	sub	sp, #28
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]
 8005038:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	6a1b      	ldr	r3, [r3, #32]
 800503e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	6a1b      	ldr	r3, [r3, #32]
 8005044:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	685b      	ldr	r3, [r3, #4]
 8005050:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005056:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005058:	68fa      	ldr	r2, [r7, #12]
 800505a:	4b1b      	ldr	r3, [pc, #108]	@ (80050c8 <TIM_OC5_SetConfig+0x98>)
 800505c:	4013      	ands	r3, r2
 800505e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005060:	683b      	ldr	r3, [r7, #0]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	68fa      	ldr	r2, [r7, #12]
 8005066:	4313      	orrs	r3, r2
 8005068:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800506a:	693b      	ldr	r3, [r7, #16]
 800506c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8005070:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005072:	683b      	ldr	r3, [r7, #0]
 8005074:	689b      	ldr	r3, [r3, #8]
 8005076:	041b      	lsls	r3, r3, #16
 8005078:	693a      	ldr	r2, [r7, #16]
 800507a:	4313      	orrs	r3, r2
 800507c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	4a12      	ldr	r2, [pc, #72]	@ (80050cc <TIM_OC5_SetConfig+0x9c>)
 8005082:	4293      	cmp	r3, r2
 8005084:	d003      	beq.n	800508e <TIM_OC5_SetConfig+0x5e>
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	4a11      	ldr	r2, [pc, #68]	@ (80050d0 <TIM_OC5_SetConfig+0xa0>)
 800508a:	4293      	cmp	r3, r2
 800508c:	d109      	bne.n	80050a2 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800508e:	697b      	ldr	r3, [r7, #20]
 8005090:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005094:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005096:	683b      	ldr	r3, [r7, #0]
 8005098:	695b      	ldr	r3, [r3, #20]
 800509a:	021b      	lsls	r3, r3, #8
 800509c:	697a      	ldr	r2, [r7, #20]
 800509e:	4313      	orrs	r3, r2
 80050a0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	697a      	ldr	r2, [r7, #20]
 80050a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	68fa      	ldr	r2, [r7, #12]
 80050ac:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80050ae:	683b      	ldr	r3, [r7, #0]
 80050b0:	685a      	ldr	r2, [r3, #4]
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	693a      	ldr	r2, [r7, #16]
 80050ba:	621a      	str	r2, [r3, #32]
}
 80050bc:	bf00      	nop
 80050be:	371c      	adds	r7, #28
 80050c0:	46bd      	mov	sp, r7
 80050c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c6:	4770      	bx	lr
 80050c8:	fffeff8f 	.word	0xfffeff8f
 80050cc:	40010000 	.word	0x40010000
 80050d0:	40010400 	.word	0x40010400

080050d4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80050d4:	b480      	push	{r7}
 80050d6:	b087      	sub	sp, #28
 80050d8:	af00      	add	r7, sp, #0
 80050da:	6078      	str	r0, [r7, #4]
 80050dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	6a1b      	ldr	r3, [r3, #32]
 80050e2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	6a1b      	ldr	r3, [r3, #32]
 80050e8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	685b      	ldr	r3, [r3, #4]
 80050f4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80050fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80050fc:	68fa      	ldr	r2, [r7, #12]
 80050fe:	4b1c      	ldr	r3, [pc, #112]	@ (8005170 <TIM_OC6_SetConfig+0x9c>)
 8005100:	4013      	ands	r3, r2
 8005102:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005104:	683b      	ldr	r3, [r7, #0]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	021b      	lsls	r3, r3, #8
 800510a:	68fa      	ldr	r2, [r7, #12]
 800510c:	4313      	orrs	r3, r2
 800510e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005110:	693b      	ldr	r3, [r7, #16]
 8005112:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005116:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005118:	683b      	ldr	r3, [r7, #0]
 800511a:	689b      	ldr	r3, [r3, #8]
 800511c:	051b      	lsls	r3, r3, #20
 800511e:	693a      	ldr	r2, [r7, #16]
 8005120:	4313      	orrs	r3, r2
 8005122:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	4a13      	ldr	r2, [pc, #76]	@ (8005174 <TIM_OC6_SetConfig+0xa0>)
 8005128:	4293      	cmp	r3, r2
 800512a:	d003      	beq.n	8005134 <TIM_OC6_SetConfig+0x60>
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	4a12      	ldr	r2, [pc, #72]	@ (8005178 <TIM_OC6_SetConfig+0xa4>)
 8005130:	4293      	cmp	r3, r2
 8005132:	d109      	bne.n	8005148 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005134:	697b      	ldr	r3, [r7, #20]
 8005136:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800513a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800513c:	683b      	ldr	r3, [r7, #0]
 800513e:	695b      	ldr	r3, [r3, #20]
 8005140:	029b      	lsls	r3, r3, #10
 8005142:	697a      	ldr	r2, [r7, #20]
 8005144:	4313      	orrs	r3, r2
 8005146:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	697a      	ldr	r2, [r7, #20]
 800514c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	68fa      	ldr	r2, [r7, #12]
 8005152:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005154:	683b      	ldr	r3, [r7, #0]
 8005156:	685a      	ldr	r2, [r3, #4]
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	693a      	ldr	r2, [r7, #16]
 8005160:	621a      	str	r2, [r3, #32]
}
 8005162:	bf00      	nop
 8005164:	371c      	adds	r7, #28
 8005166:	46bd      	mov	sp, r7
 8005168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800516c:	4770      	bx	lr
 800516e:	bf00      	nop
 8005170:	feff8fff 	.word	0xfeff8fff
 8005174:	40010000 	.word	0x40010000
 8005178:	40010400 	.word	0x40010400

0800517c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800517c:	b480      	push	{r7}
 800517e:	b087      	sub	sp, #28
 8005180:	af00      	add	r7, sp, #0
 8005182:	60f8      	str	r0, [r7, #12]
 8005184:	60b9      	str	r1, [r7, #8]
 8005186:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	6a1b      	ldr	r3, [r3, #32]
 800518c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	6a1b      	ldr	r3, [r3, #32]
 8005192:	f023 0201 	bic.w	r2, r3, #1
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	699b      	ldr	r3, [r3, #24]
 800519e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80051a0:	693b      	ldr	r3, [r7, #16]
 80051a2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80051a6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	011b      	lsls	r3, r3, #4
 80051ac:	693a      	ldr	r2, [r7, #16]
 80051ae:	4313      	orrs	r3, r2
 80051b0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80051b2:	697b      	ldr	r3, [r7, #20]
 80051b4:	f023 030a 	bic.w	r3, r3, #10
 80051b8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80051ba:	697a      	ldr	r2, [r7, #20]
 80051bc:	68bb      	ldr	r3, [r7, #8]
 80051be:	4313      	orrs	r3, r2
 80051c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	693a      	ldr	r2, [r7, #16]
 80051c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	697a      	ldr	r2, [r7, #20]
 80051cc:	621a      	str	r2, [r3, #32]
}
 80051ce:	bf00      	nop
 80051d0:	371c      	adds	r7, #28
 80051d2:	46bd      	mov	sp, r7
 80051d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d8:	4770      	bx	lr

080051da <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80051da:	b480      	push	{r7}
 80051dc:	b087      	sub	sp, #28
 80051de:	af00      	add	r7, sp, #0
 80051e0:	60f8      	str	r0, [r7, #12]
 80051e2:	60b9      	str	r1, [r7, #8]
 80051e4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	6a1b      	ldr	r3, [r3, #32]
 80051ea:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	6a1b      	ldr	r3, [r3, #32]
 80051f0:	f023 0210 	bic.w	r2, r3, #16
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	699b      	ldr	r3, [r3, #24]
 80051fc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80051fe:	693b      	ldr	r3, [r7, #16]
 8005200:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005204:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	031b      	lsls	r3, r3, #12
 800520a:	693a      	ldr	r2, [r7, #16]
 800520c:	4313      	orrs	r3, r2
 800520e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005210:	697b      	ldr	r3, [r7, #20]
 8005212:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005216:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005218:	68bb      	ldr	r3, [r7, #8]
 800521a:	011b      	lsls	r3, r3, #4
 800521c:	697a      	ldr	r2, [r7, #20]
 800521e:	4313      	orrs	r3, r2
 8005220:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	693a      	ldr	r2, [r7, #16]
 8005226:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	697a      	ldr	r2, [r7, #20]
 800522c:	621a      	str	r2, [r3, #32]
}
 800522e:	bf00      	nop
 8005230:	371c      	adds	r7, #28
 8005232:	46bd      	mov	sp, r7
 8005234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005238:	4770      	bx	lr

0800523a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800523a:	b480      	push	{r7}
 800523c:	b085      	sub	sp, #20
 800523e:	af00      	add	r7, sp, #0
 8005240:	6078      	str	r0, [r7, #4]
 8005242:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	689b      	ldr	r3, [r3, #8]
 8005248:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005250:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005252:	683a      	ldr	r2, [r7, #0]
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	4313      	orrs	r3, r2
 8005258:	f043 0307 	orr.w	r3, r3, #7
 800525c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	68fa      	ldr	r2, [r7, #12]
 8005262:	609a      	str	r2, [r3, #8]
}
 8005264:	bf00      	nop
 8005266:	3714      	adds	r7, #20
 8005268:	46bd      	mov	sp, r7
 800526a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526e:	4770      	bx	lr

08005270 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005270:	b480      	push	{r7}
 8005272:	b087      	sub	sp, #28
 8005274:	af00      	add	r7, sp, #0
 8005276:	60f8      	str	r0, [r7, #12]
 8005278:	60b9      	str	r1, [r7, #8]
 800527a:	607a      	str	r2, [r7, #4]
 800527c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	689b      	ldr	r3, [r3, #8]
 8005282:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005284:	697b      	ldr	r3, [r7, #20]
 8005286:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800528a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800528c:	683b      	ldr	r3, [r7, #0]
 800528e:	021a      	lsls	r2, r3, #8
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	431a      	orrs	r2, r3
 8005294:	68bb      	ldr	r3, [r7, #8]
 8005296:	4313      	orrs	r3, r2
 8005298:	697a      	ldr	r2, [r7, #20]
 800529a:	4313      	orrs	r3, r2
 800529c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	697a      	ldr	r2, [r7, #20]
 80052a2:	609a      	str	r2, [r3, #8]
}
 80052a4:	bf00      	nop
 80052a6:	371c      	adds	r7, #28
 80052a8:	46bd      	mov	sp, r7
 80052aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ae:	4770      	bx	lr

080052b0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80052b0:	b480      	push	{r7}
 80052b2:	b087      	sub	sp, #28
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	60f8      	str	r0, [r7, #12]
 80052b8:	60b9      	str	r1, [r7, #8]
 80052ba:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80052bc:	68bb      	ldr	r3, [r7, #8]
 80052be:	f003 031f 	and.w	r3, r3, #31
 80052c2:	2201      	movs	r2, #1
 80052c4:	fa02 f303 	lsl.w	r3, r2, r3
 80052c8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	6a1a      	ldr	r2, [r3, #32]
 80052ce:	697b      	ldr	r3, [r7, #20]
 80052d0:	43db      	mvns	r3, r3
 80052d2:	401a      	ands	r2, r3
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	6a1a      	ldr	r2, [r3, #32]
 80052dc:	68bb      	ldr	r3, [r7, #8]
 80052de:	f003 031f 	and.w	r3, r3, #31
 80052e2:	6879      	ldr	r1, [r7, #4]
 80052e4:	fa01 f303 	lsl.w	r3, r1, r3
 80052e8:	431a      	orrs	r2, r3
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	621a      	str	r2, [r3, #32]
}
 80052ee:	bf00      	nop
 80052f0:	371c      	adds	r7, #28
 80052f2:	46bd      	mov	sp, r7
 80052f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f8:	4770      	bx	lr
	...

080052fc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80052fc:	b480      	push	{r7}
 80052fe:	b085      	sub	sp, #20
 8005300:	af00      	add	r7, sp, #0
 8005302:	6078      	str	r0, [r7, #4]
 8005304:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800530c:	2b01      	cmp	r3, #1
 800530e:	d101      	bne.n	8005314 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005310:	2302      	movs	r3, #2
 8005312:	e06d      	b.n	80053f0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2201      	movs	r2, #1
 8005318:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2202      	movs	r2, #2
 8005320:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	685b      	ldr	r3, [r3, #4]
 800532a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	689b      	ldr	r3, [r3, #8]
 8005332:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	4a30      	ldr	r2, [pc, #192]	@ (80053fc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800533a:	4293      	cmp	r3, r2
 800533c:	d004      	beq.n	8005348 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	4a2f      	ldr	r2, [pc, #188]	@ (8005400 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005344:	4293      	cmp	r3, r2
 8005346:	d108      	bne.n	800535a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800534e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005350:	683b      	ldr	r3, [r7, #0]
 8005352:	685b      	ldr	r3, [r3, #4]
 8005354:	68fa      	ldr	r2, [r7, #12]
 8005356:	4313      	orrs	r3, r2
 8005358:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005360:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005362:	683b      	ldr	r3, [r7, #0]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	68fa      	ldr	r2, [r7, #12]
 8005368:	4313      	orrs	r3, r2
 800536a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	68fa      	ldr	r2, [r7, #12]
 8005372:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	4a20      	ldr	r2, [pc, #128]	@ (80053fc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800537a:	4293      	cmp	r3, r2
 800537c:	d022      	beq.n	80053c4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005386:	d01d      	beq.n	80053c4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	4a1d      	ldr	r2, [pc, #116]	@ (8005404 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800538e:	4293      	cmp	r3, r2
 8005390:	d018      	beq.n	80053c4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	4a1c      	ldr	r2, [pc, #112]	@ (8005408 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005398:	4293      	cmp	r3, r2
 800539a:	d013      	beq.n	80053c4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	4a1a      	ldr	r2, [pc, #104]	@ (800540c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80053a2:	4293      	cmp	r3, r2
 80053a4:	d00e      	beq.n	80053c4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	4a15      	ldr	r2, [pc, #84]	@ (8005400 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80053ac:	4293      	cmp	r3, r2
 80053ae:	d009      	beq.n	80053c4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	4a16      	ldr	r2, [pc, #88]	@ (8005410 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80053b6:	4293      	cmp	r3, r2
 80053b8:	d004      	beq.n	80053c4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	4a15      	ldr	r2, [pc, #84]	@ (8005414 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80053c0:	4293      	cmp	r3, r2
 80053c2:	d10c      	bne.n	80053de <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80053c4:	68bb      	ldr	r3, [r7, #8]
 80053c6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80053ca:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80053cc:	683b      	ldr	r3, [r7, #0]
 80053ce:	689b      	ldr	r3, [r3, #8]
 80053d0:	68ba      	ldr	r2, [r7, #8]
 80053d2:	4313      	orrs	r3, r2
 80053d4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	68ba      	ldr	r2, [r7, #8]
 80053dc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	2201      	movs	r2, #1
 80053e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	2200      	movs	r2, #0
 80053ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80053ee:	2300      	movs	r3, #0
}
 80053f0:	4618      	mov	r0, r3
 80053f2:	3714      	adds	r7, #20
 80053f4:	46bd      	mov	sp, r7
 80053f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fa:	4770      	bx	lr
 80053fc:	40010000 	.word	0x40010000
 8005400:	40010400 	.word	0x40010400
 8005404:	40000400 	.word	0x40000400
 8005408:	40000800 	.word	0x40000800
 800540c:	40000c00 	.word	0x40000c00
 8005410:	40014000 	.word	0x40014000
 8005414:	40001800 	.word	0x40001800

08005418 <sniprintf>:
 8005418:	b40c      	push	{r2, r3}
 800541a:	b530      	push	{r4, r5, lr}
 800541c:	4b17      	ldr	r3, [pc, #92]	@ (800547c <sniprintf+0x64>)
 800541e:	1e0c      	subs	r4, r1, #0
 8005420:	681d      	ldr	r5, [r3, #0]
 8005422:	b09d      	sub	sp, #116	@ 0x74
 8005424:	da08      	bge.n	8005438 <sniprintf+0x20>
 8005426:	238b      	movs	r3, #139	@ 0x8b
 8005428:	602b      	str	r3, [r5, #0]
 800542a:	f04f 30ff 	mov.w	r0, #4294967295
 800542e:	b01d      	add	sp, #116	@ 0x74
 8005430:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005434:	b002      	add	sp, #8
 8005436:	4770      	bx	lr
 8005438:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800543c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8005440:	bf14      	ite	ne
 8005442:	f104 33ff 	addne.w	r3, r4, #4294967295
 8005446:	4623      	moveq	r3, r4
 8005448:	9304      	str	r3, [sp, #16]
 800544a:	9307      	str	r3, [sp, #28]
 800544c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8005450:	9002      	str	r0, [sp, #8]
 8005452:	9006      	str	r0, [sp, #24]
 8005454:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005458:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800545a:	ab21      	add	r3, sp, #132	@ 0x84
 800545c:	a902      	add	r1, sp, #8
 800545e:	4628      	mov	r0, r5
 8005460:	9301      	str	r3, [sp, #4]
 8005462:	f000 f995 	bl	8005790 <_svfiprintf_r>
 8005466:	1c43      	adds	r3, r0, #1
 8005468:	bfbc      	itt	lt
 800546a:	238b      	movlt	r3, #139	@ 0x8b
 800546c:	602b      	strlt	r3, [r5, #0]
 800546e:	2c00      	cmp	r4, #0
 8005470:	d0dd      	beq.n	800542e <sniprintf+0x16>
 8005472:	9b02      	ldr	r3, [sp, #8]
 8005474:	2200      	movs	r2, #0
 8005476:	701a      	strb	r2, [r3, #0]
 8005478:	e7d9      	b.n	800542e <sniprintf+0x16>
 800547a:	bf00      	nop
 800547c:	20000018 	.word	0x20000018

08005480 <memset>:
 8005480:	4402      	add	r2, r0
 8005482:	4603      	mov	r3, r0
 8005484:	4293      	cmp	r3, r2
 8005486:	d100      	bne.n	800548a <memset+0xa>
 8005488:	4770      	bx	lr
 800548a:	f803 1b01 	strb.w	r1, [r3], #1
 800548e:	e7f9      	b.n	8005484 <memset+0x4>

08005490 <__errno>:
 8005490:	4b01      	ldr	r3, [pc, #4]	@ (8005498 <__errno+0x8>)
 8005492:	6818      	ldr	r0, [r3, #0]
 8005494:	4770      	bx	lr
 8005496:	bf00      	nop
 8005498:	20000018 	.word	0x20000018

0800549c <__libc_init_array>:
 800549c:	b570      	push	{r4, r5, r6, lr}
 800549e:	4d0d      	ldr	r5, [pc, #52]	@ (80054d4 <__libc_init_array+0x38>)
 80054a0:	4c0d      	ldr	r4, [pc, #52]	@ (80054d8 <__libc_init_array+0x3c>)
 80054a2:	1b64      	subs	r4, r4, r5
 80054a4:	10a4      	asrs	r4, r4, #2
 80054a6:	2600      	movs	r6, #0
 80054a8:	42a6      	cmp	r6, r4
 80054aa:	d109      	bne.n	80054c0 <__libc_init_array+0x24>
 80054ac:	4d0b      	ldr	r5, [pc, #44]	@ (80054dc <__libc_init_array+0x40>)
 80054ae:	4c0c      	ldr	r4, [pc, #48]	@ (80054e0 <__libc_init_array+0x44>)
 80054b0:	f000 fc66 	bl	8005d80 <_init>
 80054b4:	1b64      	subs	r4, r4, r5
 80054b6:	10a4      	asrs	r4, r4, #2
 80054b8:	2600      	movs	r6, #0
 80054ba:	42a6      	cmp	r6, r4
 80054bc:	d105      	bne.n	80054ca <__libc_init_array+0x2e>
 80054be:	bd70      	pop	{r4, r5, r6, pc}
 80054c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80054c4:	4798      	blx	r3
 80054c6:	3601      	adds	r6, #1
 80054c8:	e7ee      	b.n	80054a8 <__libc_init_array+0xc>
 80054ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80054ce:	4798      	blx	r3
 80054d0:	3601      	adds	r6, #1
 80054d2:	e7f2      	b.n	80054ba <__libc_init_array+0x1e>
 80054d4:	08006028 	.word	0x08006028
 80054d8:	08006028 	.word	0x08006028
 80054dc:	08006028 	.word	0x08006028
 80054e0:	0800602c 	.word	0x0800602c

080054e4 <__retarget_lock_acquire_recursive>:
 80054e4:	4770      	bx	lr

080054e6 <__retarget_lock_release_recursive>:
 80054e6:	4770      	bx	lr

080054e8 <_free_r>:
 80054e8:	b538      	push	{r3, r4, r5, lr}
 80054ea:	4605      	mov	r5, r0
 80054ec:	2900      	cmp	r1, #0
 80054ee:	d041      	beq.n	8005574 <_free_r+0x8c>
 80054f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80054f4:	1f0c      	subs	r4, r1, #4
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	bfb8      	it	lt
 80054fa:	18e4      	addlt	r4, r4, r3
 80054fc:	f000 f8e0 	bl	80056c0 <__malloc_lock>
 8005500:	4a1d      	ldr	r2, [pc, #116]	@ (8005578 <_free_r+0x90>)
 8005502:	6813      	ldr	r3, [r2, #0]
 8005504:	b933      	cbnz	r3, 8005514 <_free_r+0x2c>
 8005506:	6063      	str	r3, [r4, #4]
 8005508:	6014      	str	r4, [r2, #0]
 800550a:	4628      	mov	r0, r5
 800550c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005510:	f000 b8dc 	b.w	80056cc <__malloc_unlock>
 8005514:	42a3      	cmp	r3, r4
 8005516:	d908      	bls.n	800552a <_free_r+0x42>
 8005518:	6820      	ldr	r0, [r4, #0]
 800551a:	1821      	adds	r1, r4, r0
 800551c:	428b      	cmp	r3, r1
 800551e:	bf01      	itttt	eq
 8005520:	6819      	ldreq	r1, [r3, #0]
 8005522:	685b      	ldreq	r3, [r3, #4]
 8005524:	1809      	addeq	r1, r1, r0
 8005526:	6021      	streq	r1, [r4, #0]
 8005528:	e7ed      	b.n	8005506 <_free_r+0x1e>
 800552a:	461a      	mov	r2, r3
 800552c:	685b      	ldr	r3, [r3, #4]
 800552e:	b10b      	cbz	r3, 8005534 <_free_r+0x4c>
 8005530:	42a3      	cmp	r3, r4
 8005532:	d9fa      	bls.n	800552a <_free_r+0x42>
 8005534:	6811      	ldr	r1, [r2, #0]
 8005536:	1850      	adds	r0, r2, r1
 8005538:	42a0      	cmp	r0, r4
 800553a:	d10b      	bne.n	8005554 <_free_r+0x6c>
 800553c:	6820      	ldr	r0, [r4, #0]
 800553e:	4401      	add	r1, r0
 8005540:	1850      	adds	r0, r2, r1
 8005542:	4283      	cmp	r3, r0
 8005544:	6011      	str	r1, [r2, #0]
 8005546:	d1e0      	bne.n	800550a <_free_r+0x22>
 8005548:	6818      	ldr	r0, [r3, #0]
 800554a:	685b      	ldr	r3, [r3, #4]
 800554c:	6053      	str	r3, [r2, #4]
 800554e:	4408      	add	r0, r1
 8005550:	6010      	str	r0, [r2, #0]
 8005552:	e7da      	b.n	800550a <_free_r+0x22>
 8005554:	d902      	bls.n	800555c <_free_r+0x74>
 8005556:	230c      	movs	r3, #12
 8005558:	602b      	str	r3, [r5, #0]
 800555a:	e7d6      	b.n	800550a <_free_r+0x22>
 800555c:	6820      	ldr	r0, [r4, #0]
 800555e:	1821      	adds	r1, r4, r0
 8005560:	428b      	cmp	r3, r1
 8005562:	bf04      	itt	eq
 8005564:	6819      	ldreq	r1, [r3, #0]
 8005566:	685b      	ldreq	r3, [r3, #4]
 8005568:	6063      	str	r3, [r4, #4]
 800556a:	bf04      	itt	eq
 800556c:	1809      	addeq	r1, r1, r0
 800556e:	6021      	streq	r1, [r4, #0]
 8005570:	6054      	str	r4, [r2, #4]
 8005572:	e7ca      	b.n	800550a <_free_r+0x22>
 8005574:	bd38      	pop	{r3, r4, r5, pc}
 8005576:	bf00      	nop
 8005578:	2000035c 	.word	0x2000035c

0800557c <sbrk_aligned>:
 800557c:	b570      	push	{r4, r5, r6, lr}
 800557e:	4e0f      	ldr	r6, [pc, #60]	@ (80055bc <sbrk_aligned+0x40>)
 8005580:	460c      	mov	r4, r1
 8005582:	6831      	ldr	r1, [r6, #0]
 8005584:	4605      	mov	r5, r0
 8005586:	b911      	cbnz	r1, 800558e <sbrk_aligned+0x12>
 8005588:	f000 fba6 	bl	8005cd8 <_sbrk_r>
 800558c:	6030      	str	r0, [r6, #0]
 800558e:	4621      	mov	r1, r4
 8005590:	4628      	mov	r0, r5
 8005592:	f000 fba1 	bl	8005cd8 <_sbrk_r>
 8005596:	1c43      	adds	r3, r0, #1
 8005598:	d103      	bne.n	80055a2 <sbrk_aligned+0x26>
 800559a:	f04f 34ff 	mov.w	r4, #4294967295
 800559e:	4620      	mov	r0, r4
 80055a0:	bd70      	pop	{r4, r5, r6, pc}
 80055a2:	1cc4      	adds	r4, r0, #3
 80055a4:	f024 0403 	bic.w	r4, r4, #3
 80055a8:	42a0      	cmp	r0, r4
 80055aa:	d0f8      	beq.n	800559e <sbrk_aligned+0x22>
 80055ac:	1a21      	subs	r1, r4, r0
 80055ae:	4628      	mov	r0, r5
 80055b0:	f000 fb92 	bl	8005cd8 <_sbrk_r>
 80055b4:	3001      	adds	r0, #1
 80055b6:	d1f2      	bne.n	800559e <sbrk_aligned+0x22>
 80055b8:	e7ef      	b.n	800559a <sbrk_aligned+0x1e>
 80055ba:	bf00      	nop
 80055bc:	20000358 	.word	0x20000358

080055c0 <_malloc_r>:
 80055c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80055c4:	1ccd      	adds	r5, r1, #3
 80055c6:	f025 0503 	bic.w	r5, r5, #3
 80055ca:	3508      	adds	r5, #8
 80055cc:	2d0c      	cmp	r5, #12
 80055ce:	bf38      	it	cc
 80055d0:	250c      	movcc	r5, #12
 80055d2:	2d00      	cmp	r5, #0
 80055d4:	4606      	mov	r6, r0
 80055d6:	db01      	blt.n	80055dc <_malloc_r+0x1c>
 80055d8:	42a9      	cmp	r1, r5
 80055da:	d904      	bls.n	80055e6 <_malloc_r+0x26>
 80055dc:	230c      	movs	r3, #12
 80055de:	6033      	str	r3, [r6, #0]
 80055e0:	2000      	movs	r0, #0
 80055e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80055e6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80056bc <_malloc_r+0xfc>
 80055ea:	f000 f869 	bl	80056c0 <__malloc_lock>
 80055ee:	f8d8 3000 	ldr.w	r3, [r8]
 80055f2:	461c      	mov	r4, r3
 80055f4:	bb44      	cbnz	r4, 8005648 <_malloc_r+0x88>
 80055f6:	4629      	mov	r1, r5
 80055f8:	4630      	mov	r0, r6
 80055fa:	f7ff ffbf 	bl	800557c <sbrk_aligned>
 80055fe:	1c43      	adds	r3, r0, #1
 8005600:	4604      	mov	r4, r0
 8005602:	d158      	bne.n	80056b6 <_malloc_r+0xf6>
 8005604:	f8d8 4000 	ldr.w	r4, [r8]
 8005608:	4627      	mov	r7, r4
 800560a:	2f00      	cmp	r7, #0
 800560c:	d143      	bne.n	8005696 <_malloc_r+0xd6>
 800560e:	2c00      	cmp	r4, #0
 8005610:	d04b      	beq.n	80056aa <_malloc_r+0xea>
 8005612:	6823      	ldr	r3, [r4, #0]
 8005614:	4639      	mov	r1, r7
 8005616:	4630      	mov	r0, r6
 8005618:	eb04 0903 	add.w	r9, r4, r3
 800561c:	f000 fb5c 	bl	8005cd8 <_sbrk_r>
 8005620:	4581      	cmp	r9, r0
 8005622:	d142      	bne.n	80056aa <_malloc_r+0xea>
 8005624:	6821      	ldr	r1, [r4, #0]
 8005626:	1a6d      	subs	r5, r5, r1
 8005628:	4629      	mov	r1, r5
 800562a:	4630      	mov	r0, r6
 800562c:	f7ff ffa6 	bl	800557c <sbrk_aligned>
 8005630:	3001      	adds	r0, #1
 8005632:	d03a      	beq.n	80056aa <_malloc_r+0xea>
 8005634:	6823      	ldr	r3, [r4, #0]
 8005636:	442b      	add	r3, r5
 8005638:	6023      	str	r3, [r4, #0]
 800563a:	f8d8 3000 	ldr.w	r3, [r8]
 800563e:	685a      	ldr	r2, [r3, #4]
 8005640:	bb62      	cbnz	r2, 800569c <_malloc_r+0xdc>
 8005642:	f8c8 7000 	str.w	r7, [r8]
 8005646:	e00f      	b.n	8005668 <_malloc_r+0xa8>
 8005648:	6822      	ldr	r2, [r4, #0]
 800564a:	1b52      	subs	r2, r2, r5
 800564c:	d420      	bmi.n	8005690 <_malloc_r+0xd0>
 800564e:	2a0b      	cmp	r2, #11
 8005650:	d917      	bls.n	8005682 <_malloc_r+0xc2>
 8005652:	1961      	adds	r1, r4, r5
 8005654:	42a3      	cmp	r3, r4
 8005656:	6025      	str	r5, [r4, #0]
 8005658:	bf18      	it	ne
 800565a:	6059      	strne	r1, [r3, #4]
 800565c:	6863      	ldr	r3, [r4, #4]
 800565e:	bf08      	it	eq
 8005660:	f8c8 1000 	streq.w	r1, [r8]
 8005664:	5162      	str	r2, [r4, r5]
 8005666:	604b      	str	r3, [r1, #4]
 8005668:	4630      	mov	r0, r6
 800566a:	f000 f82f 	bl	80056cc <__malloc_unlock>
 800566e:	f104 000b 	add.w	r0, r4, #11
 8005672:	1d23      	adds	r3, r4, #4
 8005674:	f020 0007 	bic.w	r0, r0, #7
 8005678:	1ac2      	subs	r2, r0, r3
 800567a:	bf1c      	itt	ne
 800567c:	1a1b      	subne	r3, r3, r0
 800567e:	50a3      	strne	r3, [r4, r2]
 8005680:	e7af      	b.n	80055e2 <_malloc_r+0x22>
 8005682:	6862      	ldr	r2, [r4, #4]
 8005684:	42a3      	cmp	r3, r4
 8005686:	bf0c      	ite	eq
 8005688:	f8c8 2000 	streq.w	r2, [r8]
 800568c:	605a      	strne	r2, [r3, #4]
 800568e:	e7eb      	b.n	8005668 <_malloc_r+0xa8>
 8005690:	4623      	mov	r3, r4
 8005692:	6864      	ldr	r4, [r4, #4]
 8005694:	e7ae      	b.n	80055f4 <_malloc_r+0x34>
 8005696:	463c      	mov	r4, r7
 8005698:	687f      	ldr	r7, [r7, #4]
 800569a:	e7b6      	b.n	800560a <_malloc_r+0x4a>
 800569c:	461a      	mov	r2, r3
 800569e:	685b      	ldr	r3, [r3, #4]
 80056a0:	42a3      	cmp	r3, r4
 80056a2:	d1fb      	bne.n	800569c <_malloc_r+0xdc>
 80056a4:	2300      	movs	r3, #0
 80056a6:	6053      	str	r3, [r2, #4]
 80056a8:	e7de      	b.n	8005668 <_malloc_r+0xa8>
 80056aa:	230c      	movs	r3, #12
 80056ac:	6033      	str	r3, [r6, #0]
 80056ae:	4630      	mov	r0, r6
 80056b0:	f000 f80c 	bl	80056cc <__malloc_unlock>
 80056b4:	e794      	b.n	80055e0 <_malloc_r+0x20>
 80056b6:	6005      	str	r5, [r0, #0]
 80056b8:	e7d6      	b.n	8005668 <_malloc_r+0xa8>
 80056ba:	bf00      	nop
 80056bc:	2000035c 	.word	0x2000035c

080056c0 <__malloc_lock>:
 80056c0:	4801      	ldr	r0, [pc, #4]	@ (80056c8 <__malloc_lock+0x8>)
 80056c2:	f7ff bf0f 	b.w	80054e4 <__retarget_lock_acquire_recursive>
 80056c6:	bf00      	nop
 80056c8:	20000354 	.word	0x20000354

080056cc <__malloc_unlock>:
 80056cc:	4801      	ldr	r0, [pc, #4]	@ (80056d4 <__malloc_unlock+0x8>)
 80056ce:	f7ff bf0a 	b.w	80054e6 <__retarget_lock_release_recursive>
 80056d2:	bf00      	nop
 80056d4:	20000354 	.word	0x20000354

080056d8 <__ssputs_r>:
 80056d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80056dc:	688e      	ldr	r6, [r1, #8]
 80056de:	461f      	mov	r7, r3
 80056e0:	42be      	cmp	r6, r7
 80056e2:	680b      	ldr	r3, [r1, #0]
 80056e4:	4682      	mov	sl, r0
 80056e6:	460c      	mov	r4, r1
 80056e8:	4690      	mov	r8, r2
 80056ea:	d82d      	bhi.n	8005748 <__ssputs_r+0x70>
 80056ec:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80056f0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80056f4:	d026      	beq.n	8005744 <__ssputs_r+0x6c>
 80056f6:	6965      	ldr	r5, [r4, #20]
 80056f8:	6909      	ldr	r1, [r1, #16]
 80056fa:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80056fe:	eba3 0901 	sub.w	r9, r3, r1
 8005702:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005706:	1c7b      	adds	r3, r7, #1
 8005708:	444b      	add	r3, r9
 800570a:	106d      	asrs	r5, r5, #1
 800570c:	429d      	cmp	r5, r3
 800570e:	bf38      	it	cc
 8005710:	461d      	movcc	r5, r3
 8005712:	0553      	lsls	r3, r2, #21
 8005714:	d527      	bpl.n	8005766 <__ssputs_r+0x8e>
 8005716:	4629      	mov	r1, r5
 8005718:	f7ff ff52 	bl	80055c0 <_malloc_r>
 800571c:	4606      	mov	r6, r0
 800571e:	b360      	cbz	r0, 800577a <__ssputs_r+0xa2>
 8005720:	6921      	ldr	r1, [r4, #16]
 8005722:	464a      	mov	r2, r9
 8005724:	f000 fae8 	bl	8005cf8 <memcpy>
 8005728:	89a3      	ldrh	r3, [r4, #12]
 800572a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800572e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005732:	81a3      	strh	r3, [r4, #12]
 8005734:	6126      	str	r6, [r4, #16]
 8005736:	6165      	str	r5, [r4, #20]
 8005738:	444e      	add	r6, r9
 800573a:	eba5 0509 	sub.w	r5, r5, r9
 800573e:	6026      	str	r6, [r4, #0]
 8005740:	60a5      	str	r5, [r4, #8]
 8005742:	463e      	mov	r6, r7
 8005744:	42be      	cmp	r6, r7
 8005746:	d900      	bls.n	800574a <__ssputs_r+0x72>
 8005748:	463e      	mov	r6, r7
 800574a:	6820      	ldr	r0, [r4, #0]
 800574c:	4632      	mov	r2, r6
 800574e:	4641      	mov	r1, r8
 8005750:	f000 faa8 	bl	8005ca4 <memmove>
 8005754:	68a3      	ldr	r3, [r4, #8]
 8005756:	1b9b      	subs	r3, r3, r6
 8005758:	60a3      	str	r3, [r4, #8]
 800575a:	6823      	ldr	r3, [r4, #0]
 800575c:	4433      	add	r3, r6
 800575e:	6023      	str	r3, [r4, #0]
 8005760:	2000      	movs	r0, #0
 8005762:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005766:	462a      	mov	r2, r5
 8005768:	f000 fad4 	bl	8005d14 <_realloc_r>
 800576c:	4606      	mov	r6, r0
 800576e:	2800      	cmp	r0, #0
 8005770:	d1e0      	bne.n	8005734 <__ssputs_r+0x5c>
 8005772:	6921      	ldr	r1, [r4, #16]
 8005774:	4650      	mov	r0, sl
 8005776:	f7ff feb7 	bl	80054e8 <_free_r>
 800577a:	230c      	movs	r3, #12
 800577c:	f8ca 3000 	str.w	r3, [sl]
 8005780:	89a3      	ldrh	r3, [r4, #12]
 8005782:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005786:	81a3      	strh	r3, [r4, #12]
 8005788:	f04f 30ff 	mov.w	r0, #4294967295
 800578c:	e7e9      	b.n	8005762 <__ssputs_r+0x8a>
	...

08005790 <_svfiprintf_r>:
 8005790:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005794:	4698      	mov	r8, r3
 8005796:	898b      	ldrh	r3, [r1, #12]
 8005798:	061b      	lsls	r3, r3, #24
 800579a:	b09d      	sub	sp, #116	@ 0x74
 800579c:	4607      	mov	r7, r0
 800579e:	460d      	mov	r5, r1
 80057a0:	4614      	mov	r4, r2
 80057a2:	d510      	bpl.n	80057c6 <_svfiprintf_r+0x36>
 80057a4:	690b      	ldr	r3, [r1, #16]
 80057a6:	b973      	cbnz	r3, 80057c6 <_svfiprintf_r+0x36>
 80057a8:	2140      	movs	r1, #64	@ 0x40
 80057aa:	f7ff ff09 	bl	80055c0 <_malloc_r>
 80057ae:	6028      	str	r0, [r5, #0]
 80057b0:	6128      	str	r0, [r5, #16]
 80057b2:	b930      	cbnz	r0, 80057c2 <_svfiprintf_r+0x32>
 80057b4:	230c      	movs	r3, #12
 80057b6:	603b      	str	r3, [r7, #0]
 80057b8:	f04f 30ff 	mov.w	r0, #4294967295
 80057bc:	b01d      	add	sp, #116	@ 0x74
 80057be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80057c2:	2340      	movs	r3, #64	@ 0x40
 80057c4:	616b      	str	r3, [r5, #20]
 80057c6:	2300      	movs	r3, #0
 80057c8:	9309      	str	r3, [sp, #36]	@ 0x24
 80057ca:	2320      	movs	r3, #32
 80057cc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80057d0:	f8cd 800c 	str.w	r8, [sp, #12]
 80057d4:	2330      	movs	r3, #48	@ 0x30
 80057d6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8005974 <_svfiprintf_r+0x1e4>
 80057da:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80057de:	f04f 0901 	mov.w	r9, #1
 80057e2:	4623      	mov	r3, r4
 80057e4:	469a      	mov	sl, r3
 80057e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80057ea:	b10a      	cbz	r2, 80057f0 <_svfiprintf_r+0x60>
 80057ec:	2a25      	cmp	r2, #37	@ 0x25
 80057ee:	d1f9      	bne.n	80057e4 <_svfiprintf_r+0x54>
 80057f0:	ebba 0b04 	subs.w	fp, sl, r4
 80057f4:	d00b      	beq.n	800580e <_svfiprintf_r+0x7e>
 80057f6:	465b      	mov	r3, fp
 80057f8:	4622      	mov	r2, r4
 80057fa:	4629      	mov	r1, r5
 80057fc:	4638      	mov	r0, r7
 80057fe:	f7ff ff6b 	bl	80056d8 <__ssputs_r>
 8005802:	3001      	adds	r0, #1
 8005804:	f000 80a7 	beq.w	8005956 <_svfiprintf_r+0x1c6>
 8005808:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800580a:	445a      	add	r2, fp
 800580c:	9209      	str	r2, [sp, #36]	@ 0x24
 800580e:	f89a 3000 	ldrb.w	r3, [sl]
 8005812:	2b00      	cmp	r3, #0
 8005814:	f000 809f 	beq.w	8005956 <_svfiprintf_r+0x1c6>
 8005818:	2300      	movs	r3, #0
 800581a:	f04f 32ff 	mov.w	r2, #4294967295
 800581e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005822:	f10a 0a01 	add.w	sl, sl, #1
 8005826:	9304      	str	r3, [sp, #16]
 8005828:	9307      	str	r3, [sp, #28]
 800582a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800582e:	931a      	str	r3, [sp, #104]	@ 0x68
 8005830:	4654      	mov	r4, sl
 8005832:	2205      	movs	r2, #5
 8005834:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005838:	484e      	ldr	r0, [pc, #312]	@ (8005974 <_svfiprintf_r+0x1e4>)
 800583a:	f7fa fd01 	bl	8000240 <memchr>
 800583e:	9a04      	ldr	r2, [sp, #16]
 8005840:	b9d8      	cbnz	r0, 800587a <_svfiprintf_r+0xea>
 8005842:	06d0      	lsls	r0, r2, #27
 8005844:	bf44      	itt	mi
 8005846:	2320      	movmi	r3, #32
 8005848:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800584c:	0711      	lsls	r1, r2, #28
 800584e:	bf44      	itt	mi
 8005850:	232b      	movmi	r3, #43	@ 0x2b
 8005852:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005856:	f89a 3000 	ldrb.w	r3, [sl]
 800585a:	2b2a      	cmp	r3, #42	@ 0x2a
 800585c:	d015      	beq.n	800588a <_svfiprintf_r+0xfa>
 800585e:	9a07      	ldr	r2, [sp, #28]
 8005860:	4654      	mov	r4, sl
 8005862:	2000      	movs	r0, #0
 8005864:	f04f 0c0a 	mov.w	ip, #10
 8005868:	4621      	mov	r1, r4
 800586a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800586e:	3b30      	subs	r3, #48	@ 0x30
 8005870:	2b09      	cmp	r3, #9
 8005872:	d94b      	bls.n	800590c <_svfiprintf_r+0x17c>
 8005874:	b1b0      	cbz	r0, 80058a4 <_svfiprintf_r+0x114>
 8005876:	9207      	str	r2, [sp, #28]
 8005878:	e014      	b.n	80058a4 <_svfiprintf_r+0x114>
 800587a:	eba0 0308 	sub.w	r3, r0, r8
 800587e:	fa09 f303 	lsl.w	r3, r9, r3
 8005882:	4313      	orrs	r3, r2
 8005884:	9304      	str	r3, [sp, #16]
 8005886:	46a2      	mov	sl, r4
 8005888:	e7d2      	b.n	8005830 <_svfiprintf_r+0xa0>
 800588a:	9b03      	ldr	r3, [sp, #12]
 800588c:	1d19      	adds	r1, r3, #4
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	9103      	str	r1, [sp, #12]
 8005892:	2b00      	cmp	r3, #0
 8005894:	bfbb      	ittet	lt
 8005896:	425b      	neglt	r3, r3
 8005898:	f042 0202 	orrlt.w	r2, r2, #2
 800589c:	9307      	strge	r3, [sp, #28]
 800589e:	9307      	strlt	r3, [sp, #28]
 80058a0:	bfb8      	it	lt
 80058a2:	9204      	strlt	r2, [sp, #16]
 80058a4:	7823      	ldrb	r3, [r4, #0]
 80058a6:	2b2e      	cmp	r3, #46	@ 0x2e
 80058a8:	d10a      	bne.n	80058c0 <_svfiprintf_r+0x130>
 80058aa:	7863      	ldrb	r3, [r4, #1]
 80058ac:	2b2a      	cmp	r3, #42	@ 0x2a
 80058ae:	d132      	bne.n	8005916 <_svfiprintf_r+0x186>
 80058b0:	9b03      	ldr	r3, [sp, #12]
 80058b2:	1d1a      	adds	r2, r3, #4
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	9203      	str	r2, [sp, #12]
 80058b8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80058bc:	3402      	adds	r4, #2
 80058be:	9305      	str	r3, [sp, #20]
 80058c0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8005984 <_svfiprintf_r+0x1f4>
 80058c4:	7821      	ldrb	r1, [r4, #0]
 80058c6:	2203      	movs	r2, #3
 80058c8:	4650      	mov	r0, sl
 80058ca:	f7fa fcb9 	bl	8000240 <memchr>
 80058ce:	b138      	cbz	r0, 80058e0 <_svfiprintf_r+0x150>
 80058d0:	9b04      	ldr	r3, [sp, #16]
 80058d2:	eba0 000a 	sub.w	r0, r0, sl
 80058d6:	2240      	movs	r2, #64	@ 0x40
 80058d8:	4082      	lsls	r2, r0
 80058da:	4313      	orrs	r3, r2
 80058dc:	3401      	adds	r4, #1
 80058de:	9304      	str	r3, [sp, #16]
 80058e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80058e4:	4824      	ldr	r0, [pc, #144]	@ (8005978 <_svfiprintf_r+0x1e8>)
 80058e6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80058ea:	2206      	movs	r2, #6
 80058ec:	f7fa fca8 	bl	8000240 <memchr>
 80058f0:	2800      	cmp	r0, #0
 80058f2:	d036      	beq.n	8005962 <_svfiprintf_r+0x1d2>
 80058f4:	4b21      	ldr	r3, [pc, #132]	@ (800597c <_svfiprintf_r+0x1ec>)
 80058f6:	bb1b      	cbnz	r3, 8005940 <_svfiprintf_r+0x1b0>
 80058f8:	9b03      	ldr	r3, [sp, #12]
 80058fa:	3307      	adds	r3, #7
 80058fc:	f023 0307 	bic.w	r3, r3, #7
 8005900:	3308      	adds	r3, #8
 8005902:	9303      	str	r3, [sp, #12]
 8005904:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005906:	4433      	add	r3, r6
 8005908:	9309      	str	r3, [sp, #36]	@ 0x24
 800590a:	e76a      	b.n	80057e2 <_svfiprintf_r+0x52>
 800590c:	fb0c 3202 	mla	r2, ip, r2, r3
 8005910:	460c      	mov	r4, r1
 8005912:	2001      	movs	r0, #1
 8005914:	e7a8      	b.n	8005868 <_svfiprintf_r+0xd8>
 8005916:	2300      	movs	r3, #0
 8005918:	3401      	adds	r4, #1
 800591a:	9305      	str	r3, [sp, #20]
 800591c:	4619      	mov	r1, r3
 800591e:	f04f 0c0a 	mov.w	ip, #10
 8005922:	4620      	mov	r0, r4
 8005924:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005928:	3a30      	subs	r2, #48	@ 0x30
 800592a:	2a09      	cmp	r2, #9
 800592c:	d903      	bls.n	8005936 <_svfiprintf_r+0x1a6>
 800592e:	2b00      	cmp	r3, #0
 8005930:	d0c6      	beq.n	80058c0 <_svfiprintf_r+0x130>
 8005932:	9105      	str	r1, [sp, #20]
 8005934:	e7c4      	b.n	80058c0 <_svfiprintf_r+0x130>
 8005936:	fb0c 2101 	mla	r1, ip, r1, r2
 800593a:	4604      	mov	r4, r0
 800593c:	2301      	movs	r3, #1
 800593e:	e7f0      	b.n	8005922 <_svfiprintf_r+0x192>
 8005940:	ab03      	add	r3, sp, #12
 8005942:	9300      	str	r3, [sp, #0]
 8005944:	462a      	mov	r2, r5
 8005946:	4b0e      	ldr	r3, [pc, #56]	@ (8005980 <_svfiprintf_r+0x1f0>)
 8005948:	a904      	add	r1, sp, #16
 800594a:	4638      	mov	r0, r7
 800594c:	f3af 8000 	nop.w
 8005950:	1c42      	adds	r2, r0, #1
 8005952:	4606      	mov	r6, r0
 8005954:	d1d6      	bne.n	8005904 <_svfiprintf_r+0x174>
 8005956:	89ab      	ldrh	r3, [r5, #12]
 8005958:	065b      	lsls	r3, r3, #25
 800595a:	f53f af2d 	bmi.w	80057b8 <_svfiprintf_r+0x28>
 800595e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005960:	e72c      	b.n	80057bc <_svfiprintf_r+0x2c>
 8005962:	ab03      	add	r3, sp, #12
 8005964:	9300      	str	r3, [sp, #0]
 8005966:	462a      	mov	r2, r5
 8005968:	4b05      	ldr	r3, [pc, #20]	@ (8005980 <_svfiprintf_r+0x1f0>)
 800596a:	a904      	add	r1, sp, #16
 800596c:	4638      	mov	r0, r7
 800596e:	f000 f879 	bl	8005a64 <_printf_i>
 8005972:	e7ed      	b.n	8005950 <_svfiprintf_r+0x1c0>
 8005974:	08005fec 	.word	0x08005fec
 8005978:	08005ff6 	.word	0x08005ff6
 800597c:	00000000 	.word	0x00000000
 8005980:	080056d9 	.word	0x080056d9
 8005984:	08005ff2 	.word	0x08005ff2

08005988 <_printf_common>:
 8005988:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800598c:	4616      	mov	r6, r2
 800598e:	4698      	mov	r8, r3
 8005990:	688a      	ldr	r2, [r1, #8]
 8005992:	690b      	ldr	r3, [r1, #16]
 8005994:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005998:	4293      	cmp	r3, r2
 800599a:	bfb8      	it	lt
 800599c:	4613      	movlt	r3, r2
 800599e:	6033      	str	r3, [r6, #0]
 80059a0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80059a4:	4607      	mov	r7, r0
 80059a6:	460c      	mov	r4, r1
 80059a8:	b10a      	cbz	r2, 80059ae <_printf_common+0x26>
 80059aa:	3301      	adds	r3, #1
 80059ac:	6033      	str	r3, [r6, #0]
 80059ae:	6823      	ldr	r3, [r4, #0]
 80059b0:	0699      	lsls	r1, r3, #26
 80059b2:	bf42      	ittt	mi
 80059b4:	6833      	ldrmi	r3, [r6, #0]
 80059b6:	3302      	addmi	r3, #2
 80059b8:	6033      	strmi	r3, [r6, #0]
 80059ba:	6825      	ldr	r5, [r4, #0]
 80059bc:	f015 0506 	ands.w	r5, r5, #6
 80059c0:	d106      	bne.n	80059d0 <_printf_common+0x48>
 80059c2:	f104 0a19 	add.w	sl, r4, #25
 80059c6:	68e3      	ldr	r3, [r4, #12]
 80059c8:	6832      	ldr	r2, [r6, #0]
 80059ca:	1a9b      	subs	r3, r3, r2
 80059cc:	42ab      	cmp	r3, r5
 80059ce:	dc26      	bgt.n	8005a1e <_printf_common+0x96>
 80059d0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80059d4:	6822      	ldr	r2, [r4, #0]
 80059d6:	3b00      	subs	r3, #0
 80059d8:	bf18      	it	ne
 80059da:	2301      	movne	r3, #1
 80059dc:	0692      	lsls	r2, r2, #26
 80059de:	d42b      	bmi.n	8005a38 <_printf_common+0xb0>
 80059e0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80059e4:	4641      	mov	r1, r8
 80059e6:	4638      	mov	r0, r7
 80059e8:	47c8      	blx	r9
 80059ea:	3001      	adds	r0, #1
 80059ec:	d01e      	beq.n	8005a2c <_printf_common+0xa4>
 80059ee:	6823      	ldr	r3, [r4, #0]
 80059f0:	6922      	ldr	r2, [r4, #16]
 80059f2:	f003 0306 	and.w	r3, r3, #6
 80059f6:	2b04      	cmp	r3, #4
 80059f8:	bf02      	ittt	eq
 80059fa:	68e5      	ldreq	r5, [r4, #12]
 80059fc:	6833      	ldreq	r3, [r6, #0]
 80059fe:	1aed      	subeq	r5, r5, r3
 8005a00:	68a3      	ldr	r3, [r4, #8]
 8005a02:	bf0c      	ite	eq
 8005a04:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005a08:	2500      	movne	r5, #0
 8005a0a:	4293      	cmp	r3, r2
 8005a0c:	bfc4      	itt	gt
 8005a0e:	1a9b      	subgt	r3, r3, r2
 8005a10:	18ed      	addgt	r5, r5, r3
 8005a12:	2600      	movs	r6, #0
 8005a14:	341a      	adds	r4, #26
 8005a16:	42b5      	cmp	r5, r6
 8005a18:	d11a      	bne.n	8005a50 <_printf_common+0xc8>
 8005a1a:	2000      	movs	r0, #0
 8005a1c:	e008      	b.n	8005a30 <_printf_common+0xa8>
 8005a1e:	2301      	movs	r3, #1
 8005a20:	4652      	mov	r2, sl
 8005a22:	4641      	mov	r1, r8
 8005a24:	4638      	mov	r0, r7
 8005a26:	47c8      	blx	r9
 8005a28:	3001      	adds	r0, #1
 8005a2a:	d103      	bne.n	8005a34 <_printf_common+0xac>
 8005a2c:	f04f 30ff 	mov.w	r0, #4294967295
 8005a30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a34:	3501      	adds	r5, #1
 8005a36:	e7c6      	b.n	80059c6 <_printf_common+0x3e>
 8005a38:	18e1      	adds	r1, r4, r3
 8005a3a:	1c5a      	adds	r2, r3, #1
 8005a3c:	2030      	movs	r0, #48	@ 0x30
 8005a3e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005a42:	4422      	add	r2, r4
 8005a44:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005a48:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005a4c:	3302      	adds	r3, #2
 8005a4e:	e7c7      	b.n	80059e0 <_printf_common+0x58>
 8005a50:	2301      	movs	r3, #1
 8005a52:	4622      	mov	r2, r4
 8005a54:	4641      	mov	r1, r8
 8005a56:	4638      	mov	r0, r7
 8005a58:	47c8      	blx	r9
 8005a5a:	3001      	adds	r0, #1
 8005a5c:	d0e6      	beq.n	8005a2c <_printf_common+0xa4>
 8005a5e:	3601      	adds	r6, #1
 8005a60:	e7d9      	b.n	8005a16 <_printf_common+0x8e>
	...

08005a64 <_printf_i>:
 8005a64:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005a68:	7e0f      	ldrb	r7, [r1, #24]
 8005a6a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005a6c:	2f78      	cmp	r7, #120	@ 0x78
 8005a6e:	4691      	mov	r9, r2
 8005a70:	4680      	mov	r8, r0
 8005a72:	460c      	mov	r4, r1
 8005a74:	469a      	mov	sl, r3
 8005a76:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005a7a:	d807      	bhi.n	8005a8c <_printf_i+0x28>
 8005a7c:	2f62      	cmp	r7, #98	@ 0x62
 8005a7e:	d80a      	bhi.n	8005a96 <_printf_i+0x32>
 8005a80:	2f00      	cmp	r7, #0
 8005a82:	f000 80d2 	beq.w	8005c2a <_printf_i+0x1c6>
 8005a86:	2f58      	cmp	r7, #88	@ 0x58
 8005a88:	f000 80b9 	beq.w	8005bfe <_printf_i+0x19a>
 8005a8c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005a90:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005a94:	e03a      	b.n	8005b0c <_printf_i+0xa8>
 8005a96:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005a9a:	2b15      	cmp	r3, #21
 8005a9c:	d8f6      	bhi.n	8005a8c <_printf_i+0x28>
 8005a9e:	a101      	add	r1, pc, #4	@ (adr r1, 8005aa4 <_printf_i+0x40>)
 8005aa0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005aa4:	08005afd 	.word	0x08005afd
 8005aa8:	08005b11 	.word	0x08005b11
 8005aac:	08005a8d 	.word	0x08005a8d
 8005ab0:	08005a8d 	.word	0x08005a8d
 8005ab4:	08005a8d 	.word	0x08005a8d
 8005ab8:	08005a8d 	.word	0x08005a8d
 8005abc:	08005b11 	.word	0x08005b11
 8005ac0:	08005a8d 	.word	0x08005a8d
 8005ac4:	08005a8d 	.word	0x08005a8d
 8005ac8:	08005a8d 	.word	0x08005a8d
 8005acc:	08005a8d 	.word	0x08005a8d
 8005ad0:	08005c11 	.word	0x08005c11
 8005ad4:	08005b3b 	.word	0x08005b3b
 8005ad8:	08005bcb 	.word	0x08005bcb
 8005adc:	08005a8d 	.word	0x08005a8d
 8005ae0:	08005a8d 	.word	0x08005a8d
 8005ae4:	08005c33 	.word	0x08005c33
 8005ae8:	08005a8d 	.word	0x08005a8d
 8005aec:	08005b3b 	.word	0x08005b3b
 8005af0:	08005a8d 	.word	0x08005a8d
 8005af4:	08005a8d 	.word	0x08005a8d
 8005af8:	08005bd3 	.word	0x08005bd3
 8005afc:	6833      	ldr	r3, [r6, #0]
 8005afe:	1d1a      	adds	r2, r3, #4
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	6032      	str	r2, [r6, #0]
 8005b04:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005b08:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005b0c:	2301      	movs	r3, #1
 8005b0e:	e09d      	b.n	8005c4c <_printf_i+0x1e8>
 8005b10:	6833      	ldr	r3, [r6, #0]
 8005b12:	6820      	ldr	r0, [r4, #0]
 8005b14:	1d19      	adds	r1, r3, #4
 8005b16:	6031      	str	r1, [r6, #0]
 8005b18:	0606      	lsls	r6, r0, #24
 8005b1a:	d501      	bpl.n	8005b20 <_printf_i+0xbc>
 8005b1c:	681d      	ldr	r5, [r3, #0]
 8005b1e:	e003      	b.n	8005b28 <_printf_i+0xc4>
 8005b20:	0645      	lsls	r5, r0, #25
 8005b22:	d5fb      	bpl.n	8005b1c <_printf_i+0xb8>
 8005b24:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005b28:	2d00      	cmp	r5, #0
 8005b2a:	da03      	bge.n	8005b34 <_printf_i+0xd0>
 8005b2c:	232d      	movs	r3, #45	@ 0x2d
 8005b2e:	426d      	negs	r5, r5
 8005b30:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005b34:	4859      	ldr	r0, [pc, #356]	@ (8005c9c <_printf_i+0x238>)
 8005b36:	230a      	movs	r3, #10
 8005b38:	e011      	b.n	8005b5e <_printf_i+0xfa>
 8005b3a:	6821      	ldr	r1, [r4, #0]
 8005b3c:	6833      	ldr	r3, [r6, #0]
 8005b3e:	0608      	lsls	r0, r1, #24
 8005b40:	f853 5b04 	ldr.w	r5, [r3], #4
 8005b44:	d402      	bmi.n	8005b4c <_printf_i+0xe8>
 8005b46:	0649      	lsls	r1, r1, #25
 8005b48:	bf48      	it	mi
 8005b4a:	b2ad      	uxthmi	r5, r5
 8005b4c:	2f6f      	cmp	r7, #111	@ 0x6f
 8005b4e:	4853      	ldr	r0, [pc, #332]	@ (8005c9c <_printf_i+0x238>)
 8005b50:	6033      	str	r3, [r6, #0]
 8005b52:	bf14      	ite	ne
 8005b54:	230a      	movne	r3, #10
 8005b56:	2308      	moveq	r3, #8
 8005b58:	2100      	movs	r1, #0
 8005b5a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005b5e:	6866      	ldr	r6, [r4, #4]
 8005b60:	60a6      	str	r6, [r4, #8]
 8005b62:	2e00      	cmp	r6, #0
 8005b64:	bfa2      	ittt	ge
 8005b66:	6821      	ldrge	r1, [r4, #0]
 8005b68:	f021 0104 	bicge.w	r1, r1, #4
 8005b6c:	6021      	strge	r1, [r4, #0]
 8005b6e:	b90d      	cbnz	r5, 8005b74 <_printf_i+0x110>
 8005b70:	2e00      	cmp	r6, #0
 8005b72:	d04b      	beq.n	8005c0c <_printf_i+0x1a8>
 8005b74:	4616      	mov	r6, r2
 8005b76:	fbb5 f1f3 	udiv	r1, r5, r3
 8005b7a:	fb03 5711 	mls	r7, r3, r1, r5
 8005b7e:	5dc7      	ldrb	r7, [r0, r7]
 8005b80:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005b84:	462f      	mov	r7, r5
 8005b86:	42bb      	cmp	r3, r7
 8005b88:	460d      	mov	r5, r1
 8005b8a:	d9f4      	bls.n	8005b76 <_printf_i+0x112>
 8005b8c:	2b08      	cmp	r3, #8
 8005b8e:	d10b      	bne.n	8005ba8 <_printf_i+0x144>
 8005b90:	6823      	ldr	r3, [r4, #0]
 8005b92:	07df      	lsls	r7, r3, #31
 8005b94:	d508      	bpl.n	8005ba8 <_printf_i+0x144>
 8005b96:	6923      	ldr	r3, [r4, #16]
 8005b98:	6861      	ldr	r1, [r4, #4]
 8005b9a:	4299      	cmp	r1, r3
 8005b9c:	bfde      	ittt	le
 8005b9e:	2330      	movle	r3, #48	@ 0x30
 8005ba0:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005ba4:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005ba8:	1b92      	subs	r2, r2, r6
 8005baa:	6122      	str	r2, [r4, #16]
 8005bac:	f8cd a000 	str.w	sl, [sp]
 8005bb0:	464b      	mov	r3, r9
 8005bb2:	aa03      	add	r2, sp, #12
 8005bb4:	4621      	mov	r1, r4
 8005bb6:	4640      	mov	r0, r8
 8005bb8:	f7ff fee6 	bl	8005988 <_printf_common>
 8005bbc:	3001      	adds	r0, #1
 8005bbe:	d14a      	bne.n	8005c56 <_printf_i+0x1f2>
 8005bc0:	f04f 30ff 	mov.w	r0, #4294967295
 8005bc4:	b004      	add	sp, #16
 8005bc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005bca:	6823      	ldr	r3, [r4, #0]
 8005bcc:	f043 0320 	orr.w	r3, r3, #32
 8005bd0:	6023      	str	r3, [r4, #0]
 8005bd2:	4833      	ldr	r0, [pc, #204]	@ (8005ca0 <_printf_i+0x23c>)
 8005bd4:	2778      	movs	r7, #120	@ 0x78
 8005bd6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005bda:	6823      	ldr	r3, [r4, #0]
 8005bdc:	6831      	ldr	r1, [r6, #0]
 8005bde:	061f      	lsls	r7, r3, #24
 8005be0:	f851 5b04 	ldr.w	r5, [r1], #4
 8005be4:	d402      	bmi.n	8005bec <_printf_i+0x188>
 8005be6:	065f      	lsls	r7, r3, #25
 8005be8:	bf48      	it	mi
 8005bea:	b2ad      	uxthmi	r5, r5
 8005bec:	6031      	str	r1, [r6, #0]
 8005bee:	07d9      	lsls	r1, r3, #31
 8005bf0:	bf44      	itt	mi
 8005bf2:	f043 0320 	orrmi.w	r3, r3, #32
 8005bf6:	6023      	strmi	r3, [r4, #0]
 8005bf8:	b11d      	cbz	r5, 8005c02 <_printf_i+0x19e>
 8005bfa:	2310      	movs	r3, #16
 8005bfc:	e7ac      	b.n	8005b58 <_printf_i+0xf4>
 8005bfe:	4827      	ldr	r0, [pc, #156]	@ (8005c9c <_printf_i+0x238>)
 8005c00:	e7e9      	b.n	8005bd6 <_printf_i+0x172>
 8005c02:	6823      	ldr	r3, [r4, #0]
 8005c04:	f023 0320 	bic.w	r3, r3, #32
 8005c08:	6023      	str	r3, [r4, #0]
 8005c0a:	e7f6      	b.n	8005bfa <_printf_i+0x196>
 8005c0c:	4616      	mov	r6, r2
 8005c0e:	e7bd      	b.n	8005b8c <_printf_i+0x128>
 8005c10:	6833      	ldr	r3, [r6, #0]
 8005c12:	6825      	ldr	r5, [r4, #0]
 8005c14:	6961      	ldr	r1, [r4, #20]
 8005c16:	1d18      	adds	r0, r3, #4
 8005c18:	6030      	str	r0, [r6, #0]
 8005c1a:	062e      	lsls	r6, r5, #24
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	d501      	bpl.n	8005c24 <_printf_i+0x1c0>
 8005c20:	6019      	str	r1, [r3, #0]
 8005c22:	e002      	b.n	8005c2a <_printf_i+0x1c6>
 8005c24:	0668      	lsls	r0, r5, #25
 8005c26:	d5fb      	bpl.n	8005c20 <_printf_i+0x1bc>
 8005c28:	8019      	strh	r1, [r3, #0]
 8005c2a:	2300      	movs	r3, #0
 8005c2c:	6123      	str	r3, [r4, #16]
 8005c2e:	4616      	mov	r6, r2
 8005c30:	e7bc      	b.n	8005bac <_printf_i+0x148>
 8005c32:	6833      	ldr	r3, [r6, #0]
 8005c34:	1d1a      	adds	r2, r3, #4
 8005c36:	6032      	str	r2, [r6, #0]
 8005c38:	681e      	ldr	r6, [r3, #0]
 8005c3a:	6862      	ldr	r2, [r4, #4]
 8005c3c:	2100      	movs	r1, #0
 8005c3e:	4630      	mov	r0, r6
 8005c40:	f7fa fafe 	bl	8000240 <memchr>
 8005c44:	b108      	cbz	r0, 8005c4a <_printf_i+0x1e6>
 8005c46:	1b80      	subs	r0, r0, r6
 8005c48:	6060      	str	r0, [r4, #4]
 8005c4a:	6863      	ldr	r3, [r4, #4]
 8005c4c:	6123      	str	r3, [r4, #16]
 8005c4e:	2300      	movs	r3, #0
 8005c50:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005c54:	e7aa      	b.n	8005bac <_printf_i+0x148>
 8005c56:	6923      	ldr	r3, [r4, #16]
 8005c58:	4632      	mov	r2, r6
 8005c5a:	4649      	mov	r1, r9
 8005c5c:	4640      	mov	r0, r8
 8005c5e:	47d0      	blx	sl
 8005c60:	3001      	adds	r0, #1
 8005c62:	d0ad      	beq.n	8005bc0 <_printf_i+0x15c>
 8005c64:	6823      	ldr	r3, [r4, #0]
 8005c66:	079b      	lsls	r3, r3, #30
 8005c68:	d413      	bmi.n	8005c92 <_printf_i+0x22e>
 8005c6a:	68e0      	ldr	r0, [r4, #12]
 8005c6c:	9b03      	ldr	r3, [sp, #12]
 8005c6e:	4298      	cmp	r0, r3
 8005c70:	bfb8      	it	lt
 8005c72:	4618      	movlt	r0, r3
 8005c74:	e7a6      	b.n	8005bc4 <_printf_i+0x160>
 8005c76:	2301      	movs	r3, #1
 8005c78:	4632      	mov	r2, r6
 8005c7a:	4649      	mov	r1, r9
 8005c7c:	4640      	mov	r0, r8
 8005c7e:	47d0      	blx	sl
 8005c80:	3001      	adds	r0, #1
 8005c82:	d09d      	beq.n	8005bc0 <_printf_i+0x15c>
 8005c84:	3501      	adds	r5, #1
 8005c86:	68e3      	ldr	r3, [r4, #12]
 8005c88:	9903      	ldr	r1, [sp, #12]
 8005c8a:	1a5b      	subs	r3, r3, r1
 8005c8c:	42ab      	cmp	r3, r5
 8005c8e:	dcf2      	bgt.n	8005c76 <_printf_i+0x212>
 8005c90:	e7eb      	b.n	8005c6a <_printf_i+0x206>
 8005c92:	2500      	movs	r5, #0
 8005c94:	f104 0619 	add.w	r6, r4, #25
 8005c98:	e7f5      	b.n	8005c86 <_printf_i+0x222>
 8005c9a:	bf00      	nop
 8005c9c:	08005ffd 	.word	0x08005ffd
 8005ca0:	0800600e 	.word	0x0800600e

08005ca4 <memmove>:
 8005ca4:	4288      	cmp	r0, r1
 8005ca6:	b510      	push	{r4, lr}
 8005ca8:	eb01 0402 	add.w	r4, r1, r2
 8005cac:	d902      	bls.n	8005cb4 <memmove+0x10>
 8005cae:	4284      	cmp	r4, r0
 8005cb0:	4623      	mov	r3, r4
 8005cb2:	d807      	bhi.n	8005cc4 <memmove+0x20>
 8005cb4:	1e43      	subs	r3, r0, #1
 8005cb6:	42a1      	cmp	r1, r4
 8005cb8:	d008      	beq.n	8005ccc <memmove+0x28>
 8005cba:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005cbe:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005cc2:	e7f8      	b.n	8005cb6 <memmove+0x12>
 8005cc4:	4402      	add	r2, r0
 8005cc6:	4601      	mov	r1, r0
 8005cc8:	428a      	cmp	r2, r1
 8005cca:	d100      	bne.n	8005cce <memmove+0x2a>
 8005ccc:	bd10      	pop	{r4, pc}
 8005cce:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005cd2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005cd6:	e7f7      	b.n	8005cc8 <memmove+0x24>

08005cd8 <_sbrk_r>:
 8005cd8:	b538      	push	{r3, r4, r5, lr}
 8005cda:	4d06      	ldr	r5, [pc, #24]	@ (8005cf4 <_sbrk_r+0x1c>)
 8005cdc:	2300      	movs	r3, #0
 8005cde:	4604      	mov	r4, r0
 8005ce0:	4608      	mov	r0, r1
 8005ce2:	602b      	str	r3, [r5, #0]
 8005ce4:	f7fb fa04 	bl	80010f0 <_sbrk>
 8005ce8:	1c43      	adds	r3, r0, #1
 8005cea:	d102      	bne.n	8005cf2 <_sbrk_r+0x1a>
 8005cec:	682b      	ldr	r3, [r5, #0]
 8005cee:	b103      	cbz	r3, 8005cf2 <_sbrk_r+0x1a>
 8005cf0:	6023      	str	r3, [r4, #0]
 8005cf2:	bd38      	pop	{r3, r4, r5, pc}
 8005cf4:	20000350 	.word	0x20000350

08005cf8 <memcpy>:
 8005cf8:	440a      	add	r2, r1
 8005cfa:	4291      	cmp	r1, r2
 8005cfc:	f100 33ff 	add.w	r3, r0, #4294967295
 8005d00:	d100      	bne.n	8005d04 <memcpy+0xc>
 8005d02:	4770      	bx	lr
 8005d04:	b510      	push	{r4, lr}
 8005d06:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005d0a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005d0e:	4291      	cmp	r1, r2
 8005d10:	d1f9      	bne.n	8005d06 <memcpy+0xe>
 8005d12:	bd10      	pop	{r4, pc}

08005d14 <_realloc_r>:
 8005d14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005d18:	4680      	mov	r8, r0
 8005d1a:	4615      	mov	r5, r2
 8005d1c:	460c      	mov	r4, r1
 8005d1e:	b921      	cbnz	r1, 8005d2a <_realloc_r+0x16>
 8005d20:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005d24:	4611      	mov	r1, r2
 8005d26:	f7ff bc4b 	b.w	80055c0 <_malloc_r>
 8005d2a:	b92a      	cbnz	r2, 8005d38 <_realloc_r+0x24>
 8005d2c:	f7ff fbdc 	bl	80054e8 <_free_r>
 8005d30:	2400      	movs	r4, #0
 8005d32:	4620      	mov	r0, r4
 8005d34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005d38:	f000 f81a 	bl	8005d70 <_malloc_usable_size_r>
 8005d3c:	4285      	cmp	r5, r0
 8005d3e:	4606      	mov	r6, r0
 8005d40:	d802      	bhi.n	8005d48 <_realloc_r+0x34>
 8005d42:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8005d46:	d8f4      	bhi.n	8005d32 <_realloc_r+0x1e>
 8005d48:	4629      	mov	r1, r5
 8005d4a:	4640      	mov	r0, r8
 8005d4c:	f7ff fc38 	bl	80055c0 <_malloc_r>
 8005d50:	4607      	mov	r7, r0
 8005d52:	2800      	cmp	r0, #0
 8005d54:	d0ec      	beq.n	8005d30 <_realloc_r+0x1c>
 8005d56:	42b5      	cmp	r5, r6
 8005d58:	462a      	mov	r2, r5
 8005d5a:	4621      	mov	r1, r4
 8005d5c:	bf28      	it	cs
 8005d5e:	4632      	movcs	r2, r6
 8005d60:	f7ff ffca 	bl	8005cf8 <memcpy>
 8005d64:	4621      	mov	r1, r4
 8005d66:	4640      	mov	r0, r8
 8005d68:	f7ff fbbe 	bl	80054e8 <_free_r>
 8005d6c:	463c      	mov	r4, r7
 8005d6e:	e7e0      	b.n	8005d32 <_realloc_r+0x1e>

08005d70 <_malloc_usable_size_r>:
 8005d70:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005d74:	1f18      	subs	r0, r3, #4
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	bfbc      	itt	lt
 8005d7a:	580b      	ldrlt	r3, [r1, r0]
 8005d7c:	18c0      	addlt	r0, r0, r3
 8005d7e:	4770      	bx	lr

08005d80 <_init>:
 8005d80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d82:	bf00      	nop
 8005d84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d86:	bc08      	pop	{r3}
 8005d88:	469e      	mov	lr, r3
 8005d8a:	4770      	bx	lr

08005d8c <_fini>:
 8005d8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d8e:	bf00      	nop
 8005d90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d92:	bc08      	pop	{r3}
 8005d94:	469e      	mov	lr, r3
 8005d96:	4770      	bx	lr
